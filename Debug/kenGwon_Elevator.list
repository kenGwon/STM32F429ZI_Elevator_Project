
kenGwon_Elevator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a828  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d8  0800a9d8  0800a9d8  0001a9d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acb0  0800acb0  000200dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800acb0  0800acb0  0001acb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800acb8  0800acb8  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800acb8  0800acb8  0001acb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800acbc  0800acbc  0001acbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  0800acc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200dc  2**0
                  CONTENTS
 10 .bss          0000533c  200000dc  200000dc  000200dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005418  20005418  000200dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002a6fe  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000054bd  00000000  00000000  0004a80a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002070  00000000  00000000  0004fcc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001e60  00000000  00000000  00051d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a54d  00000000  00000000  00053b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000275b3  00000000  00000000  0007e0e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fe108  00000000  00000000  000a5698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001a37a0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008e2c  00000000  00000000  001a37f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000dc 	.word	0x200000dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a9c0 	.word	0x0800a9c0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000e0 	.word	0x200000e0
 80001ec:	0800a9c0 	.word	0x0800a9c0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <LCD_Command>:
#endif
}

//
void LCD_Command(uint8_t command)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af02      	add	r7, sp, #8
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = command & 0xf0;
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	f023 030f 	bic.w	r3, r3, #15
 80005a4:	73fb      	strb	r3, [r7, #15]
	low_nibble = (command<<4) & 0xf0;
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	011b      	lsls	r3, r3, #4
 80005aa:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 80005ac:	7bfb      	ldrb	r3, [r7, #15]
 80005ae:	f043 030c 	orr.w	r3, r3, #12
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 80005b6:	7bfb      	ldrb	r3, [r7, #15]
 80005b8:	f043 0308 	orr.w	r3, r3, #8
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 80005c0:	7bbb      	ldrb	r3, [r7, #14]
 80005c2:	f043 030c 	orr.w	r3, r3, #12
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 80005ca:	7bbb      	ldrb	r3, [r7, #14]
 80005cc:	f043 0308 	orr.w	r3, r3, #8
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 80005d4:	bf00      	nop
 80005d6:	f107 0208 	add.w	r2, r7, #8
 80005da:	2364      	movs	r3, #100	; 0x64
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	2304      	movs	r3, #4
 80005e0:	214e      	movs	r1, #78	; 0x4e
 80005e2:	4805      	ldr	r0, [pc, #20]	; (80005f8 <LCD_Command+0x64>)
 80005e4:	f003 fb9a 	bl	8003d1c <HAL_I2C_Master_Transmit>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d1f3      	bne.n	80005d6 <LCD_Command+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 80005ee:	bf00      	nop
}
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	2000038c 	.word	0x2000038c

080005fc <LCD_Data>:

// 1 byte write... 딱 한개의 캐릭터만 찍는 것이다.
void LCD_Data(uint8_t data)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b086      	sub	sp, #24
 8000600:	af02      	add	r7, sp, #8
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = data & 0xf0;
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	f023 030f 	bic.w	r3, r3, #15
 800060c:	73fb      	strb	r3, [r7, #15]
	low_nibble = (data<<4) & 0xf0;
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	011b      	lsls	r3, r3, #4
 8000612:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8000614:	7bfb      	ldrb	r3, [r7, #15]
 8000616:	f043 030d 	orr.w	r3, r3, #13
 800061a:	b2db      	uxtb	r3, r3
 800061c:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	f043 0309 	orr.w	r3, r3, #9
 8000624:	b2db      	uxtb	r3, r3
 8000626:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8000628:	7bbb      	ldrb	r3, [r7, #14]
 800062a:	f043 030d 	orr.w	r3, r3, #13
 800062e:	b2db      	uxtb	r3, r3
 8000630:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 8000632:	7bbb      	ldrb	r3, [r7, #14]
 8000634:	f043 0309 	orr.w	r3, r3, #9
 8000638:	b2db      	uxtb	r3, r3
 800063a:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 800063c:	bf00      	nop
 800063e:	f107 0208 	add.w	r2, r7, #8
 8000642:	2364      	movs	r3, #100	; 0x64
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2304      	movs	r3, #4
 8000648:	214e      	movs	r1, #78	; 0x4e
 800064a:	4805      	ldr	r0, [pc, #20]	; (8000660 <LCD_Data+0x64>)
 800064c:	f003 fb66 	bl	8003d1c <HAL_I2C_Master_Transmit>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d1f3      	bne.n	800063e <LCD_Data+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 8000656:	bf00      	nop
}
 8000658:	3710      	adds	r7, #16
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	2000038c 	.word	0x2000038c

08000664 <I2C_LCD_Init>:

// lcd 초기화
void I2C_LCD_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0

	LCD_Command(0x33);
 8000668:	2033      	movs	r0, #51	; 0x33
 800066a:	f7ff ff93 	bl	8000594 <LCD_Command>
	LCD_Command(0x32);
 800066e:	2032      	movs	r0, #50	; 0x32
 8000670:	f7ff ff90 	bl	8000594 <LCD_Command>
	LCD_Command(0x28);	//Function Set 4-bit mode
 8000674:	2028      	movs	r0, #40	; 0x28
 8000676:	f7ff ff8d 	bl	8000594 <LCD_Command>
	LCD_Command(DISPLAY_ON);
 800067a:	200c      	movs	r0, #12
 800067c:	f7ff ff8a 	bl	8000594 <LCD_Command>
	LCD_Command(0x06);	//Entry mode set
 8000680:	2006      	movs	r0, #6
 8000682:	f7ff ff87 	bl	8000594 <LCD_Command>
	LCD_Command(CLEAR_DISPLAY);
 8000686:	2001      	movs	r0, #1
 8000688:	f7ff ff84 	bl	8000594 <LCD_Command>
	HAL_Delay(2);
 800068c:	2002      	movs	r0, #2
 800068e:	f001 fe69 	bl	8002364 <HAL_Delay>
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}

08000696 <LCD_String>:

// null을 만날때 까지 string을 LCD에 출력
void LCD_String(uint8_t *str)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	b082      	sub	sp, #8
 800069a:	af00      	add	r7, sp, #0
 800069c:	6078      	str	r0, [r7, #4]
	while(*str) // 널문자를 만날 때까지
 800069e:	e006      	b.n	80006ae <LCD_String+0x18>
	{
		LCD_Data(*str++);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	1c5a      	adds	r2, r3, #1
 80006a4:	607a      	str	r2, [r7, #4]
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff ffa7 	bl	80005fc <LCD_Data>
	while(*str) // 널문자를 만날 때까지
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d1f4      	bne.n	80006a0 <LCD_String+0xa>
	}
}
 80006b6:	bf00      	nop
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <Move_Cursor>:

// 해당 줄,col으로 이동 하는 함수
void Move_Cursor(uint8_t row, uint8_t column)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	460a      	mov	r2, r1
 80006ca:	71fb      	strb	r3, [r7, #7]
 80006cc:	4613      	mov	r3, r2
 80006ce:	71bb      	strb	r3, [r7, #6]
	LCD_Command(0x80 | row<<6 | column);
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	019b      	lsls	r3, r3, #6
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	79bb      	ldrb	r3, [r7, #6]
 80006d8:	4313      	orrs	r3, r2
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	4618      	mov	r0, r3
 80006e4:	f7ff ff56 	bl	8000594 <LCD_Command>
	return;
 80006e8:	bf00      	nop
}
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <Get_Button>:
 * param2: 함수가 접근하는 푸시 버튼 1개에 대응하는 1개 핀의 주소
 * param3: 함수가 접근하는 푸시 버튼 1개가 button_status[] 배열 상의 몇번째 인덱스에 해당하게 할 것인지를 결정하는 값
 * return: 푸시 버튼의 상태 (BUTTON_RELEASE 또는 BUTTON_PRESS)
 */
int Get_Button(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint8_t button_number)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	460b      	mov	r3, r1
 80006fa:	807b      	strh	r3, [r7, #2]
 80006fc:	4613      	mov	r3, r2
 80006fe:	707b      	strb	r3, [r7, #1]
	unsigned char curr_state; // uint8_t로 선언해도 되지만 unsigned char로 선언한 이유는 여기에 담기는 값이 비록 0 또는 1이겠지만, 그것을 BUTTON_PRESS 또는 BUTTON_RELEASE와 같은 논리적 상태로 보겠다는 개발자의 의도를 담은 선언이다.
	curr_state = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin); // 0(BUTTON_PRESS) 또는 1(BUTTON_RELEASE)
 8000700:	887b      	ldrh	r3, [r7, #2]
 8000702:	4619      	mov	r1, r3
 8000704:	6878      	ldr	r0, [r7, #4]
 8000706:	f003 f961 	bl	80039cc <HAL_GPIO_ReadPin>
 800070a:	4603      	mov	r3, r0
 800070c:	73fb      	strb	r3, [r7, #15]

	if (curr_state == BUTTON_PRESS && button_status[button_number] == BUTTON_RELEASE)
 800070e:	7bfb      	ldrb	r3, [r7, #15]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d10d      	bne.n	8000730 <Get_Button+0x40>
 8000714:	787b      	ldrb	r3, [r7, #1]
 8000716:	4a11      	ldr	r2, [pc, #68]	; (800075c <Get_Button+0x6c>)
 8000718:	5cd3      	ldrb	r3, [r2, r3]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d108      	bne.n	8000730 <Get_Button+0x40>
	{
		HAL_Delay(100); // 0.1초 동안 노이즈가 지나가길 기다림
 800071e:	2064      	movs	r0, #100	; 0x64
 8000720:	f001 fe20 	bl	8002364 <HAL_Delay>
		button_status[button_number] = BUTTON_PRESS; // 누르긴 눌렀으니까 우선 button_status배열 상의 상태를 BUTTON_PRESS로 바꿔준다.
 8000724:	787b      	ldrb	r3, [r7, #1]
 8000726:	4a0d      	ldr	r2, [pc, #52]	; (800075c <Get_Button+0x6c>)
 8000728:	2100      	movs	r1, #0
 800072a:	54d1      	strb	r1, [r2, r3]
		return BUTTON_RELEASE; // 아직은 버튼을 누른것으로 간주할 수 없다.(왜냐하면 button_status배열 상의 버튼의 기존 상태가 BUTTON_RELEASE였기 때문이다.)
 800072c:	2301      	movs	r3, #1
 800072e:	e011      	b.n	8000754 <Get_Button+0x64>
	}
	else if (curr_state == BUTTON_RELEASE && button_status[button_number] == BUTTON_PRESS)
 8000730:	7bfb      	ldrb	r3, [r7, #15]
 8000732:	2b01      	cmp	r3, #1
 8000734:	d10d      	bne.n	8000752 <Get_Button+0x62>
 8000736:	787b      	ldrb	r3, [r7, #1]
 8000738:	4a08      	ldr	r2, [pc, #32]	; (800075c <Get_Button+0x6c>)
 800073a:	5cd3      	ldrb	r3, [r2, r3]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d108      	bne.n	8000752 <Get_Button+0x62>
	{
		button_status[button_number] = BUTTON_RELEASE; // button_status배열 상의 상태를 curr_state에 맞게 다시 초기화해주고
 8000740:	787b      	ldrb	r3, [r7, #1]
 8000742:	4a06      	ldr	r2, [pc, #24]	; (800075c <Get_Button+0x6c>)
 8000744:	2101      	movs	r1, #1
 8000746:	54d1      	strb	r1, [r2, r3]
		HAL_Delay(30);
 8000748:	201e      	movs	r0, #30
 800074a:	f001 fe0b 	bl	8002364 <HAL_Delay>
		return BUTTON_PRESS; // 정말 버튼을 누른 것으로 인정
 800074e:	2300      	movs	r3, #0
 8000750:	e000      	b.n	8000754 <Get_Button+0x64>
	}

	return BUTTON_RELEASE;
 8000752:	2301      	movs	r3, #1
}
 8000754:	4618      	mov	r0, r3
 8000756:	3710      	adds	r7, #16
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000000 	.word	0x20000000

08000760 <HAL_GPIO_EXTI_Callback>:
 * 포토 센서 익스터널 인터럽트 콜백
 * copy from "/root/Drivers/STM32F4xx_HAL_Driver/Src/stm324f4xx_hal_gpio.c"
*/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000760:	b590      	push	{r4, r7, lr}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin)
 800076a:	88fb      	ldrh	r3, [r7, #6]
 800076c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000770:	d02a      	beq.n	80007c8 <HAL_GPIO_EXTI_Callback+0x68>
 8000772:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000776:	dc30      	bgt.n	80007da <HAL_GPIO_EXTI_Callback+0x7a>
 8000778:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800077c:	d01b      	beq.n	80007b6 <HAL_GPIO_EXTI_Callback+0x56>
 800077e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000782:	dc2a      	bgt.n	80007da <HAL_GPIO_EXTI_Callback+0x7a>
 8000784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000788:	d003      	beq.n	8000792 <HAL_GPIO_EXTI_Callback+0x32>
 800078a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800078e:	d009      	beq.n	80007a4 <HAL_GPIO_EXTI_Callback+0x44>
			set_curr_floor(FLOOR_4);
			display_floor_info();
			display_fnd(FLOOR_4);
			break;
		default:
			break;
 8000790:	e023      	b.n	80007da <HAL_GPIO_EXTI_Callback+0x7a>
			set_curr_floor(FLOOR_1);
 8000792:	2001      	movs	r0, #1
 8000794:	f000 faf8 	bl	8000d88 <set_curr_floor>
			display_floor_info();
 8000798:	f000 fb3a 	bl	8000e10 <display_floor_info>
			display_fnd(FLOOR_1);
 800079c:	2001      	movs	r0, #1
 800079e:	f000 fbaf 	bl	8000f00 <display_fnd>
			break;
 80007a2:	e01b      	b.n	80007dc <HAL_GPIO_EXTI_Callback+0x7c>
			set_curr_floor(FLOOR_2);
 80007a4:	2002      	movs	r0, #2
 80007a6:	f000 faef 	bl	8000d88 <set_curr_floor>
			display_floor_info();
 80007aa:	f000 fb31 	bl	8000e10 <display_floor_info>
			display_fnd(FLOOR_2);
 80007ae:	2002      	movs	r0, #2
 80007b0:	f000 fba6 	bl	8000f00 <display_fnd>
			break;
 80007b4:	e012      	b.n	80007dc <HAL_GPIO_EXTI_Callback+0x7c>
			set_curr_floor(FLOOR_3);
 80007b6:	2003      	movs	r0, #3
 80007b8:	f000 fae6 	bl	8000d88 <set_curr_floor>
			display_floor_info();
 80007bc:	f000 fb28 	bl	8000e10 <display_floor_info>
			display_fnd(FLOOR_3);
 80007c0:	2003      	movs	r0, #3
 80007c2:	f000 fb9d 	bl	8000f00 <display_fnd>
			break;
 80007c6:	e009      	b.n	80007dc <HAL_GPIO_EXTI_Callback+0x7c>
			set_curr_floor(FLOOR_4);
 80007c8:	2004      	movs	r0, #4
 80007ca:	f000 fadd 	bl	8000d88 <set_curr_floor>
			display_floor_info();
 80007ce:	f000 fb1f 	bl	8000e10 <display_floor_info>
			display_fnd(FLOOR_4);
 80007d2:	2004      	movs	r0, #4
 80007d4:	f000 fb94 	bl	8000f00 <display_fnd>
			break;
 80007d8:	e000      	b.n	80007dc <HAL_GPIO_EXTI_Callback+0x7c>
			break;
 80007da:	bf00      	nop
	}

	if (get_curr_floor() == get_target_floor())
 80007dc:	f000 fb00 	bl	8000de0 <get_curr_floor>
 80007e0:	4603      	mov	r3, r0
 80007e2:	461c      	mov	r4, r3
 80007e4:	f000 fb08 	bl	8000df8 <get_target_floor>
 80007e8:	4603      	mov	r3, r0
 80007ea:	429c      	cmp	r4, r3
 80007ec:	d105      	bne.n	80007fa <HAL_GPIO_EXTI_Callback+0x9a>
	{
		set_curr_status(STOP);
 80007ee:	2000      	movs	r0, #0
 80007f0:	f000 faba 	bl	8000d68 <set_curr_status>
		clear_dotmatrix_buffer();
 80007f4:	f000 f868 	bl	80008c8 <clear_dotmatrix_buffer>
		clear_dotmatrix_buffer();

		if (get_curr_status() == START_BOTTOM_UP) { set_dotmatrix_buffer(get_curr_status(), get_curr_floor() - 1); }
		if (get_curr_status() == START_TOP_DOWN) { set_dotmatrix_buffer(get_curr_status(), get_curr_floor() + 1); }
	}
}
 80007f8:	e025      	b.n	8000846 <HAL_GPIO_EXTI_Callback+0xe6>
		clear_dotmatrix_buffer();
 80007fa:	f000 f865 	bl	80008c8 <clear_dotmatrix_buffer>
		if (get_curr_status() == START_BOTTOM_UP) { set_dotmatrix_buffer(get_curr_status(), get_curr_floor() - 1); }
 80007fe:	f000 fae3 	bl	8000dc8 <get_curr_status>
 8000802:	4603      	mov	r3, r0
 8000804:	2b01      	cmp	r3, #1
 8000806:	d10c      	bne.n	8000822 <HAL_GPIO_EXTI_Callback+0xc2>
 8000808:	f000 fade 	bl	8000dc8 <get_curr_status>
 800080c:	4603      	mov	r3, r0
 800080e:	461c      	mov	r4, r3
 8000810:	f000 fae6 	bl	8000de0 <get_curr_floor>
 8000814:	4603      	mov	r3, r0
 8000816:	3b01      	subs	r3, #1
 8000818:	b2db      	uxtb	r3, r3
 800081a:	4619      	mov	r1, r3
 800081c:	4620      	mov	r0, r4
 800081e:	f000 f87f 	bl	8000920 <set_dotmatrix_buffer>
		if (get_curr_status() == START_TOP_DOWN) { set_dotmatrix_buffer(get_curr_status(), get_curr_floor() + 1); }
 8000822:	f000 fad1 	bl	8000dc8 <get_curr_status>
 8000826:	4603      	mov	r3, r0
 8000828:	2b02      	cmp	r3, #2
 800082a:	d10c      	bne.n	8000846 <HAL_GPIO_EXTI_Callback+0xe6>
 800082c:	f000 facc 	bl	8000dc8 <get_curr_status>
 8000830:	4603      	mov	r3, r0
 8000832:	461c      	mov	r4, r3
 8000834:	f000 fad4 	bl	8000de0 <get_curr_floor>
 8000838:	4603      	mov	r3, r0
 800083a:	3301      	adds	r3, #1
 800083c:	b2db      	uxtb	r3, r3
 800083e:	4619      	mov	r1, r3
 8000840:	4620      	mov	r0, r4
 8000842:	f000 f86d 	bl	8000920 <set_dotmatrix_buffer>
}
 8000846:	bf00      	nop
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	bd90      	pop	{r4, r7, pc}
	...

08000850 <HAL_ADC_ConvCpltCallback>:
 */
extern ADC_HandleTypeDef hadc1; // from main.c
extern uint16_t adcValue[4]; // from main.c

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a08      	ldr	r2, [pc, #32]	; (8000880 <HAL_ADC_ConvCpltCallback+0x30>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d109      	bne.n	8000876 <HAL_ADC_ConvCpltCallback+0x26>
	{
		adcValue[0] = HAL_ADC_GetValue(&hadc1);
 8000862:	4808      	ldr	r0, [pc, #32]	; (8000884 <HAL_ADC_ConvCpltCallback+0x34>)
 8000864:	f002 f811 	bl	800288a <HAL_ADC_GetValue>
 8000868:	4603      	mov	r3, r0
 800086a:	b29a      	uxth	r2, r3
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <HAL_ADC_ConvCpltCallback+0x38>)
 800086e:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Stop_IT(&hadc1);
 8000870:	4804      	ldr	r0, [pc, #16]	; (8000884 <HAL_ADC_ConvCpltCallback+0x34>)
 8000872:	f001 febd 	bl	80025f0 <HAL_ADC_Stop_IT>
	}
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40012000 	.word	0x40012000
 8000884:	20000294 	.word	0x20000294
 8000888:	20000994 	.word	0x20000994

0800088c <Dot_Matrix_Init>:

/*
 * Description: Dot Matrix의 불을 모두 끕니다.
 */
void Dot_Matrix_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
	for (int i = 0; i < 8; i++)
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	e00c      	b.n	80008b2 <Dot_Matrix_Init+0x26>
	{
		write_column_data(i); // i번째 col에 우선 전부 low를 줘놓고
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f000 f9cf 	bl	8000c3c <write_column_data>
		write_row_data(all_off[i]); // 그 안에서 row값을 각각이 틀어주면서 제어하는 느낌
 800089e:	4a09      	ldr	r2, [pc, #36]	; (80008c4 <Dot_Matrix_Init+0x38>)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4413      	add	r3, r2
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	4618      	mov	r0, r3
 80008a8:	f000 f9fc 	bl	8000ca4 <write_row_data>
	for (int i = 0; i < 8; i++)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	3301      	adds	r3, #1
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2b07      	cmp	r3, #7
 80008b6:	ddef      	ble.n	8000898 <Dot_Matrix_Init+0xc>
	}
}
 80008b8:	bf00      	nop
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	0800ab00 	.word	0x0800ab00

080008c8 <clear_dotmatrix_buffer>:


void clear_dotmatrix_buffer(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
	for	(int buffer_idx = 0; buffer_idx < 2; buffer_idx++) // 1부터 시작
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	e017      	b.n	8000904 <clear_dotmatrix_buffer+0x3c>
	{
		for (int matrix_idx = 0; matrix_idx < 8; matrix_idx++) // scroll_buffer[0] = blank
 80008d4:	2300      	movs	r3, #0
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	e00e      	b.n	80008f8 <clear_dotmatrix_buffer+0x30>
		{
			display_scroll_buffer[buffer_idx][matrix_idx] = all_off[matrix_idx];
 80008da:	4a0f      	ldr	r2, [pc, #60]	; (8000918 <clear_dotmatrix_buffer+0x50>)
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	4413      	add	r3, r2
 80008e0:	7819      	ldrb	r1, [r3, #0]
 80008e2:	4a0e      	ldr	r2, [pc, #56]	; (800091c <clear_dotmatrix_buffer+0x54>)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	00db      	lsls	r3, r3, #3
 80008e8:	441a      	add	r2, r3
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	4413      	add	r3, r2
 80008ee:	460a      	mov	r2, r1
 80008f0:	701a      	strb	r2, [r3, #0]
		for (int matrix_idx = 0; matrix_idx < 8; matrix_idx++) // scroll_buffer[0] = blank
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	3301      	adds	r3, #1
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	2b07      	cmp	r3, #7
 80008fc:	dded      	ble.n	80008da <clear_dotmatrix_buffer+0x12>
	for	(int buffer_idx = 0; buffer_idx < 2; buffer_idx++) // 1부터 시작
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	3301      	adds	r3, #1
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2b01      	cmp	r3, #1
 8000908:	dde4      	ble.n	80008d4 <clear_dotmatrix_buffer+0xc>
		}
	}
}
 800090a:	bf00      	nop
 800090c:	bf00      	nop
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	0800ab00 	.word	0x0800ab00
 800091c:	200000f8 	.word	0x200000f8

08000920 <set_dotmatrix_buffer>:

void set_dotmatrix_buffer(uint8_t curr_status, uint8_t target_floor)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	460a      	mov	r2, r1
 800092a:	71fb      	strb	r3, [r7, #7]
 800092c:	4613      	mov	r3, r2
 800092e:	71bb      	strb	r3, [r7, #6]
	clear_dotmatrix_buffer();
 8000930:	f7ff ffca 	bl	80008c8 <clear_dotmatrix_buffer>

	if (curr_status == STOP)
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d06e      	beq.n	8000a18 <set_dotmatrix_buffer+0xf8>
	{
	}
	else if (curr_status == START_TOP_DOWN)
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	2b02      	cmp	r3, #2
 800093e:	d134      	bne.n	80009aa <set_dotmatrix_buffer+0x8a>
	{
		for	(int buffer_idx = 0; buffer_idx < 2; buffer_idx++)
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]
 8000944:	e02d      	b.n	80009a2 <set_dotmatrix_buffer+0x82>
		{
			for (int matrix_idx = 0; matrix_idx < 8; matrix_idx++) // scroll_buffer[0] = blank
 8000946:	2300      	movs	r3, #0
 8000948:	613b      	str	r3, [r7, #16]
 800094a:	e024      	b.n	8000996 <set_dotmatrix_buffer+0x76>
			{
				if (buffer_idx == 0) { display_scroll_buffer[buffer_idx][matrix_idx] = up_arrow[matrix_idx]; }
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d10c      	bne.n	800096c <set_dotmatrix_buffer+0x4c>
 8000952:	4a33      	ldr	r2, [pc, #204]	; (8000a20 <set_dotmatrix_buffer+0x100>)
 8000954:	693b      	ldr	r3, [r7, #16]
 8000956:	4413      	add	r3, r2
 8000958:	7819      	ldrb	r1, [r3, #0]
 800095a:	4a32      	ldr	r2, [pc, #200]	; (8000a24 <set_dotmatrix_buffer+0x104>)
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	00db      	lsls	r3, r3, #3
 8000960:	441a      	add	r2, r3
 8000962:	693b      	ldr	r3, [r7, #16]
 8000964:	4413      	add	r3, r2
 8000966:	460a      	mov	r2, r1
 8000968:	701a      	strb	r2, [r3, #0]
 800096a:	e011      	b.n	8000990 <set_dotmatrix_buffer+0x70>
				else if (buffer_idx == 1) { display_scroll_buffer[buffer_idx][matrix_idx] = floor_num[target_floor][matrix_idx]; }
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d10e      	bne.n	8000990 <set_dotmatrix_buffer+0x70>
 8000972:	79bb      	ldrb	r3, [r7, #6]
 8000974:	4a2c      	ldr	r2, [pc, #176]	; (8000a28 <set_dotmatrix_buffer+0x108>)
 8000976:	00db      	lsls	r3, r3, #3
 8000978:	441a      	add	r2, r3
 800097a:	693b      	ldr	r3, [r7, #16]
 800097c:	4413      	add	r3, r2
 800097e:	7819      	ldrb	r1, [r3, #0]
 8000980:	4a28      	ldr	r2, [pc, #160]	; (8000a24 <set_dotmatrix_buffer+0x104>)
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	00db      	lsls	r3, r3, #3
 8000986:	441a      	add	r2, r3
 8000988:	693b      	ldr	r3, [r7, #16]
 800098a:	4413      	add	r3, r2
 800098c:	460a      	mov	r2, r1
 800098e:	701a      	strb	r2, [r3, #0]
			for (int matrix_idx = 0; matrix_idx < 8; matrix_idx++) // scroll_buffer[0] = blank
 8000990:	693b      	ldr	r3, [r7, #16]
 8000992:	3301      	adds	r3, #1
 8000994:	613b      	str	r3, [r7, #16]
 8000996:	693b      	ldr	r3, [r7, #16]
 8000998:	2b07      	cmp	r3, #7
 800099a:	ddd7      	ble.n	800094c <set_dotmatrix_buffer+0x2c>
		for	(int buffer_idx = 0; buffer_idx < 2; buffer_idx++)
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	3301      	adds	r3, #1
 80009a0:	617b      	str	r3, [r7, #20]
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	ddce      	ble.n	8000946 <set_dotmatrix_buffer+0x26>
				if (buffer_idx == 1) { display_scroll_buffer[buffer_idx][matrix_idx] = floor_num[target_floor][matrix_idx]; }
				else if (buffer_idx == 0) { display_scroll_buffer[buffer_idx][matrix_idx] = down_arrow[matrix_idx]; }
			}
		}
	}
}
 80009a8:	e036      	b.n	8000a18 <set_dotmatrix_buffer+0xf8>
	else if (curr_status == START_BOTTOM_UP)
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d133      	bne.n	8000a18 <set_dotmatrix_buffer+0xf8>
		for	(int buffer_idx = 0; buffer_idx < 2; buffer_idx++)
 80009b0:	2300      	movs	r3, #0
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	e02d      	b.n	8000a12 <set_dotmatrix_buffer+0xf2>
			for (int matrix_idx = 0; matrix_idx < 8; matrix_idx++) // scroll_buffer[0] = blank
 80009b6:	2300      	movs	r3, #0
 80009b8:	60bb      	str	r3, [r7, #8]
 80009ba:	e024      	b.n	8000a06 <set_dotmatrix_buffer+0xe6>
				if (buffer_idx == 1) { display_scroll_buffer[buffer_idx][matrix_idx] = floor_num[target_floor][matrix_idx]; }
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d10f      	bne.n	80009e2 <set_dotmatrix_buffer+0xc2>
 80009c2:	79bb      	ldrb	r3, [r7, #6]
 80009c4:	4a18      	ldr	r2, [pc, #96]	; (8000a28 <set_dotmatrix_buffer+0x108>)
 80009c6:	00db      	lsls	r3, r3, #3
 80009c8:	441a      	add	r2, r3
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	4413      	add	r3, r2
 80009ce:	7819      	ldrb	r1, [r3, #0]
 80009d0:	4a14      	ldr	r2, [pc, #80]	; (8000a24 <set_dotmatrix_buffer+0x104>)
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	00db      	lsls	r3, r3, #3
 80009d6:	441a      	add	r2, r3
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	4413      	add	r3, r2
 80009dc:	460a      	mov	r2, r1
 80009de:	701a      	strb	r2, [r3, #0]
 80009e0:	e00e      	b.n	8000a00 <set_dotmatrix_buffer+0xe0>
				else if (buffer_idx == 0) { display_scroll_buffer[buffer_idx][matrix_idx] = down_arrow[matrix_idx]; }
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d10b      	bne.n	8000a00 <set_dotmatrix_buffer+0xe0>
 80009e8:	4a10      	ldr	r2, [pc, #64]	; (8000a2c <set_dotmatrix_buffer+0x10c>)
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	4413      	add	r3, r2
 80009ee:	7819      	ldrb	r1, [r3, #0]
 80009f0:	4a0c      	ldr	r2, [pc, #48]	; (8000a24 <set_dotmatrix_buffer+0x104>)
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	00db      	lsls	r3, r3, #3
 80009f6:	441a      	add	r2, r3
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	4413      	add	r3, r2
 80009fc:	460a      	mov	r2, r1
 80009fe:	701a      	strb	r2, [r3, #0]
			for (int matrix_idx = 0; matrix_idx < 8; matrix_idx++) // scroll_buffer[0] = blank
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	3301      	adds	r3, #1
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	2b07      	cmp	r3, #7
 8000a0a:	ddd7      	ble.n	80009bc <set_dotmatrix_buffer+0x9c>
		for	(int buffer_idx = 0; buffer_idx < 2; buffer_idx++)
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	ddce      	ble.n	80009b6 <set_dotmatrix_buffer+0x96>
}
 8000a18:	bf00      	nop
 8000a1a:	3718      	adds	r7, #24
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	0800aaf0 	.word	0x0800aaf0
 8000a24:	200000f8 	.word	0x200000f8
 8000a28:	0800aaa0 	.word	0x0800aaa0
 8000a2c:	0800aaf8 	.word	0x0800aaf8

08000a30 <control_dotmatrix>:


void control_dotmatrix(uint8_t curr_status)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b088      	sub	sp, #32
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	71fb      	strb	r3, [r7, #7]
	static uint8_t count = 0; // column count
	static uint8_t index = 0; // scroll buffer의 2차원 index값
	static uint32_t past_time = 0;

	if (curr_status == STOP)
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d10b      	bne.n	8000a58 <control_dotmatrix+0x28>
	{
		count = 0;
 8000a40:	4b79      	ldr	r3, [pc, #484]	; (8000c28 <control_dotmatrix+0x1f8>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	701a      	strb	r2, [r3, #0]
		index = 0;
 8000a46:	4b79      	ldr	r3, [pc, #484]	; (8000c2c <control_dotmatrix+0x1fc>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	701a      	strb	r2, [r3, #0]
		past_time = 0;
 8000a4c:	4b78      	ldr	r3, [pc, #480]	; (8000c30 <control_dotmatrix+0x200>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
		clear_dotmatrix_buffer();
 8000a52:	f7ff ff39 	bl	80008c8 <clear_dotmatrix_buffer>
			write_column_data(i);
			write_row_data(display_data[i]);
			delay_us(1000);
		}
	}
}
 8000a56:	e0e2      	b.n	8000c1e <control_dotmatrix+0x1ee>
	else if (curr_status == START_BOTTOM_UP)
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d16e      	bne.n	8000b3c <control_dotmatrix+0x10c>
		uint32_t now_time = HAL_GetTick(); // 정식 타이머를 안쓰고 시간 재는방법... 500ms
 8000a5e:	f001 fc75 	bl	800234c <HAL_GetTick>
 8000a62:	60b8      	str	r0, [r7, #8]
		if (now_time - past_time >= 500)
 8000a64:	4b72      	ldr	r3, [pc, #456]	; (8000c30 <control_dotmatrix+0x200>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	68ba      	ldr	r2, [r7, #8]
 8000a6a:	1ad3      	subs	r3, r2, r3
 8000a6c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000a70:	d34c      	bcc.n	8000b0c <control_dotmatrix+0xdc>
			past_time = now_time;
 8000a72:	4a6f      	ldr	r2, [pc, #444]	; (8000c30 <control_dotmatrix+0x200>)
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	6013      	str	r3, [r2, #0]
			for (int i = 0; i < 8; i++)
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61fb      	str	r3, [r7, #28]
 8000a7c:	e029      	b.n	8000ad2 <control_dotmatrix+0xa2>
				display_data[i] = (display_scroll_buffer[index][i] >> count) | (display_scroll_buffer[index+1][i] << (8 - count));
 8000a7e:	4b6b      	ldr	r3, [pc, #428]	; (8000c2c <control_dotmatrix+0x1fc>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	4a6c      	ldr	r2, [pc, #432]	; (8000c34 <control_dotmatrix+0x204>)
 8000a84:	00db      	lsls	r3, r3, #3
 8000a86:	441a      	add	r2, r3
 8000a88:	69fb      	ldr	r3, [r7, #28]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	461a      	mov	r2, r3
 8000a90:	4b65      	ldr	r3, [pc, #404]	; (8000c28 <control_dotmatrix+0x1f8>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	fa42 f303 	asr.w	r3, r2, r3
 8000a98:	b25a      	sxtb	r2, r3
 8000a9a:	4b64      	ldr	r3, [pc, #400]	; (8000c2c <control_dotmatrix+0x1fc>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	4964      	ldr	r1, [pc, #400]	; (8000c34 <control_dotmatrix+0x204>)
 8000aa2:	00db      	lsls	r3, r3, #3
 8000aa4:	4419      	add	r1, r3
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	440b      	add	r3, r1
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	4619      	mov	r1, r3
 8000aae:	4b5e      	ldr	r3, [pc, #376]	; (8000c28 <control_dotmatrix+0x1f8>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	f1c3 0308 	rsb	r3, r3, #8
 8000ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aba:	b25b      	sxtb	r3, r3
 8000abc:	4313      	orrs	r3, r2
 8000abe:	b25b      	sxtb	r3, r3
 8000ac0:	b2d9      	uxtb	r1, r3
 8000ac2:	4a5d      	ldr	r2, [pc, #372]	; (8000c38 <control_dotmatrix+0x208>)
 8000ac4:	69fb      	ldr	r3, [r7, #28]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	460a      	mov	r2, r1
 8000aca:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 8; i++)
 8000acc:	69fb      	ldr	r3, [r7, #28]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	61fb      	str	r3, [r7, #28]
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	2b07      	cmp	r3, #7
 8000ad6:	ddd2      	ble.n	8000a7e <control_dotmatrix+0x4e>
			if (++count == 9) // 8 칼럼을 다 처리 했으면 다음 스크롤 버퍼로 이동
 8000ad8:	4b53      	ldr	r3, [pc, #332]	; (8000c28 <control_dotmatrix+0x1f8>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	3301      	adds	r3, #1
 8000ade:	b2da      	uxtb	r2, r3
 8000ae0:	4b51      	ldr	r3, [pc, #324]	; (8000c28 <control_dotmatrix+0x1f8>)
 8000ae2:	701a      	strb	r2, [r3, #0]
 8000ae4:	4b50      	ldr	r3, [pc, #320]	; (8000c28 <control_dotmatrix+0x1f8>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b09      	cmp	r3, #9
 8000aea:	d10f      	bne.n	8000b0c <control_dotmatrix+0xdc>
				count = 0;
 8000aec:	4b4e      	ldr	r3, [pc, #312]	; (8000c28 <control_dotmatrix+0x1f8>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	701a      	strb	r2, [r3, #0]
				index++;
 8000af2:	4b4e      	ldr	r3, [pc, #312]	; (8000c2c <control_dotmatrix+0x1fc>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	3301      	adds	r3, #1
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	4b4c      	ldr	r3, [pc, #304]	; (8000c2c <control_dotmatrix+0x1fc>)
 8000afc:	701a      	strb	r2, [r3, #0]
				if (index == 1)
 8000afe:	4b4b      	ldr	r3, [pc, #300]	; (8000c2c <control_dotmatrix+0x1fc>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d102      	bne.n	8000b0c <control_dotmatrix+0xdc>
					index = 0;
 8000b06:	4b49      	ldr	r3, [pc, #292]	; (8000c2c <control_dotmatrix+0x1fc>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 8; i++)
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61bb      	str	r3, [r7, #24]
 8000b10:	e010      	b.n	8000b34 <control_dotmatrix+0x104>
			write_column_data(i);
 8000b12:	69b8      	ldr	r0, [r7, #24]
 8000b14:	f000 f892 	bl	8000c3c <write_column_data>
			write_row_data(display_data[i]);
 8000b18:	4a47      	ldr	r2, [pc, #284]	; (8000c38 <control_dotmatrix+0x208>)
 8000b1a:	69bb      	ldr	r3, [r7, #24]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f000 f8bf 	bl	8000ca4 <write_row_data>
			delay_us(1000);
 8000b26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b2a:	f001 fb97 	bl	800225c <delay_us>
		for (int i = 0; i < 8; i++)
 8000b2e:	69bb      	ldr	r3, [r7, #24]
 8000b30:	3301      	adds	r3, #1
 8000b32:	61bb      	str	r3, [r7, #24]
 8000b34:	69bb      	ldr	r3, [r7, #24]
 8000b36:	2b07      	cmp	r3, #7
 8000b38:	ddeb      	ble.n	8000b12 <control_dotmatrix+0xe2>
}
 8000b3a:	e070      	b.n	8000c1e <control_dotmatrix+0x1ee>
	else if (curr_status == START_TOP_DOWN)
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	2b02      	cmp	r3, #2
 8000b40:	d16d      	bne.n	8000c1e <control_dotmatrix+0x1ee>
		uint32_t now_time = HAL_GetTick(); // 정식 타이머를 안쓰고 시간 재는방법... 500ms
 8000b42:	f001 fc03 	bl	800234c <HAL_GetTick>
 8000b46:	60f8      	str	r0, [r7, #12]
		if (now_time - past_time >= 500)
 8000b48:	4b39      	ldr	r3, [pc, #228]	; (8000c30 <control_dotmatrix+0x200>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	68fa      	ldr	r2, [r7, #12]
 8000b4e:	1ad3      	subs	r3, r2, r3
 8000b50:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000b54:	d34c      	bcc.n	8000bf0 <control_dotmatrix+0x1c0>
			past_time = now_time;
 8000b56:	4a36      	ldr	r2, [pc, #216]	; (8000c30 <control_dotmatrix+0x200>)
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	6013      	str	r3, [r2, #0]
			for (int i = 0; i < 8; i++)
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	e029      	b.n	8000bb6 <control_dotmatrix+0x186>
				display_data[i] = (display_scroll_buffer[index][i] << count) | (display_scroll_buffer[index+1][i] >> (8 - count));
 8000b62:	4b32      	ldr	r3, [pc, #200]	; (8000c2c <control_dotmatrix+0x1fc>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	4a33      	ldr	r2, [pc, #204]	; (8000c34 <control_dotmatrix+0x204>)
 8000b68:	00db      	lsls	r3, r3, #3
 8000b6a:	441a      	add	r2, r3
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	4413      	add	r3, r2
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	461a      	mov	r2, r3
 8000b74:	4b2c      	ldr	r3, [pc, #176]	; (8000c28 <control_dotmatrix+0x1f8>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7c:	b25a      	sxtb	r2, r3
 8000b7e:	4b2b      	ldr	r3, [pc, #172]	; (8000c2c <control_dotmatrix+0x1fc>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	3301      	adds	r3, #1
 8000b84:	492b      	ldr	r1, [pc, #172]	; (8000c34 <control_dotmatrix+0x204>)
 8000b86:	00db      	lsls	r3, r3, #3
 8000b88:	4419      	add	r1, r3
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	440b      	add	r3, r1
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	4619      	mov	r1, r3
 8000b92:	4b25      	ldr	r3, [pc, #148]	; (8000c28 <control_dotmatrix+0x1f8>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	f1c3 0308 	rsb	r3, r3, #8
 8000b9a:	fa41 f303 	asr.w	r3, r1, r3
 8000b9e:	b25b      	sxtb	r3, r3
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	b25b      	sxtb	r3, r3
 8000ba4:	b2d9      	uxtb	r1, r3
 8000ba6:	4a24      	ldr	r2, [pc, #144]	; (8000c38 <control_dotmatrix+0x208>)
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	4413      	add	r3, r2
 8000bac:	460a      	mov	r2, r1
 8000bae:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 8; i++)
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	617b      	str	r3, [r7, #20]
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	2b07      	cmp	r3, #7
 8000bba:	ddd2      	ble.n	8000b62 <control_dotmatrix+0x132>
			if (++count == 9) // 8 칼럼을 다 처리 했으면 다음 스크롤 버퍼로 이동
 8000bbc:	4b1a      	ldr	r3, [pc, #104]	; (8000c28 <control_dotmatrix+0x1f8>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	b2da      	uxtb	r2, r3
 8000bc4:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <control_dotmatrix+0x1f8>)
 8000bc6:	701a      	strb	r2, [r3, #0]
 8000bc8:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <control_dotmatrix+0x1f8>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b09      	cmp	r3, #9
 8000bce:	d10f      	bne.n	8000bf0 <control_dotmatrix+0x1c0>
				count = 0;
 8000bd0:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <control_dotmatrix+0x1f8>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	701a      	strb	r2, [r3, #0]
				index++;
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <control_dotmatrix+0x1fc>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <control_dotmatrix+0x1fc>)
 8000be0:	701a      	strb	r2, [r3, #0]
				if (index == 1)
 8000be2:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <control_dotmatrix+0x1fc>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d102      	bne.n	8000bf0 <control_dotmatrix+0x1c0>
					index = 0;
 8000bea:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <control_dotmatrix+0x1fc>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 8; i++)
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	e010      	b.n	8000c18 <control_dotmatrix+0x1e8>
			write_column_data(i);
 8000bf6:	6938      	ldr	r0, [r7, #16]
 8000bf8:	f000 f820 	bl	8000c3c <write_column_data>
			write_row_data(display_data[i]);
 8000bfc:	4a0e      	ldr	r2, [pc, #56]	; (8000c38 <control_dotmatrix+0x208>)
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	4413      	add	r3, r2
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f000 f84d 	bl	8000ca4 <write_row_data>
			delay_us(1000);
 8000c0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c0e:	f001 fb25 	bl	800225c <delay_us>
		for (int i = 0; i < 8; i++)
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	3301      	adds	r3, #1
 8000c16:	613b      	str	r3, [r7, #16]
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	2b07      	cmp	r3, #7
 8000c1c:	ddeb      	ble.n	8000bf6 <control_dotmatrix+0x1c6>
}
 8000c1e:	bf00      	nop
 8000c20:	3720      	adds	r7, #32
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000110 	.word	0x20000110
 8000c2c:	20000111 	.word	0x20000111
 8000c30:	20000114 	.word	0x20000114
 8000c34:	200000f8 	.word	0x200000f8
 8000c38:	20000108 	.word	0x20000108

08000c3c <write_column_data>:

// common-anode 방식 기준의 코드
void write_column_data(int col)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 8; i++)
 8000c44:	2300      	movs	r3, #0
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	e01f      	b.n	8000c8a <write_column_data+0x4e>
	{
		if (i == col) {HAL_GPIO_WritePin(col_port[i], col_pin[i], GPIO_PIN_RESET);} // on 상황!! common-anode이기 때문에 0일 때 켜짐
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	d10c      	bne.n	8000c6c <write_column_data+0x30>
 8000c52:	4a12      	ldr	r2, [pc, #72]	; (8000c9c <write_column_data+0x60>)
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000c5a:	4a11      	ldr	r2, [pc, #68]	; (8000ca0 <write_column_data+0x64>)
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c62:	2200      	movs	r2, #0
 8000c64:	4619      	mov	r1, r3
 8000c66:	f002 fec9 	bl	80039fc <HAL_GPIO_WritePin>
 8000c6a:	e00b      	b.n	8000c84 <write_column_data+0x48>
		else {HAL_GPIO_WritePin(col_port[i], col_pin[i], GPIO_PIN_SET);} // off 상황!! common-anode이기 때문에 1일 때 꺼짐
 8000c6c:	4a0b      	ldr	r2, [pc, #44]	; (8000c9c <write_column_data+0x60>)
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000c74:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <write_column_data+0x64>)
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	4619      	mov	r1, r3
 8000c80:	f002 febc 	bl	80039fc <HAL_GPIO_WritePin>
	for (int i = 0; i < 8; i++)
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	3301      	adds	r3, #1
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	2b07      	cmp	r3, #7
 8000c8e:	dddc      	ble.n	8000c4a <write_column_data+0xe>
	}
}
 8000c90:	bf00      	nop
 8000c92:	bf00      	nop
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000008 	.word	0x20000008
 8000ca0:	20000048 	.word	0x20000048

08000ca4 <write_row_data>:

// data = ob00111100 켜보자. 핵심은 and(&) 비트연산을 사용하는 것이다.
void write_row_data(unsigned char data) // 8bit 한줄 들어오는거다.
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
	unsigned char temp_data;
	temp_data = data;
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	72fb      	strb	r3, [r7, #11]

	for (int i = 0; i < 8; i++)
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	e023      	b.n	8000d00 <write_row_data+0x5c>
	{
		if (temp_data & (0b00000001 << i)) {HAL_GPIO_WritePin(row_port[i], row_pin[i], GPIO_PIN_SET);}
 8000cb8:	7afa      	ldrb	r2, [r7, #11]
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	fa42 f303 	asr.w	r3, r2, r3
 8000cc0:	f003 0301 	and.w	r3, r3, #1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d00c      	beq.n	8000ce2 <write_row_data+0x3e>
 8000cc8:	4a11      	ldr	r2, [pc, #68]	; (8000d10 <write_row_data+0x6c>)
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000cd0:	4a10      	ldr	r2, [pc, #64]	; (8000d14 <write_row_data+0x70>)
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cd8:	2201      	movs	r2, #1
 8000cda:	4619      	mov	r1, r3
 8000cdc:	f002 fe8e 	bl	80039fc <HAL_GPIO_WritePin>
 8000ce0:	e00b      	b.n	8000cfa <write_row_data+0x56>
		else {HAL_GPIO_WritePin(row_port[i], row_pin[i], GPIO_PIN_RESET);}
 8000ce2:	4a0b      	ldr	r2, [pc, #44]	; (8000d10 <write_row_data+0x6c>)
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000cea:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <write_row_data+0x70>)
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	f002 fe81 	bl	80039fc <HAL_GPIO_WritePin>
	for (int i = 0; i < 8; i++)
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	2b07      	cmp	r3, #7
 8000d04:	ddd8      	ble.n	8000cb8 <write_row_data+0x14>
	}
}
 8000d06:	bf00      	nop
 8000d08:	bf00      	nop
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000028 	.word	0x20000028
 8000d14:	20000058 	.word	0x20000058

08000d18 <elevator_init>:

/*
 *
 */
void elevator_init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim11);  // delay_us() timer 활성화
 8000d1c:	480d      	ldr	r0, [pc, #52]	; (8000d54 <elevator_init+0x3c>)
 8000d1e:	f004 f9b7 	bl	8005090 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_IT(&hadc1); // 조도센서 external interrupt 활성화
 8000d22:	480d      	ldr	r0, [pc, #52]	; (8000d58 <elevator_init+0x40>)
 8000d24:	f001 fb86 	bl	8002434 <HAL_ADC_Start_IT>

	I2C_LCD_Init();
 8000d28:	f7ff fc9c 	bl	8000664 <I2C_LCD_Init>
	Dot_Matrix_Init();
 8000d2c:	f7ff fdae 	bl	800088c <Dot_Matrix_Init>

	curr_status = STOP;
 8000d30:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <elevator_init+0x44>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	701a      	strb	r2, [r3, #0]
	curr_floor = FLOOR_1; // 최초에 엘레베이터는 1층에 있다고 가정
 8000d36:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <elevator_init+0x48>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	701a      	strb	r2, [r3, #0]
	target_floor = FLOOR_1;
 8000d3c:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <elevator_init+0x4c>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	701a      	strb	r2, [r3, #0]

	display_floor_info();
 8000d42:	f000 f865 	bl	8000e10 <display_floor_info>
	display_fnd(curr_floor);
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <elevator_init+0x48>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 f8d8 	bl	8000f00 <display_fnd>
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	200003e0 	.word	0x200003e0
 8000d58:	20000294 	.word	0x20000294
 8000d5c:	20000118 	.word	0x20000118
 8000d60:	20000119 	.word	0x20000119
 8000d64:	2000011a 	.word	0x2000011a

08000d68 <set_curr_status>:
	}
}


void set_curr_status(uint8_t status)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	71fb      	strb	r3, [r7, #7]
	curr_status = status;
 8000d72:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <set_curr_status+0x1c>)
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	7013      	strb	r3, [r2, #0]
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	20000118 	.word	0x20000118

08000d88 <set_curr_floor>:

void set_curr_floor(uint8_t floor)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	71fb      	strb	r3, [r7, #7]
	curr_floor = floor;
 8000d92:	4a04      	ldr	r2, [pc, #16]	; (8000da4 <set_curr_floor+0x1c>)
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	7013      	strb	r3, [r2, #0]
}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	20000119 	.word	0x20000119

08000da8 <set_target_floor>:

void set_target_floor(uint8_t floor)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
	target_floor = floor;
 8000db2:	4a04      	ldr	r2, [pc, #16]	; (8000dc4 <set_target_floor+0x1c>)
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	7013      	strb	r3, [r2, #0]
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	2000011a 	.word	0x2000011a

08000dc8 <get_curr_status>:

uint8_t get_curr_status(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
	return curr_status;
 8000dcc:	4b03      	ldr	r3, [pc, #12]	; (8000ddc <get_curr_status+0x14>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	20000118 	.word	0x20000118

08000de0 <get_curr_floor>:

uint8_t get_curr_floor(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
	return curr_floor;
 8000de4:	4b03      	ldr	r3, [pc, #12]	; (8000df4 <get_curr_floor+0x14>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	20000119 	.word	0x20000119

08000df8 <get_target_floor>:


uint8_t get_target_floor(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
	return target_floor;
 8000dfc:	4b03      	ldr	r3, [pc, #12]	; (8000e0c <get_target_floor+0x14>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	2000011a 	.word	0x2000011a

08000e10 <display_floor_info>:



void display_floor_info(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	; 0x28
 8000e14:	af00      	add	r7, sp, #0
	uint8_t lcd_buff_1[20], lcd_buff_2[20];

	LCD_Command(CLEAR_DISPLAY);
 8000e16:	2001      	movs	r0, #1
 8000e18:	f7ff fbbc 	bl	8000594 <LCD_Command>

	sprintf(lcd_buff_1, "  Current Floor: %d", curr_floor);
 8000e1c:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <display_floor_info+0x58>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	461a      	mov	r2, r3
 8000e22:	f107 0314 	add.w	r3, r7, #20
 8000e26:	4911      	ldr	r1, [pc, #68]	; (8000e6c <display_floor_info+0x5c>)
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f009 fa0f 	bl	800a24c <siprintf>
	Move_Cursor(0, 0);
 8000e2e:	2100      	movs	r1, #0
 8000e30:	2000      	movs	r0, #0
 8000e32:	f7ff fc45 	bl	80006c0 <Move_Cursor>
	LCD_String(lcd_buff_1);
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff fc2b 	bl	8000696 <LCD_String>

	sprintf(lcd_buff_2, " Target Floor: %d", target_floor);
 8000e40:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <display_floor_info+0x60>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	461a      	mov	r2, r3
 8000e46:	463b      	mov	r3, r7
 8000e48:	490a      	ldr	r1, [pc, #40]	; (8000e74 <display_floor_info+0x64>)
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f009 f9fe 	bl	800a24c <siprintf>
	Move_Cursor(1, 0);
 8000e50:	2100      	movs	r1, #0
 8000e52:	2001      	movs	r0, #1
 8000e54:	f7ff fc34 	bl	80006c0 <Move_Cursor>
	LCD_String(lcd_buff_2);
 8000e58:	463b      	mov	r3, r7
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff fc1b 	bl	8000696 <LCD_String>
}
 8000e60:	bf00      	nop
 8000e62:	3728      	adds	r7, #40	; 0x28
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000119 	.word	0x20000119
 8000e6c:	0800a9d8 	.word	0x0800a9d8
 8000e70:	2000011a 	.word	0x2000011a
 8000e74:	0800a9ec 	.word	0x0800a9ec

08000e78 <display_alert_info>:

void display_alert_info(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08a      	sub	sp, #40	; 0x28
 8000e7c:	af00      	add	r7, sp, #0
	uint8_t lcd_buff_1[20], lcd_buff_2[20];

	LCD_Command(CLEAR_DISPLAY);
 8000e7e:	2001      	movs	r0, #1
 8000e80:	f7ff fb88 	bl	8000594 <LCD_Command>

	sprintf(lcd_buff_1, "  Wrong input !!!", curr_floor);
 8000e84:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <display_alert_info+0x58>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	f107 0314 	add.w	r3, r7, #20
 8000e8e:	4911      	ldr	r1, [pc, #68]	; (8000ed4 <display_alert_info+0x5c>)
 8000e90:	4618      	mov	r0, r3
 8000e92:	f009 f9db 	bl	800a24c <siprintf>
	Move_Cursor(0, 0);
 8000e96:	2100      	movs	r1, #0
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f7ff fc11 	bl	80006c0 <Move_Cursor>
	LCD_String(lcd_buff_1);
 8000e9e:	f107 0314 	add.w	r3, r7, #20
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff fbf7 	bl	8000696 <LCD_String>

	sprintf(lcd_buff_2, "back to IDLE..", target_floor);
 8000ea8:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <display_alert_info+0x60>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	461a      	mov	r2, r3
 8000eae:	463b      	mov	r3, r7
 8000eb0:	490a      	ldr	r1, [pc, #40]	; (8000edc <display_alert_info+0x64>)
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f009 f9ca 	bl	800a24c <siprintf>
	Move_Cursor(1, 0);
 8000eb8:	2100      	movs	r1, #0
 8000eba:	2001      	movs	r0, #1
 8000ebc:	f7ff fc00 	bl	80006c0 <Move_Cursor>
	LCD_String(lcd_buff_2);
 8000ec0:	463b      	mov	r3, r7
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff fbe7 	bl	8000696 <LCD_String>
}
 8000ec8:	bf00      	nop
 8000eca:	3728      	adds	r7, #40	; 0x28
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000119 	.word	0x20000119
 8000ed4:	0800aa00 	.word	0x0800aa00
 8000ed8:	2000011a 	.word	0x2000011a
 8000edc:	0800aa14 	.word	0x0800aa14

08000ee0 <clear_fnd>:
	FND_A_Pin|FND_B_Pin|FND_C_Pin|FND_D_Pin|FND_F_Pin|FND_G_Pin    // 9
};


void clear_fnd(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOF, FND_font[8]|FND_DP_Pin, GPIO_PIN_RESET);
 8000ee4:	23bf      	movs	r3, #191	; 0xbf
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	2200      	movs	r2, #0
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4802      	ldr	r0, [pc, #8]	; (8000efc <clear_fnd+0x1c>)
 8000ef4:	f002 fd82 	bl	80039fc <HAL_GPIO_WritePin>
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40021400 	.word	0x40021400

08000f00 <display_fnd>:


void display_fnd(uint8_t curr_floor)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
	clear_fnd();
 8000f0a:	f7ff ffe9 	bl	8000ee0 <clear_fnd>
	HAL_GPIO_WritePin(GPIOF, FND_font[curr_floor], GPIO_PIN_SET);
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	4a06      	ldr	r2, [pc, #24]	; (8000f2c <display_fnd+0x2c>)
 8000f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	2201      	movs	r2, #1
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4804      	ldr	r0, [pc, #16]	; (8000f30 <display_fnd+0x30>)
 8000f1e:	f002 fd6d 	bl	80039fc <HAL_GPIO_WritePin>
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	0800ab08 	.word	0x0800ab08
 8000f30:	40021400 	.word	0x40021400

08000f34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f38:	f001 f9d2 	bl	80022e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f3c:	f000 f86e 	bl	800101c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f40:	f000 fa32 	bl	80013a8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000f44:	f000 f9d8 	bl	80012f8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f48:	f000 fa00 	bl	800134c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM11_Init();
 8000f4c:	f000 f9b0 	bl	80012b0 <MX_TIM11_Init>
  MX_ADC1_Init();
 8000f50:	f000 f8ce 	bl	80010f0 <MX_ADC1_Init>
  MX_ETH_Init();
 8000f54:	f000 f91e 	bl	8001194 <MX_ETH_Init>
  MX_I2C1_Init();
 8000f58:	f000 f96a 	bl	8001230 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f5c:	f005 fd46 	bl	80069ec <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of mutex_lcd */
  mutex_lcdHandle = osMutexNew(&mutex_lcd_attributes);
 8000f60:	481b      	ldr	r0, [pc, #108]	; (8000fd0 <main+0x9c>)
 8000f62:	f005 ff55 	bl	8006e10 <osMutexNew>
 8000f66:	4603      	mov	r3, r0
 8000f68:	4a1a      	ldr	r2, [pc, #104]	; (8000fd4 <main+0xa0>)
 8000f6a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f6c:	4a1a      	ldr	r2, [pc, #104]	; (8000fd8 <main+0xa4>)
 8000f6e:	2100      	movs	r1, #0
 8000f70:	481a      	ldr	r0, [pc, #104]	; (8000fdc <main+0xa8>)
 8000f72:	f005 fd85 	bl	8006a80 <osThreadNew>
 8000f76:	4603      	mov	r3, r0
 8000f78:	4a19      	ldr	r2, [pc, #100]	; (8000fe0 <main+0xac>)
 8000f7a:	6013      	str	r3, [r2, #0]

  /* creation of ctrl_StepMotor */
  ctrl_StepMotorHandle = osThreadNew(ctrl_stepmotor, NULL, &ctrl_StepMotor_attributes);
 8000f7c:	4a19      	ldr	r2, [pc, #100]	; (8000fe4 <main+0xb0>)
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4819      	ldr	r0, [pc, #100]	; (8000fe8 <main+0xb4>)
 8000f82:	f005 fd7d 	bl	8006a80 <osThreadNew>
 8000f86:	4603      	mov	r3, r0
 8000f88:	4a18      	ldr	r2, [pc, #96]	; (8000fec <main+0xb8>)
 8000f8a:	6013      	str	r3, [r2, #0]

  /* creation of ctrl_DotMatrix */
  ctrl_DotMatrixHandle = osThreadNew(ctrl_dotmatrix, NULL, &ctrl_DotMatrix_attributes);
 8000f8c:	4a18      	ldr	r2, [pc, #96]	; (8000ff0 <main+0xbc>)
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4818      	ldr	r0, [pc, #96]	; (8000ff4 <main+0xc0>)
 8000f92:	f005 fd75 	bl	8006a80 <osThreadNew>
 8000f96:	4603      	mov	r3, r0
 8000f98:	4a17      	ldr	r2, [pc, #92]	; (8000ff8 <main+0xc4>)
 8000f9a:	6013      	str	r3, [r2, #0]

  /* creation of polling_BTN */
  polling_BTNHandle = osThreadNew(polling_btn, NULL, &polling_BTN_attributes);
 8000f9c:	4a17      	ldr	r2, [pc, #92]	; (8000ffc <main+0xc8>)
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4817      	ldr	r0, [pc, #92]	; (8001000 <main+0xcc>)
 8000fa2:	f005 fd6d 	bl	8006a80 <osThreadNew>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	4a16      	ldr	r2, [pc, #88]	; (8001004 <main+0xd0>)
 8000faa:	6013      	str	r3, [r2, #0]

  /* creation of polling_BTN_FLO */
  polling_BTN_FLOHandle = osThreadNew(polling_btn_floor, NULL, &polling_BTN_FLO_attributes);
 8000fac:	4a16      	ldr	r2, [pc, #88]	; (8001008 <main+0xd4>)
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4816      	ldr	r0, [pc, #88]	; (800100c <main+0xd8>)
 8000fb2:	f005 fd65 	bl	8006a80 <osThreadNew>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	4a15      	ldr	r2, [pc, #84]	; (8001010 <main+0xdc>)
 8000fba:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* creation of select_floor */
  select_floorHandle = osEventFlagsNew(&select_floor_attributes);
 8000fbc:	4815      	ldr	r0, [pc, #84]	; (8001014 <main+0xe0>)
 8000fbe:	f005 fe0c 	bl	8006bda <osEventFlagsNew>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	4a14      	ldr	r2, [pc, #80]	; (8001018 <main+0xe4>)
 8000fc6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000fc8:	f005 fd34 	bl	8006a34 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <main+0x98>
 8000fce:	bf00      	nop
 8000fd0:	0800abe4 	.word	0x0800abe4
 8000fd4:	2000098c 	.word	0x2000098c
 8000fd8:	0800ab30 	.word	0x0800ab30
 8000fdc:	08001609 	.word	0x08001609
 8000fe0:	20000978 	.word	0x20000978
 8000fe4:	0800ab54 	.word	0x0800ab54
 8000fe8:	0800161d 	.word	0x0800161d
 8000fec:	2000097c 	.word	0x2000097c
 8000ff0:	0800ab78 	.word	0x0800ab78
 8000ff4:	08001639 	.word	0x08001639
 8000ff8:	20000980 	.word	0x20000980
 8000ffc:	0800ab9c 	.word	0x0800ab9c
 8001000:	08001655 	.word	0x08001655
 8001004:	20000984 	.word	0x20000984
 8001008:	0800abc0 	.word	0x0800abc0
 800100c:	080017c5 	.word	0x080017c5
 8001010:	20000988 	.word	0x20000988
 8001014:	0800abf4 	.word	0x0800abf4
 8001018:	20000990 	.word	0x20000990

0800101c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b094      	sub	sp, #80	; 0x50
 8001020:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001022:	f107 0320 	add.w	r3, r7, #32
 8001026:	2230      	movs	r2, #48	; 0x30
 8001028:	2100      	movs	r1, #0
 800102a:	4618      	mov	r0, r3
 800102c:	f008 fff8 	bl	800a020 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001040:	2300      	movs	r3, #0
 8001042:	60bb      	str	r3, [r7, #8]
 8001044:	4b28      	ldr	r3, [pc, #160]	; (80010e8 <SystemClock_Config+0xcc>)
 8001046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001048:	4a27      	ldr	r2, [pc, #156]	; (80010e8 <SystemClock_Config+0xcc>)
 800104a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800104e:	6413      	str	r3, [r2, #64]	; 0x40
 8001050:	4b25      	ldr	r3, [pc, #148]	; (80010e8 <SystemClock_Config+0xcc>)
 8001052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800105c:	2300      	movs	r3, #0
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	4b22      	ldr	r3, [pc, #136]	; (80010ec <SystemClock_Config+0xd0>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a21      	ldr	r2, [pc, #132]	; (80010ec <SystemClock_Config+0xd0>)
 8001066:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800106a:	6013      	str	r3, [r2, #0]
 800106c:	4b1f      	ldr	r3, [pc, #124]	; (80010ec <SystemClock_Config+0xd0>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001078:	2301      	movs	r3, #1
 800107a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800107c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001082:	2302      	movs	r3, #2
 8001084:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001086:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800108a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800108c:	2304      	movs	r3, #4
 800108e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001090:	23a8      	movs	r3, #168	; 0xa8
 8001092:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001094:	2302      	movs	r3, #2
 8001096:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001098:	2307      	movs	r3, #7
 800109a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800109c:	f107 0320 	add.w	r3, r7, #32
 80010a0:	4618      	mov	r0, r3
 80010a2:	f003 fadb 	bl	800465c <HAL_RCC_OscConfig>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010ac:	f000 fbfc 	bl	80018a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b0:	230f      	movs	r3, #15
 80010b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b4:	2302      	movs	r3, #2
 80010b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010c8:	f107 030c 	add.w	r3, r7, #12
 80010cc:	2105      	movs	r1, #5
 80010ce:	4618      	mov	r0, r3
 80010d0:	f003 fd3c 	bl	8004b4c <HAL_RCC_ClockConfig>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80010da:	f000 fbe5 	bl	80018a8 <Error_Handler>
  }
}
 80010de:	bf00      	nop
 80010e0:	3750      	adds	r7, #80	; 0x50
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40007000 	.word	0x40007000

080010f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010f6:	463b      	mov	r3, r7
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001102:	4b21      	ldr	r3, [pc, #132]	; (8001188 <MX_ADC1_Init+0x98>)
 8001104:	4a21      	ldr	r2, [pc, #132]	; (800118c <MX_ADC1_Init+0x9c>)
 8001106:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001108:	4b1f      	ldr	r3, [pc, #124]	; (8001188 <MX_ADC1_Init+0x98>)
 800110a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800110e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001110:	4b1d      	ldr	r3, [pc, #116]	; (8001188 <MX_ADC1_Init+0x98>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001116:	4b1c      	ldr	r3, [pc, #112]	; (8001188 <MX_ADC1_Init+0x98>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800111c:	4b1a      	ldr	r3, [pc, #104]	; (8001188 <MX_ADC1_Init+0x98>)
 800111e:	2201      	movs	r2, #1
 8001120:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001122:	4b19      	ldr	r3, [pc, #100]	; (8001188 <MX_ADC1_Init+0x98>)
 8001124:	2200      	movs	r2, #0
 8001126:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800112a:	4b17      	ldr	r3, [pc, #92]	; (8001188 <MX_ADC1_Init+0x98>)
 800112c:	2200      	movs	r2, #0
 800112e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001130:	4b15      	ldr	r3, [pc, #84]	; (8001188 <MX_ADC1_Init+0x98>)
 8001132:	4a17      	ldr	r2, [pc, #92]	; (8001190 <MX_ADC1_Init+0xa0>)
 8001134:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001136:	4b14      	ldr	r3, [pc, #80]	; (8001188 <MX_ADC1_Init+0x98>)
 8001138:	2200      	movs	r2, #0
 800113a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800113c:	4b12      	ldr	r3, [pc, #72]	; (8001188 <MX_ADC1_Init+0x98>)
 800113e:	2201      	movs	r2, #1
 8001140:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001142:	4b11      	ldr	r3, [pc, #68]	; (8001188 <MX_ADC1_Init+0x98>)
 8001144:	2200      	movs	r2, #0
 8001146:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800114a:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <MX_ADC1_Init+0x98>)
 800114c:	2201      	movs	r2, #1
 800114e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001150:	480d      	ldr	r0, [pc, #52]	; (8001188 <MX_ADC1_Init+0x98>)
 8001152:	f001 f92b 	bl	80023ac <HAL_ADC_Init>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800115c:	f000 fba4 	bl	80018a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001160:	2304      	movs	r3, #4
 8001162:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001164:	2301      	movs	r3, #1
 8001166:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001168:	2307      	movs	r3, #7
 800116a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800116c:	463b      	mov	r3, r7
 800116e:	4619      	mov	r1, r3
 8001170:	4805      	ldr	r0, [pc, #20]	; (8001188 <MX_ADC1_Init+0x98>)
 8001172:	f001 fbab 	bl	80028cc <HAL_ADC_ConfigChannel>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800117c:	f000 fb94 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001180:	bf00      	nop
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20000294 	.word	0x20000294
 800118c:	40012000 	.word	0x40012000
 8001190:	0f000001 	.word	0x0f000001

08001194 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001198:	4b1f      	ldr	r3, [pc, #124]	; (8001218 <MX_ETH_Init+0x84>)
 800119a:	4a20      	ldr	r2, [pc, #128]	; (800121c <MX_ETH_Init+0x88>)
 800119c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800119e:	4b20      	ldr	r3, [pc, #128]	; (8001220 <MX_ETH_Init+0x8c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80011a4:	4b1e      	ldr	r3, [pc, #120]	; (8001220 <MX_ETH_Init+0x8c>)
 80011a6:	2280      	movs	r2, #128	; 0x80
 80011a8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80011aa:	4b1d      	ldr	r3, [pc, #116]	; (8001220 <MX_ETH_Init+0x8c>)
 80011ac:	22e1      	movs	r2, #225	; 0xe1
 80011ae:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80011b0:	4b1b      	ldr	r3, [pc, #108]	; (8001220 <MX_ETH_Init+0x8c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80011b6:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <MX_ETH_Init+0x8c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80011bc:	4b18      	ldr	r3, [pc, #96]	; (8001220 <MX_ETH_Init+0x8c>)
 80011be:	2200      	movs	r2, #0
 80011c0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80011c2:	4b15      	ldr	r3, [pc, #84]	; (8001218 <MX_ETH_Init+0x84>)
 80011c4:	4a16      	ldr	r2, [pc, #88]	; (8001220 <MX_ETH_Init+0x8c>)
 80011c6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80011c8:	4b13      	ldr	r3, [pc, #76]	; (8001218 <MX_ETH_Init+0x84>)
 80011ca:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80011ce:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80011d0:	4b11      	ldr	r3, [pc, #68]	; (8001218 <MX_ETH_Init+0x84>)
 80011d2:	4a14      	ldr	r2, [pc, #80]	; (8001224 <MX_ETH_Init+0x90>)
 80011d4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <MX_ETH_Init+0x84>)
 80011d8:	4a13      	ldr	r2, [pc, #76]	; (8001228 <MX_ETH_Init+0x94>)
 80011da:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80011dc:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <MX_ETH_Init+0x84>)
 80011de:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80011e2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80011e4:	480c      	ldr	r0, [pc, #48]	; (8001218 <MX_ETH_Init+0x84>)
 80011e6:	f001 ff1d 	bl	8003024 <HAL_ETH_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80011f0:	f000 fb5a 	bl	80018a8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80011f4:	2238      	movs	r2, #56	; 0x38
 80011f6:	2100      	movs	r1, #0
 80011f8:	480c      	ldr	r0, [pc, #48]	; (800122c <MX_ETH_Init+0x98>)
 80011fa:	f008 ff11 	bl	800a020 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80011fe:	4b0b      	ldr	r3, [pc, #44]	; (800122c <MX_ETH_Init+0x98>)
 8001200:	2221      	movs	r2, #33	; 0x21
 8001202:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001204:	4b09      	ldr	r3, [pc, #36]	; (800122c <MX_ETH_Init+0x98>)
 8001206:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800120a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800120c:	4b07      	ldr	r3, [pc, #28]	; (800122c <MX_ETH_Init+0x98>)
 800120e:	2200      	movs	r2, #0
 8001210:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	200002dc 	.word	0x200002dc
 800121c:	40028000 	.word	0x40028000
 8001220:	2000099c 	.word	0x2000099c
 8001224:	200001f4 	.word	0x200001f4
 8001228:	20000154 	.word	0x20000154
 800122c:	2000011c 	.word	0x2000011c

08001230 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001234:	4b1b      	ldr	r3, [pc, #108]	; (80012a4 <MX_I2C1_Init+0x74>)
 8001236:	4a1c      	ldr	r2, [pc, #112]	; (80012a8 <MX_I2C1_Init+0x78>)
 8001238:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800123a:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <MX_I2C1_Init+0x74>)
 800123c:	4a1b      	ldr	r2, [pc, #108]	; (80012ac <MX_I2C1_Init+0x7c>)
 800123e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001240:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <MX_I2C1_Init+0x74>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001246:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <MX_I2C1_Init+0x74>)
 8001248:	2200      	movs	r2, #0
 800124a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800124c:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <MX_I2C1_Init+0x74>)
 800124e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001252:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001254:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <MX_I2C1_Init+0x74>)
 8001256:	2200      	movs	r2, #0
 8001258:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800125a:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <MX_I2C1_Init+0x74>)
 800125c:	2200      	movs	r2, #0
 800125e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001260:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <MX_I2C1_Init+0x74>)
 8001262:	2200      	movs	r2, #0
 8001264:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001266:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <MX_I2C1_Init+0x74>)
 8001268:	2200      	movs	r2, #0
 800126a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800126c:	480d      	ldr	r0, [pc, #52]	; (80012a4 <MX_I2C1_Init+0x74>)
 800126e:	f002 fc11 	bl	8003a94 <HAL_I2C_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001278:	f000 fb16 	bl	80018a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800127c:	2100      	movs	r1, #0
 800127e:	4809      	ldr	r0, [pc, #36]	; (80012a4 <MX_I2C1_Init+0x74>)
 8001280:	f003 f853 	bl	800432a <HAL_I2CEx_ConfigAnalogFilter>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800128a:	f000 fb0d 	bl	80018a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800128e:	2100      	movs	r1, #0
 8001290:	4804      	ldr	r0, [pc, #16]	; (80012a4 <MX_I2C1_Init+0x74>)
 8001292:	f003 f886 	bl	80043a2 <HAL_I2CEx_ConfigDigitalFilter>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800129c:	f000 fb04 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	2000038c 	.word	0x2000038c
 80012a8:	40005400 	.word	0x40005400
 80012ac:	000186a0 	.word	0x000186a0

080012b0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80012b4:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <MX_TIM11_Init+0x40>)
 80012b6:	4a0f      	ldr	r2, [pc, #60]	; (80012f4 <MX_TIM11_Init+0x44>)
 80012b8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 168-1;
 80012ba:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <MX_TIM11_Init+0x40>)
 80012bc:	22a7      	movs	r2, #167	; 0xa7
 80012be:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c0:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <MX_TIM11_Init+0x40>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80012c6:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <MX_TIM11_Init+0x40>)
 80012c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012cc:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ce:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <MX_TIM11_Init+0x40>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <MX_TIM11_Init+0x40>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80012da:	4805      	ldr	r0, [pc, #20]	; (80012f0 <MX_TIM11_Init+0x40>)
 80012dc:	f003 fe88 	bl	8004ff0 <HAL_TIM_Base_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80012e6:	f000 fadf 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200003e0 	.word	0x200003e0
 80012f4:	40014800 	.word	0x40014800

080012f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012fc:	4b11      	ldr	r3, [pc, #68]	; (8001344 <MX_USART3_UART_Init+0x4c>)
 80012fe:	4a12      	ldr	r2, [pc, #72]	; (8001348 <MX_USART3_UART_Init+0x50>)
 8001300:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001302:	4b10      	ldr	r3, [pc, #64]	; (8001344 <MX_USART3_UART_Init+0x4c>)
 8001304:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001308:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800130a:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <MX_USART3_UART_Init+0x4c>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001310:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <MX_USART3_UART_Init+0x4c>)
 8001312:	2200      	movs	r2, #0
 8001314:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001316:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <MX_USART3_UART_Init+0x4c>)
 8001318:	2200      	movs	r2, #0
 800131a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800131c:	4b09      	ldr	r3, [pc, #36]	; (8001344 <MX_USART3_UART_Init+0x4c>)
 800131e:	220c      	movs	r2, #12
 8001320:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001322:	4b08      	ldr	r3, [pc, #32]	; (8001344 <MX_USART3_UART_Init+0x4c>)
 8001324:	2200      	movs	r2, #0
 8001326:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <MX_USART3_UART_Init+0x4c>)
 800132a:	2200      	movs	r2, #0
 800132c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800132e:	4805      	ldr	r0, [pc, #20]	; (8001344 <MX_USART3_UART_Init+0x4c>)
 8001330:	f004 f902 	bl	8005538 <HAL_UART_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800133a:	f000 fab5 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000428 	.word	0x20000428
 8001348:	40004800 	.word	0x40004800

0800134c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001350:	4b14      	ldr	r3, [pc, #80]	; (80013a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001352:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001356:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001358:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800135a:	2204      	movs	r2, #4
 800135c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800135e:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001360:	2202      	movs	r2, #2
 8001362:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001364:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001366:	2200      	movs	r2, #0
 8001368:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800136a:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800136c:	2202      	movs	r2, #2
 800136e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001370:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001372:	2201      	movs	r2, #1
 8001374:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001376:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001378:	2200      	movs	r2, #0
 800137a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800137c:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800137e:	2200      	movs	r2, #0
 8001380:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001382:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001384:	2201      	movs	r2, #1
 8001386:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800138a:	2200      	movs	r2, #0
 800138c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800138e:	4805      	ldr	r0, [pc, #20]	; (80013a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001390:	f003 f846 	bl	8004420 <HAL_PCD_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800139a:	f000 fa85 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	2000046c 	.word	0x2000046c

080013a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08e      	sub	sp, #56	; 0x38
 80013ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
 80013bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	623b      	str	r3, [r7, #32]
 80013c2:	4b8a      	ldr	r3, [pc, #552]	; (80015ec <MX_GPIO_Init+0x244>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	4a89      	ldr	r2, [pc, #548]	; (80015ec <MX_GPIO_Init+0x244>)
 80013c8:	f043 0310 	orr.w	r3, r3, #16
 80013cc:	6313      	str	r3, [r2, #48]	; 0x30
 80013ce:	4b87      	ldr	r3, [pc, #540]	; (80015ec <MX_GPIO_Init+0x244>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f003 0310 	and.w	r3, r3, #16
 80013d6:	623b      	str	r3, [r7, #32]
 80013d8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	61fb      	str	r3, [r7, #28]
 80013de:	4b83      	ldr	r3, [pc, #524]	; (80015ec <MX_GPIO_Init+0x244>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a82      	ldr	r2, [pc, #520]	; (80015ec <MX_GPIO_Init+0x244>)
 80013e4:	f043 0304 	orr.w	r3, r3, #4
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b80      	ldr	r3, [pc, #512]	; (80015ec <MX_GPIO_Init+0x244>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f003 0304 	and.w	r3, r3, #4
 80013f2:	61fb      	str	r3, [r7, #28]
 80013f4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	61bb      	str	r3, [r7, #24]
 80013fa:	4b7c      	ldr	r3, [pc, #496]	; (80015ec <MX_GPIO_Init+0x244>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4a7b      	ldr	r2, [pc, #492]	; (80015ec <MX_GPIO_Init+0x244>)
 8001400:	f043 0320 	orr.w	r3, r3, #32
 8001404:	6313      	str	r3, [r2, #48]	; 0x30
 8001406:	4b79      	ldr	r3, [pc, #484]	; (80015ec <MX_GPIO_Init+0x244>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f003 0320 	and.w	r3, r3, #32
 800140e:	61bb      	str	r3, [r7, #24]
 8001410:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
 8001416:	4b75      	ldr	r3, [pc, #468]	; (80015ec <MX_GPIO_Init+0x244>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	4a74      	ldr	r2, [pc, #464]	; (80015ec <MX_GPIO_Init+0x244>)
 800141c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001420:	6313      	str	r3, [r2, #48]	; 0x30
 8001422:	4b72      	ldr	r3, [pc, #456]	; (80015ec <MX_GPIO_Init+0x244>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	613b      	str	r3, [r7, #16]
 8001432:	4b6e      	ldr	r3, [pc, #440]	; (80015ec <MX_GPIO_Init+0x244>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a6d      	ldr	r2, [pc, #436]	; (80015ec <MX_GPIO_Init+0x244>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b6b      	ldr	r3, [pc, #428]	; (80015ec <MX_GPIO_Init+0x244>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	613b      	str	r3, [r7, #16]
 8001448:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	4b67      	ldr	r3, [pc, #412]	; (80015ec <MX_GPIO_Init+0x244>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a66      	ldr	r2, [pc, #408]	; (80015ec <MX_GPIO_Init+0x244>)
 8001454:	f043 0302 	orr.w	r3, r3, #2
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b64      	ldr	r3, [pc, #400]	; (80015ec <MX_GPIO_Init+0x244>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	4b60      	ldr	r3, [pc, #384]	; (80015ec <MX_GPIO_Init+0x244>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a5f      	ldr	r2, [pc, #380]	; (80015ec <MX_GPIO_Init+0x244>)
 8001470:	f043 0308 	orr.w	r3, r3, #8
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b5d      	ldr	r3, [pc, #372]	; (80015ec <MX_GPIO_Init+0x244>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0308 	and.w	r3, r3, #8
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	4b59      	ldr	r3, [pc, #356]	; (80015ec <MX_GPIO_Init+0x244>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a58      	ldr	r2, [pc, #352]	; (80015ec <MX_GPIO_Init+0x244>)
 800148c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b56      	ldr	r3, [pc, #344]	; (80015ec <MX_GPIO_Init+0x244>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin
 800149e:	2200      	movs	r2, #0
 80014a0:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 80014a4:	4852      	ldr	r0, [pc, #328]	; (80015f0 <MX_GPIO_Init+0x248>)
 80014a6:	f002 faa9 	bl	80039fc <HAL_GPIO_WritePin>
                          |COL5_Pin|COL6_Pin|COL7_Pin|COL8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, FND_A_Pin|FND_B_Pin|FND_C_Pin|FND_D_Pin
 80014aa:	2200      	movs	r2, #0
 80014ac:	f240 11bf 	movw	r1, #447	; 0x1bf
 80014b0:	4850      	ldr	r0, [pc, #320]	; (80015f4 <MX_GPIO_Init+0x24c>)
 80014b2:	f002 faa3 	bl	80039fc <HAL_GPIO_WritePin>
                          |FND_E_Pin|FND_F_Pin|FND_G_Pin|FND_DP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80014b6:	2200      	movs	r2, #0
 80014b8:	f244 0181 	movw	r1, #16513	; 0x4081
 80014bc:	484e      	ldr	r0, [pc, #312]	; (80015f8 <MX_GPIO_Init+0x250>)
 80014be:	f002 fa9d 	bl	80039fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, StepMotor_IN1_Pin|StepMotor_IN2_Pin|StepMotor_IN3_Pin|StepMotor_IN4_Pin
 80014c2:	2200      	movs	r2, #0
 80014c4:	f647 01ff 	movw	r1, #30975	; 0x78ff
 80014c8:	484c      	ldr	r0, [pc, #304]	; (80015fc <MX_GPIO_Init+0x254>)
 80014ca:	f002 fa97 	bl	80039fc <HAL_GPIO_WritePin>
                          |ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin
                          |ROW5_Pin|ROW6_Pin|ROW7_Pin|ROW8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2140      	movs	r1, #64	; 0x40
 80014d2:	484b      	ldr	r0, [pc, #300]	; (8001600 <MX_GPIO_Init+0x258>)
 80014d4:	f002 fa92 	bl	80039fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : COL1_Pin COL2_Pin COL3_Pin COL4_Pin
                           COL5_Pin COL6_Pin COL7_Pin COL8_Pin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin
 80014d8:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
                          |COL5_Pin|COL6_Pin|COL7_Pin|COL8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014de:	2301      	movs	r3, #1
 80014e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e6:	2300      	movs	r3, #0
 80014e8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ee:	4619      	mov	r1, r3
 80014f0:	483f      	ldr	r0, [pc, #252]	; (80015f0 <MX_GPIO_Init+0x248>)
 80014f2:	f002 f8bf 	bl	8003674 <HAL_GPIO_Init>

  /*Configure GPIO pins : FND_A_Pin FND_B_Pin FND_C_Pin FND_D_Pin
                           FND_E_Pin FND_F_Pin FND_G_Pin FND_DP_Pin */
  GPIO_InitStruct.Pin = FND_A_Pin|FND_B_Pin|FND_C_Pin|FND_D_Pin
 80014f6:	f240 13bf 	movw	r3, #447	; 0x1bf
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24
                          |FND_E_Pin|FND_F_Pin|FND_G_Pin|FND_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fc:	2301      	movs	r3, #1
 80014fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001504:	2300      	movs	r3, #0
 8001506:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001508:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800150c:	4619      	mov	r1, r3
 800150e:	4839      	ldr	r0, [pc, #228]	; (80015f4 <MX_GPIO_Init+0x24c>)
 8001510:	f002 f8b0 	bl	8003674 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001514:	f244 0381 	movw	r3, #16513	; 0x4081
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151a:	2301      	movs	r3, #1
 800151c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001522:	2300      	movs	r3, #0
 8001524:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001526:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800152a:	4619      	mov	r1, r3
 800152c:	4832      	ldr	r0, [pc, #200]	; (80015f8 <MX_GPIO_Init+0x250>)
 800152e:	f002 f8a1 	bl	8003674 <HAL_GPIO_Init>

  /*Configure GPIO pins : PhotoSensor_EXIT12_Pin PhotoSensor_EXIT13_Pin PhotoSensor_EXIT14_Pin PhotoSensor_EXIT15_Pin */
  GPIO_InitStruct.Pin = PhotoSensor_EXIT12_Pin|PhotoSensor_EXIT13_Pin|PhotoSensor_EXIT14_Pin|PhotoSensor_EXIT15_Pin;
 8001532:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001538:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800153c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001546:	4619      	mov	r1, r3
 8001548:	482a      	ldr	r0, [pc, #168]	; (80015f4 <MX_GPIO_Init+0x24c>)
 800154a:	f002 f893 	bl	8003674 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN2_Pin BTN1_Pin BTN0_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin|BTN1_Pin|BTN0_Pin;
 800154e:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001554:	2300      	movs	r3, #0
 8001556:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800155c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001560:	4619      	mov	r1, r3
 8001562:	4823      	ldr	r0, [pc, #140]	; (80015f0 <MX_GPIO_Init+0x248>)
 8001564:	f002 f886 	bl	8003674 <HAL_GPIO_Init>

  /*Configure GPIO pins : StepMotor_IN1_Pin StepMotor_IN2_Pin StepMotor_IN3_Pin StepMotor_IN4_Pin
                           ROW1_Pin ROW2_Pin ROW3_Pin ROW4_Pin
                           ROW5_Pin ROW6_Pin ROW7_Pin ROW8_Pin */
  GPIO_InitStruct.Pin = StepMotor_IN1_Pin|StepMotor_IN2_Pin|StepMotor_IN3_Pin|StepMotor_IN4_Pin
 8001568:	f647 03ff 	movw	r3, #30975	; 0x78ff
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
                          |ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin
                          |ROW5_Pin|ROW6_Pin|ROW7_Pin|ROW8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156e:	2301      	movs	r3, #1
 8001570:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001576:	2300      	movs	r3, #0
 8001578:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800157a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157e:	4619      	mov	r1, r3
 8001580:	481e      	ldr	r0, [pc, #120]	; (80015fc <MX_GPIO_Init+0x254>)
 8001582:	f002 f877 	bl	8003674 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001586:	2340      	movs	r3, #64	; 0x40
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158a:	2301      	movs	r3, #1
 800158c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001592:	2300      	movs	r3, #0
 8001594:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001596:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159a:	4619      	mov	r1, r3
 800159c:	4818      	ldr	r0, [pc, #96]	; (8001600 <MX_GPIO_Init+0x258>)
 800159e:	f002 f869 	bl	8003674 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80015a2:	2380      	movs	r3, #128	; 0x80
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015a6:	2300      	movs	r3, #0
 80015a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80015ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b2:	4619      	mov	r1, r3
 80015b4:	4812      	ldr	r0, [pc, #72]	; (8001600 <MX_GPIO_Init+0x258>)
 80015b6:	f002 f85d 	bl	8003674 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN3_Pin BTN4_Pin BTN5_Pin BTN6_Pin */
  GPIO_InitStruct.Pin = BTN3_Pin|BTN4_Pin|BTN5_Pin|BTN6_Pin;
 80015ba:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80015be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015c0:	2300      	movs	r3, #0
 80015c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015cc:	4619      	mov	r1, r3
 80015ce:	480d      	ldr	r0, [pc, #52]	; (8001604 <MX_GPIO_Init+0x25c>)
 80015d0:	f002 f850 	bl	8003674 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80015d4:	2200      	movs	r2, #0
 80015d6:	2105      	movs	r1, #5
 80015d8:	2028      	movs	r0, #40	; 0x28
 80015da:	f001 fc67 	bl	8002eac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015de:	2028      	movs	r0, #40	; 0x28
 80015e0:	f001 fc80 	bl	8002ee4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015e4:	bf00      	nop
 80015e6:	3738      	adds	r7, #56	; 0x38
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40021400 	.word	0x40021400
 80015f8:	40020400 	.word	0x40020400
 80015fc:	40020c00 	.word	0x40020c00
 8001600:	40021800 	.word	0x40021800
 8001604:	40020800 	.word	0x40020800

08001608 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	elevator_init();
 8001610:	f7ff fb82 	bl	8000d18 <elevator_init>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001614:	2001      	movs	r0, #1
 8001616:	f005 fac5 	bl	8006ba4 <osDelay>
 800161a:	e7fb      	b.n	8001614 <StartDefaultTask+0xc>

0800161c <ctrl_stepmotor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ctrl_stepmotor */
void ctrl_stepmotor(void *argument)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ctrl_stepmotor */
	/* Infinite loop */
	for(;;)
	{
		control_stepmotor(get_curr_status());
 8001624:	f7ff fbd0 	bl	8000dc8 <get_curr_status>
 8001628:	4603      	mov	r3, r0
 800162a:	4618      	mov	r0, r3
 800162c:	f000 f942 	bl	80018b4 <control_stepmotor>
		osDelay(1);
 8001630:	2001      	movs	r0, #1
 8001632:	f005 fab7 	bl	8006ba4 <osDelay>
		control_stepmotor(get_curr_status());
 8001636:	e7f5      	b.n	8001624 <ctrl_stepmotor+0x8>

08001638 <ctrl_dotmatrix>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ctrl_dotmatrix */
void ctrl_dotmatrix(void *argument)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ctrl_dotmatrix */
	/* Infinite loop */
	for(;;)
	{
		control_dotmatrix(get_curr_status());
 8001640:	f7ff fbc2 	bl	8000dc8 <get_curr_status>
 8001644:	4603      	mov	r3, r0
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff f9f2 	bl	8000a30 <control_dotmatrix>
		osDelay(1);
 800164c:	2001      	movs	r0, #1
 800164e:	f005 faa9 	bl	8006ba4 <osDelay>
		control_dotmatrix(get_curr_status());
 8001652:	e7f5      	b.n	8001640 <ctrl_dotmatrix+0x8>

08001654 <polling_btn>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_polling_btn */
void polling_btn(void *argument)
{
 8001654:	b590      	push	{r4, r7, lr}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN polling_btn */
	/* Infinite loop */
	for(;;)
	{
		if (Get_Button(BTN0_GPIO_Port, BTN0_Pin, 0) == BUTTON_PRESS) // 취소버튼
 800165c:	2200      	movs	r2, #0
 800165e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001662:	4855      	ldr	r0, [pc, #340]	; (80017b8 <polling_btn+0x164>)
 8001664:	f7ff f844 	bl	80006f0 <Get_Button>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d103      	bne.n	8001676 <polling_btn+0x22>
		{
			set_curr_status(STOP);
 800166e:	2000      	movs	r0, #0
 8001670:	f7ff fb7a 	bl	8000d68 <set_curr_status>
 8001674:	e09c      	b.n	80017b0 <polling_btn+0x15c>
		}
		else if (Get_Button(BTN1_GPIO_Port, BTN1_Pin, 1) == BUTTON_PRESS) // ?��?�� �???겠다?�� ?��?��?��?��
 8001676:	2201      	movs	r2, #1
 8001678:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800167c:	484e      	ldr	r0, [pc, #312]	; (80017b8 <polling_btn+0x164>)
 800167e:	f7ff f837 	bl	80006f0 <Get_Button>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d144      	bne.n	8001712 <polling_btn+0xbe>
		{
	        HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 8001688:	2180      	movs	r1, #128	; 0x80
 800168a:	484c      	ldr	r0, [pc, #304]	; (80017bc <polling_btn+0x168>)
 800168c:	f002 f9cf 	bl	8003a2e <HAL_GPIO_TogglePin>
	        uint32_t flags = osEventFlagsWait(select_floorHandle, SELECT_FLOOR_FLAG, osFlagsWaitAny, osWaitForever);
 8001690:	4b4b      	ldr	r3, [pc, #300]	; (80017c0 <polling_btn+0x16c>)
 8001692:	6818      	ldr	r0, [r3, #0]
 8001694:	f04f 33ff 	mov.w	r3, #4294967295
 8001698:	2200      	movs	r2, #0
 800169a:	2101      	movs	r1, #1
 800169c:	f005 fb52 	bl	8006d44 <osEventFlagsWait>
 80016a0:	60b8      	str	r0, [r7, #8]
	        HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 80016a2:	2180      	movs	r1, #128	; 0x80
 80016a4:	4845      	ldr	r0, [pc, #276]	; (80017bc <polling_btn+0x168>)
 80016a6:	f002 f9c2 	bl	8003a2e <HAL_GPIO_TogglePin>

	        if (flags & SELECT_FLOOR_FLAG) {
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d07d      	beq.n	80017b0 <polling_btn+0x15c>
				if (get_curr_floor() <= get_target_floor())
 80016b4:	f7ff fb94 	bl	8000de0 <get_curr_floor>
 80016b8:	4603      	mov	r3, r0
 80016ba:	461c      	mov	r4, r3
 80016bc:	f7ff fb9c 	bl	8000df8 <get_target_floor>
 80016c0:	4603      	mov	r3, r0
 80016c2:	429c      	cmp	r4, r3
 80016c4:	d80e      	bhi.n	80016e4 <polling_btn+0x90>
				{
					set_target_floor(get_curr_floor());
 80016c6:	f7ff fb8b 	bl	8000de0 <get_curr_floor>
 80016ca:	4603      	mov	r3, r0
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff fb6b 	bl	8000da8 <set_target_floor>
					display_alert_info();
 80016d2:	f7ff fbd1 	bl	8000e78 <display_alert_info>
					HAL_Delay(2000);
 80016d6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80016da:	f000 fe43 	bl	8002364 <HAL_Delay>
					display_floor_info();
 80016de:	f7ff fb97 	bl	8000e10 <display_floor_info>
 80016e2:	e00f      	b.n	8001704 <polling_btn+0xb0>
				}
				else
				{
					set_curr_status(START_BOTTOM_UP);
 80016e4:	2001      	movs	r0, #1
 80016e6:	f7ff fb3f 	bl	8000d68 <set_curr_status>
					set_dotmatrix_buffer(get_curr_status(), get_curr_floor() - 1);
 80016ea:	f7ff fb6d 	bl	8000dc8 <get_curr_status>
 80016ee:	4603      	mov	r3, r0
 80016f0:	461c      	mov	r4, r3
 80016f2:	f7ff fb75 	bl	8000de0 <get_curr_floor>
 80016f6:	4603      	mov	r3, r0
 80016f8:	3b01      	subs	r3, #1
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	4619      	mov	r1, r3
 80016fe:	4620      	mov	r0, r4
 8001700:	f7ff f90e 	bl	8000920 <set_dotmatrix_buffer>
				}

				osEventFlagsClear(select_floorHandle, SELECT_FLOOR_FLAG);
 8001704:	4b2e      	ldr	r3, [pc, #184]	; (80017c0 <polling_btn+0x16c>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2101      	movs	r1, #1
 800170a:	4618      	mov	r0, r3
 800170c:	f005 fae8 	bl	8006ce0 <osEventFlagsClear>
 8001710:	e04e      	b.n	80017b0 <polling_btn+0x15c>
	        }

		}
		else if (Get_Button(BTN2_GPIO_Port, BTN2_Pin, 2) == BUTTON_PRESS) // ?��?�� �???겠다?�� ?��?��?��?��
 8001712:	2202      	movs	r2, #2
 8001714:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001718:	4827      	ldr	r0, [pc, #156]	; (80017b8 <polling_btn+0x164>)
 800171a:	f7fe ffe9 	bl	80006f0 <Get_Button>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d145      	bne.n	80017b0 <polling_btn+0x15c>
		{
	        HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8001724:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001728:	4824      	ldr	r0, [pc, #144]	; (80017bc <polling_btn+0x168>)
 800172a:	f002 f980 	bl	8003a2e <HAL_GPIO_TogglePin>
			uint32_t flags = osEventFlagsWait(select_floorHandle, SELECT_FLOOR_FLAG, osFlagsWaitAny, osWaitForever);
 800172e:	4b24      	ldr	r3, [pc, #144]	; (80017c0 <polling_btn+0x16c>)
 8001730:	6818      	ldr	r0, [r3, #0]
 8001732:	f04f 33ff 	mov.w	r3, #4294967295
 8001736:	2200      	movs	r2, #0
 8001738:	2101      	movs	r1, #1
 800173a:	f005 fb03 	bl	8006d44 <osEventFlagsWait>
 800173e:	60f8      	str	r0, [r7, #12]
			HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8001740:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001744:	481d      	ldr	r0, [pc, #116]	; (80017bc <polling_btn+0x168>)
 8001746:	f002 f972 	bl	8003a2e <HAL_GPIO_TogglePin>

	        if (flags & SELECT_FLOOR_FLAG) {
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	2b00      	cmp	r3, #0
 8001752:	d02d      	beq.n	80017b0 <polling_btn+0x15c>

	        	if (get_curr_floor() >= get_target_floor())
 8001754:	f7ff fb44 	bl	8000de0 <get_curr_floor>
 8001758:	4603      	mov	r3, r0
 800175a:	461c      	mov	r4, r3
 800175c:	f7ff fb4c 	bl	8000df8 <get_target_floor>
 8001760:	4603      	mov	r3, r0
 8001762:	429c      	cmp	r4, r3
 8001764:	d30e      	bcc.n	8001784 <polling_btn+0x130>
	        	{
	        		set_target_floor(get_curr_floor());
 8001766:	f7ff fb3b 	bl	8000de0 <get_curr_floor>
 800176a:	4603      	mov	r3, r0
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff fb1b 	bl	8000da8 <set_target_floor>
	        		display_alert_info();
 8001772:	f7ff fb81 	bl	8000e78 <display_alert_info>
	        		HAL_Delay(2000);
 8001776:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800177a:	f000 fdf3 	bl	8002364 <HAL_Delay>
	        		display_floor_info();
 800177e:	f7ff fb47 	bl	8000e10 <display_floor_info>
 8001782:	e00f      	b.n	80017a4 <polling_btn+0x150>
	        	}
	        	else
	        	{
					set_curr_status(START_TOP_DOWN);
 8001784:	2002      	movs	r0, #2
 8001786:	f7ff faef 	bl	8000d68 <set_curr_status>
					set_dotmatrix_buffer(get_curr_status(), get_curr_floor() + 1);
 800178a:	f7ff fb1d 	bl	8000dc8 <get_curr_status>
 800178e:	4603      	mov	r3, r0
 8001790:	461c      	mov	r4, r3
 8001792:	f7ff fb25 	bl	8000de0 <get_curr_floor>
 8001796:	4603      	mov	r3, r0
 8001798:	3301      	adds	r3, #1
 800179a:	b2db      	uxtb	r3, r3
 800179c:	4619      	mov	r1, r3
 800179e:	4620      	mov	r0, r4
 80017a0:	f7ff f8be 	bl	8000920 <set_dotmatrix_buffer>
	        	}

	        	osEventFlagsClear(select_floorHandle, SELECT_FLOOR_FLAG);
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <polling_btn+0x16c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2101      	movs	r1, #1
 80017aa:	4618      	mov	r0, r3
 80017ac:	f005 fa98 	bl	8006ce0 <osEventFlagsClear>
	        }

		}

		osDelay(1);
 80017b0:	2001      	movs	r0, #1
 80017b2:	f005 f9f7 	bl	8006ba4 <osDelay>
		if (Get_Button(BTN0_GPIO_Port, BTN0_Pin, 0) == BUTTON_PRESS) // 취소버튼
 80017b6:	e751      	b.n	800165c <polling_btn+0x8>
 80017b8:	40021000 	.word	0x40021000
 80017bc:	40020400 	.word	0x40020400
 80017c0:	20000990 	.word	0x20000990

080017c4 <polling_btn_floor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_polling_btn_floor */
void polling_btn_floor(void *argument)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN polling_btn_floor */
  /* Infinite loop */
	for(;;)
	{
		if (Get_Button(BTN3_GPIO_Port, BTN3_Pin, 3) == BUTTON_PRESS) // ?��?��버튼
 80017cc:	2203      	movs	r2, #3
 80017ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017d2:	482a      	ldr	r0, [pc, #168]	; (800187c <polling_btn_floor+0xb8>)
 80017d4:	f7fe ff8c 	bl	80006f0 <Get_Button>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d10b      	bne.n	80017f6 <polling_btn_floor+0x32>
		{
			set_target_floor(FLOOR_1);
 80017de:	2001      	movs	r0, #1
 80017e0:	f7ff fae2 	bl	8000da8 <set_target_floor>
			display_floor_info();
 80017e4:	f7ff fb14 	bl	8000e10 <display_floor_info>
			osEventFlagsSet(select_floorHandle, SELECT_FLOOR_FLAG);
 80017e8:	4b25      	ldr	r3, [pc, #148]	; (8001880 <polling_btn_floor+0xbc>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2101      	movs	r1, #1
 80017ee:	4618      	mov	r0, r3
 80017f0:	f005 fa32 	bl	8006c58 <osEventFlagsSet>
 80017f4:	e03d      	b.n	8001872 <polling_btn_floor+0xae>
		}
		else if (Get_Button(BTN4_GPIO_Port, BTN4_Pin, 4) == BUTTON_PRESS) // ?��?��버튼
 80017f6:	2204      	movs	r2, #4
 80017f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017fc:	481f      	ldr	r0, [pc, #124]	; (800187c <polling_btn_floor+0xb8>)
 80017fe:	f7fe ff77 	bl	80006f0 <Get_Button>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d10b      	bne.n	8001820 <polling_btn_floor+0x5c>
		{
			set_target_floor(FLOOR_2);
 8001808:	2002      	movs	r0, #2
 800180a:	f7ff facd 	bl	8000da8 <set_target_floor>
			display_floor_info();
 800180e:	f7ff faff 	bl	8000e10 <display_floor_info>
			osEventFlagsSet(select_floorHandle, SELECT_FLOOR_FLAG);
 8001812:	4b1b      	ldr	r3, [pc, #108]	; (8001880 <polling_btn_floor+0xbc>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2101      	movs	r1, #1
 8001818:	4618      	mov	r0, r3
 800181a:	f005 fa1d 	bl	8006c58 <osEventFlagsSet>
 800181e:	e028      	b.n	8001872 <polling_btn_floor+0xae>
		}
		else if (Get_Button(BTN5_GPIO_Port, BTN5_Pin, 5) == BUTTON_PRESS) // ?��?��버튼
 8001820:	2205      	movs	r2, #5
 8001822:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001826:	4815      	ldr	r0, [pc, #84]	; (800187c <polling_btn_floor+0xb8>)
 8001828:	f7fe ff62 	bl	80006f0 <Get_Button>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d10b      	bne.n	800184a <polling_btn_floor+0x86>
		{
			set_target_floor(FLOOR_3);
 8001832:	2003      	movs	r0, #3
 8001834:	f7ff fab8 	bl	8000da8 <set_target_floor>
			display_floor_info();
 8001838:	f7ff faea 	bl	8000e10 <display_floor_info>
			osEventFlagsSet(select_floorHandle, SELECT_FLOOR_FLAG);
 800183c:	4b10      	ldr	r3, [pc, #64]	; (8001880 <polling_btn_floor+0xbc>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2101      	movs	r1, #1
 8001842:	4618      	mov	r0, r3
 8001844:	f005 fa08 	bl	8006c58 <osEventFlagsSet>
 8001848:	e013      	b.n	8001872 <polling_btn_floor+0xae>
		}
		else if (Get_Button(BTN6_GPIO_Port, BTN6_Pin, 6) == BUTTON_PRESS) // ?��?��버튼
 800184a:	2206      	movs	r2, #6
 800184c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001850:	480a      	ldr	r0, [pc, #40]	; (800187c <polling_btn_floor+0xb8>)
 8001852:	f7fe ff4d 	bl	80006f0 <Get_Button>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d10a      	bne.n	8001872 <polling_btn_floor+0xae>
		{
			set_target_floor(FLOOR_4);
 800185c:	2004      	movs	r0, #4
 800185e:	f7ff faa3 	bl	8000da8 <set_target_floor>
			display_floor_info();
 8001862:	f7ff fad5 	bl	8000e10 <display_floor_info>
			osEventFlagsSet(select_floorHandle, SELECT_FLOOR_FLAG);
 8001866:	4b06      	ldr	r3, [pc, #24]	; (8001880 <polling_btn_floor+0xbc>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2101      	movs	r1, #1
 800186c:	4618      	mov	r0, r3
 800186e:	f005 f9f3 	bl	8006c58 <osEventFlagsSet>
		}

		osDelay(1);
 8001872:	2001      	movs	r0, #1
 8001874:	f005 f996 	bl	8006ba4 <osDelay>
		if (Get_Button(BTN3_GPIO_Port, BTN3_Pin, 3) == BUTTON_PRESS) // ?��?��버튼
 8001878:	e7a8      	b.n	80017cc <polling_btn_floor+0x8>
 800187a:	bf00      	nop
 800187c:	40020800 	.word	0x40020800
 8001880:	20000990 	.word	0x20000990

08001884 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a04      	ldr	r2, [pc, #16]	; (80018a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d101      	bne.n	800189a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001896:	f000 fd45 	bl	8002324 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40014400 	.word	0x40014400

080018a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018ac:	b672      	cpsid	i
}
 80018ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018b0:	e7fe      	b.n	80018b0 <Error_Handler+0x8>
	...

080018b4 <control_stepmotor>:
 *       		스텝모터가 오른쪽으로 회전하는 상태입니다. (엘레베이터가 위로 올라가는 상태입니다.)
 *       - 2: START_TOP_DOWN
 *       		스텝모터가 왼쪽으로 회전하는 상태입니다. (엘레베이터가 아래로 내려가는 상태입니다.)
 */
void control_stepmotor(uint8_t curr_status)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	71fb      	strb	r3, [r7, #7]
	static int curr_step = 0;

	if (curr_status == STOP)
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d104      	bne.n	80018ce <control_stepmotor+0x1a>
	{
		curr_step = -1;
 80018c4:	4b27      	ldr	r3, [pc, #156]	; (8001964 <control_stepmotor+0xb0>)
 80018c6:	f04f 32ff 	mov.w	r2, #4294967295
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	e034      	b.n	8001938 <control_stepmotor+0x84>
	}
	else if (curr_status == START_BOTTOM_UP)
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d117      	bne.n	8001904 <control_stepmotor+0x50>
	{
		curr_step++;
 80018d4:	4b23      	ldr	r3, [pc, #140]	; (8001964 <control_stepmotor+0xb0>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	3301      	adds	r3, #1
 80018da:	4a22      	ldr	r2, [pc, #136]	; (8001964 <control_stepmotor+0xb0>)
 80018dc:	6013      	str	r3, [r2, #0]
		if (curr_step >= 8) curr_step = 0;
 80018de:	4b21      	ldr	r3, [pc, #132]	; (8001964 <control_stepmotor+0xb0>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2b07      	cmp	r3, #7
 80018e4:	dd02      	ble.n	80018ec <control_stepmotor+0x38>
 80018e6:	4b1f      	ldr	r3, [pc, #124]	; (8001964 <control_stepmotor+0xb0>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
		curr_step %= 8;
 80018ec:	4b1d      	ldr	r3, [pc, #116]	; (8001964 <control_stepmotor+0xb0>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	425a      	negs	r2, r3
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	f002 0207 	and.w	r2, r2, #7
 80018fa:	bf58      	it	pl
 80018fc:	4253      	negpl	r3, r2
 80018fe:	4a19      	ldr	r2, [pc, #100]	; (8001964 <control_stepmotor+0xb0>)
 8001900:	6013      	str	r3, [r2, #0]
 8001902:	e019      	b.n	8001938 <control_stepmotor+0x84>
	}
	else if (curr_status == START_TOP_DOWN)
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	2b02      	cmp	r3, #2
 8001908:	d116      	bne.n	8001938 <control_stepmotor+0x84>
	{
		curr_step--;
 800190a:	4b16      	ldr	r3, [pc, #88]	; (8001964 <control_stepmotor+0xb0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	3b01      	subs	r3, #1
 8001910:	4a14      	ldr	r2, [pc, #80]	; (8001964 <control_stepmotor+0xb0>)
 8001912:	6013      	str	r3, [r2, #0]
		if (curr_step < 0) curr_step = 7;
 8001914:	4b13      	ldr	r3, [pc, #76]	; (8001964 <control_stepmotor+0xb0>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	da02      	bge.n	8001922 <control_stepmotor+0x6e>
 800191c:	4b11      	ldr	r3, [pc, #68]	; (8001964 <control_stepmotor+0xb0>)
 800191e:	2207      	movs	r2, #7
 8001920:	601a      	str	r2, [r3, #0]
		curr_step %= 8;
 8001922:	4b10      	ldr	r3, [pc, #64]	; (8001964 <control_stepmotor+0xb0>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	425a      	negs	r2, r3
 8001928:	f003 0307 	and.w	r3, r3, #7
 800192c:	f002 0207 	and.w	r2, r2, #7
 8001930:	bf58      	it	pl
 8001932:	4253      	negpl	r3, r2
 8001934:	4a0b      	ldr	r2, [pc, #44]	; (8001964 <control_stepmotor+0xb0>)
 8001936:	6013      	str	r3, [r2, #0]
	}

	drive_stepmotor(curr_step);
 8001938:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <control_stepmotor+0xb0>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4618      	mov	r0, r3
 800193e:	f000 f813 	bl	8001968 <drive_stepmotor>
//	delay_us(100);
	if (curr_status == START_BOTTOM_UP) set_RPM(13);
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d103      	bne.n	8001950 <control_stepmotor+0x9c>
 8001948:	200d      	movs	r0, #13
 800194a:	f000 f911 	bl	8001b70 <set_RPM>
	else if (curr_status == START_TOP_DOWN) set_RPM(13);
}
 800194e:	e005      	b.n	800195c <control_stepmotor+0xa8>
	else if (curr_status == START_TOP_DOWN) set_RPM(13);
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	2b02      	cmp	r3, #2
 8001954:	d102      	bne.n	800195c <control_stepmotor+0xa8>
 8001956:	200d      	movs	r0, #13
 8001958:	f000 f90a 	bl	8001b70 <set_RPM>
}
 800195c:	bf00      	nop
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	200009a4 	.word	0x200009a4

08001968 <drive_stepmotor>:


void drive_stepmotor(int step)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
	switch (step)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b07      	cmp	r3, #7
 8001974:	f200 80dc 	bhi.w	8001b30 <drive_stepmotor+0x1c8>
 8001978:	a201      	add	r2, pc, #4	; (adr r2, 8001980 <drive_stepmotor+0x18>)
 800197a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800197e:	bf00      	nop
 8001980:	080019a1 	.word	0x080019a1
 8001984:	080019d3 	.word	0x080019d3
 8001988:	08001a05 	.word	0x08001a05
 800198c:	08001a37 	.word	0x08001a37
 8001990:	08001a69 	.word	0x08001a69
 8001994:	08001a9b 	.word	0x08001a9b
 8001998:	08001acd 	.word	0x08001acd
 800199c:	08001aff 	.word	0x08001aff
	{
		case 0:
			HAL_GPIO_WritePin(StepMotor_IN1_GPIO_Port, StepMotor_IN1_Pin, GPIO_PIN_SET);
 80019a0:	2201      	movs	r2, #1
 80019a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019a6:	4871      	ldr	r0, [pc, #452]	; (8001b6c <drive_stepmotor+0x204>)
 80019a8:	f002 f828 	bl	80039fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(StepMotor_IN2_GPIO_Port, StepMotor_IN2_Pin, GPIO_PIN_RESET);
 80019ac:	2200      	movs	r2, #0
 80019ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019b2:	486e      	ldr	r0, [pc, #440]	; (8001b6c <drive_stepmotor+0x204>)
 80019b4:	f002 f822 	bl	80039fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(StepMotor_IN3_GPIO_Port, StepMotor_IN3_Pin, GPIO_PIN_RESET);
 80019b8:	2200      	movs	r2, #0
 80019ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019be:	486b      	ldr	r0, [pc, #428]	; (8001b6c <drive_stepmotor+0x204>)
 80019c0:	f002 f81c 	bl	80039fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(StepMotor_IN4_GPIO_Port, StepMotor_IN4_Pin, GPIO_PIN_RESET);
 80019c4:	2200      	movs	r2, #0
 80019c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019ca:	4868      	ldr	r0, [pc, #416]	; (8001b6c <drive_stepmotor+0x204>)
 80019cc:	f002 f816 	bl	80039fc <HAL_GPIO_WritePin>
			break;
 80019d0:	e0c7      	b.n	8001b62 <drive_stepmotor+0x1fa>
		case 1:
			HAL_GPIO_WritePin(StepMotor_IN1_GPIO_Port, StepMotor_IN1_Pin, GPIO_PIN_SET);
 80019d2:	2201      	movs	r2, #1
 80019d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019d8:	4864      	ldr	r0, [pc, #400]	; (8001b6c <drive_stepmotor+0x204>)
 80019da:	f002 f80f 	bl	80039fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(StepMotor_IN2_GPIO_Port, StepMotor_IN2_Pin, GPIO_PIN_SET);
 80019de:	2201      	movs	r2, #1
 80019e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019e4:	4861      	ldr	r0, [pc, #388]	; (8001b6c <drive_stepmotor+0x204>)
 80019e6:	f002 f809 	bl	80039fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(StepMotor_IN3_GPIO_Port, StepMotor_IN3_Pin, GPIO_PIN_RESET);
 80019ea:	2200      	movs	r2, #0
 80019ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019f0:	485e      	ldr	r0, [pc, #376]	; (8001b6c <drive_stepmotor+0x204>)
 80019f2:	f002 f803 	bl	80039fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(StepMotor_IN4_GPIO_Port, StepMotor_IN4_Pin, GPIO_PIN_RESET);
 80019f6:	2200      	movs	r2, #0
 80019f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019fc:	485b      	ldr	r0, [pc, #364]	; (8001b6c <drive_stepmotor+0x204>)
 80019fe:	f001 fffd 	bl	80039fc <HAL_GPIO_WritePin>
			break;
 8001a02:	e0ae      	b.n	8001b62 <drive_stepmotor+0x1fa>
		case 2:
			HAL_GPIO_WritePin(StepMotor_IN1_GPIO_Port, StepMotor_IN1_Pin, GPIO_PIN_RESET);
 8001a04:	2200      	movs	r2, #0
 8001a06:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a0a:	4858      	ldr	r0, [pc, #352]	; (8001b6c <drive_stepmotor+0x204>)
 8001a0c:	f001 fff6 	bl	80039fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(StepMotor_IN2_GPIO_Port, StepMotor_IN2_Pin, GPIO_PIN_SET);
 8001a10:	2201      	movs	r2, #1
 8001a12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a16:	4855      	ldr	r0, [pc, #340]	; (8001b6c <drive_stepmotor+0x204>)
 8001a18:	f001 fff0 	bl	80039fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(StepMotor_IN3_GPIO_Port, StepMotor_IN3_Pin, GPIO_PIN_RESET);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a22:	4852      	ldr	r0, [pc, #328]	; (8001b6c <drive_stepmotor+0x204>)
 8001a24:	f001 ffea 	bl	80039fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(StepMotor_IN4_GPIO_Port, StepMotor_IN4_Pin, GPIO_PIN_RESET);
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a2e:	484f      	ldr	r0, [pc, #316]	; (8001b6c <drive_stepmotor+0x204>)
 8001a30:	f001 ffe4 	bl	80039fc <HAL_GPIO_WritePin>
			break;
 8001a34:	e095      	b.n	8001b62 <drive_stepmotor+0x1fa>
		case 3:
			HAL_GPIO_WritePin(StepMotor_IN1_GPIO_Port, StepMotor_IN1_Pin, GPIO_PIN_RESET);
 8001a36:	2200      	movs	r2, #0
 8001a38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a3c:	484b      	ldr	r0, [pc, #300]	; (8001b6c <drive_stepmotor+0x204>)
 8001a3e:	f001 ffdd 	bl	80039fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(StepMotor_IN2_GPIO_Port, StepMotor_IN2_Pin, GPIO_PIN_SET);
 8001a42:	2201      	movs	r2, #1
 8001a44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a48:	4848      	ldr	r0, [pc, #288]	; (8001b6c <drive_stepmotor+0x204>)
 8001a4a:	f001 ffd7 	bl	80039fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(StepMotor_IN3_GPIO_Port, StepMotor_IN3_Pin, GPIO_PIN_SET);
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a54:	4845      	ldr	r0, [pc, #276]	; (8001b6c <drive_stepmotor+0x204>)
 8001a56:	f001 ffd1 	bl	80039fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(StepMotor_IN4_GPIO_Port, StepMotor_IN4_Pin, GPIO_PIN_RESET);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a60:	4842      	ldr	r0, [pc, #264]	; (8001b6c <drive_stepmotor+0x204>)
 8001a62:	f001 ffcb 	bl	80039fc <HAL_GPIO_WritePin>
			break;
 8001a66:	e07c      	b.n	8001b62 <drive_stepmotor+0x1fa>
		case 4:
			HAL_GPIO_WritePin(StepMotor_IN1_GPIO_Port, StepMotor_IN1_Pin, GPIO_PIN_RESET);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a6e:	483f      	ldr	r0, [pc, #252]	; (8001b6c <drive_stepmotor+0x204>)
 8001a70:	f001 ffc4 	bl	80039fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(StepMotor_IN2_GPIO_Port, StepMotor_IN2_Pin, GPIO_PIN_RESET);
 8001a74:	2200      	movs	r2, #0
 8001a76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a7a:	483c      	ldr	r0, [pc, #240]	; (8001b6c <drive_stepmotor+0x204>)
 8001a7c:	f001 ffbe 	bl	80039fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(StepMotor_IN3_GPIO_Port, StepMotor_IN3_Pin, GPIO_PIN_SET);
 8001a80:	2201      	movs	r2, #1
 8001a82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a86:	4839      	ldr	r0, [pc, #228]	; (8001b6c <drive_stepmotor+0x204>)
 8001a88:	f001 ffb8 	bl	80039fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(StepMotor_IN4_GPIO_Port, StepMotor_IN4_Pin, GPIO_PIN_RESET);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a92:	4836      	ldr	r0, [pc, #216]	; (8001b6c <drive_stepmotor+0x204>)
 8001a94:	f001 ffb2 	bl	80039fc <HAL_GPIO_WritePin>
			break;
 8001a98:	e063      	b.n	8001b62 <drive_stepmotor+0x1fa>
		case 5:
			HAL_GPIO_WritePin(StepMotor_IN1_GPIO_Port, StepMotor_IN1_Pin, GPIO_PIN_RESET);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001aa0:	4832      	ldr	r0, [pc, #200]	; (8001b6c <drive_stepmotor+0x204>)
 8001aa2:	f001 ffab 	bl	80039fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(StepMotor_IN2_GPIO_Port, StepMotor_IN2_Pin, GPIO_PIN_RESET);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001aac:	482f      	ldr	r0, [pc, #188]	; (8001b6c <drive_stepmotor+0x204>)
 8001aae:	f001 ffa5 	bl	80039fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(StepMotor_IN3_GPIO_Port, StepMotor_IN3_Pin, GPIO_PIN_SET);
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ab8:	482c      	ldr	r0, [pc, #176]	; (8001b6c <drive_stepmotor+0x204>)
 8001aba:	f001 ff9f 	bl	80039fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(StepMotor_IN4_GPIO_Port, StepMotor_IN4_Pin, GPIO_PIN_SET);
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ac4:	4829      	ldr	r0, [pc, #164]	; (8001b6c <drive_stepmotor+0x204>)
 8001ac6:	f001 ff99 	bl	80039fc <HAL_GPIO_WritePin>
			break;
 8001aca:	e04a      	b.n	8001b62 <drive_stepmotor+0x1fa>
		case 6:
			HAL_GPIO_WritePin(StepMotor_IN1_GPIO_Port, StepMotor_IN1_Pin, GPIO_PIN_RESET);
 8001acc:	2200      	movs	r2, #0
 8001ace:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ad2:	4826      	ldr	r0, [pc, #152]	; (8001b6c <drive_stepmotor+0x204>)
 8001ad4:	f001 ff92 	bl	80039fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(StepMotor_IN2_GPIO_Port, StepMotor_IN2_Pin, GPIO_PIN_RESET);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ade:	4823      	ldr	r0, [pc, #140]	; (8001b6c <drive_stepmotor+0x204>)
 8001ae0:	f001 ff8c 	bl	80039fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(StepMotor_IN3_GPIO_Port, StepMotor_IN3_Pin, GPIO_PIN_RESET);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001aea:	4820      	ldr	r0, [pc, #128]	; (8001b6c <drive_stepmotor+0x204>)
 8001aec:	f001 ff86 	bl	80039fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(StepMotor_IN4_GPIO_Port, StepMotor_IN4_Pin, GPIO_PIN_SET);
 8001af0:	2201      	movs	r2, #1
 8001af2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001af6:	481d      	ldr	r0, [pc, #116]	; (8001b6c <drive_stepmotor+0x204>)
 8001af8:	f001 ff80 	bl	80039fc <HAL_GPIO_WritePin>
			break;
 8001afc:	e031      	b.n	8001b62 <drive_stepmotor+0x1fa>
		case 7:
			HAL_GPIO_WritePin(StepMotor_IN1_GPIO_Port, StepMotor_IN1_Pin, GPIO_PIN_SET);
 8001afe:	2201      	movs	r2, #1
 8001b00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b04:	4819      	ldr	r0, [pc, #100]	; (8001b6c <drive_stepmotor+0x204>)
 8001b06:	f001 ff79 	bl	80039fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(StepMotor_IN2_GPIO_Port, StepMotor_IN2_Pin, GPIO_PIN_RESET);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b10:	4816      	ldr	r0, [pc, #88]	; (8001b6c <drive_stepmotor+0x204>)
 8001b12:	f001 ff73 	bl	80039fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(StepMotor_IN3_GPIO_Port, StepMotor_IN3_Pin, GPIO_PIN_RESET);
 8001b16:	2200      	movs	r2, #0
 8001b18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b1c:	4813      	ldr	r0, [pc, #76]	; (8001b6c <drive_stepmotor+0x204>)
 8001b1e:	f001 ff6d 	bl	80039fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(StepMotor_IN4_GPIO_Port, StepMotor_IN4_Pin, GPIO_PIN_SET);
 8001b22:	2201      	movs	r2, #1
 8001b24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b28:	4810      	ldr	r0, [pc, #64]	; (8001b6c <drive_stepmotor+0x204>)
 8001b2a:	f001 ff67 	bl	80039fc <HAL_GPIO_WritePin>
			break;
 8001b2e:	e018      	b.n	8001b62 <drive_stepmotor+0x1fa>
		default:
			HAL_GPIO_WritePin(StepMotor_IN1_GPIO_Port, StepMotor_IN1_Pin, GPIO_PIN_RESET);
 8001b30:	2200      	movs	r2, #0
 8001b32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b36:	480d      	ldr	r0, [pc, #52]	; (8001b6c <drive_stepmotor+0x204>)
 8001b38:	f001 ff60 	bl	80039fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(StepMotor_IN2_GPIO_Port, StepMotor_IN2_Pin, GPIO_PIN_RESET);
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b42:	480a      	ldr	r0, [pc, #40]	; (8001b6c <drive_stepmotor+0x204>)
 8001b44:	f001 ff5a 	bl	80039fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(StepMotor_IN3_GPIO_Port, StepMotor_IN3_Pin, GPIO_PIN_RESET);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b4e:	4807      	ldr	r0, [pc, #28]	; (8001b6c <drive_stepmotor+0x204>)
 8001b50:	f001 ff54 	bl	80039fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(StepMotor_IN4_GPIO_Port, StepMotor_IN4_Pin, GPIO_PIN_RESET);
 8001b54:	2200      	movs	r2, #0
 8001b56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b5a:	4804      	ldr	r0, [pc, #16]	; (8001b6c <drive_stepmotor+0x204>)
 8001b5c:	f001 ff4e 	bl	80039fc <HAL_GPIO_WritePin>
			break;
 8001b60:	bf00      	nop
	}
}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40020c00 	.word	0x40020c00

08001b70 <set_RPM>:
 *                                = 4612ms
 *                                = 4.6초
 * 60초 / 4.6 = 13회전 : 1분동안 돌 수 있는 회전 수
 */
void set_RPM(int rpm) // 가능한 RPM 범위: 1~13
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
	delay_us(60000000/4096/rpm);
 8001b78:	f643 1238 	movw	r2, #14648	; 0x3938
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b82:	4618      	mov	r0, r3
 8001b84:	f000 fb6a 	bl	800225c <delay_us>
	// 최대 speed 기준(분당 13회전): delay_us(1126);
}
 8001b88:	bf00      	nop
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	607b      	str	r3, [r7, #4]
 8001b9a:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <HAL_MspInit+0x54>)
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9e:	4a11      	ldr	r2, [pc, #68]	; (8001be4 <HAL_MspInit+0x54>)
 8001ba0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ba6:	4b0f      	ldr	r3, [pc, #60]	; (8001be4 <HAL_MspInit+0x54>)
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bae:	607b      	str	r3, [r7, #4]
 8001bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	603b      	str	r3, [r7, #0]
 8001bb6:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <HAL_MspInit+0x54>)
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	4a0a      	ldr	r2, [pc, #40]	; (8001be4 <HAL_MspInit+0x54>)
 8001bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc2:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <HAL_MspInit+0x54>)
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bca:	603b      	str	r3, [r7, #0]
 8001bcc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	210f      	movs	r1, #15
 8001bd2:	f06f 0001 	mvn.w	r0, #1
 8001bd6:	f001 f969 	bl	8002eac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40023800 	.word	0x40023800

08001be8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08a      	sub	sp, #40	; 0x28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf0:	f107 0314 	add.w	r3, r7, #20
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a1b      	ldr	r2, [pc, #108]	; (8001c74 <HAL_ADC_MspInit+0x8c>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d12f      	bne.n	8001c6a <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	4b1a      	ldr	r3, [pc, #104]	; (8001c78 <HAL_ADC_MspInit+0x90>)
 8001c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c12:	4a19      	ldr	r2, [pc, #100]	; (8001c78 <HAL_ADC_MspInit+0x90>)
 8001c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c18:	6453      	str	r3, [r2, #68]	; 0x44
 8001c1a:	4b17      	ldr	r3, [pc, #92]	; (8001c78 <HAL_ADC_MspInit+0x90>)
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <HAL_ADC_MspInit+0x90>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	4a12      	ldr	r2, [pc, #72]	; (8001c78 <HAL_ADC_MspInit+0x90>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	6313      	str	r3, [r2, #48]	; 0x30
 8001c36:	4b10      	ldr	r3, [pc, #64]	; (8001c78 <HAL_ADC_MspInit+0x90>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c42:	2310      	movs	r3, #16
 8001c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c46:	2303      	movs	r3, #3
 8001c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4e:	f107 0314 	add.w	r3, r7, #20
 8001c52:	4619      	mov	r1, r3
 8001c54:	4809      	ldr	r0, [pc, #36]	; (8001c7c <HAL_ADC_MspInit+0x94>)
 8001c56:	f001 fd0d 	bl	8003674 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	2105      	movs	r1, #5
 8001c5e:	2012      	movs	r0, #18
 8001c60:	f001 f924 	bl	8002eac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001c64:	2012      	movs	r0, #18
 8001c66:	f001 f93d 	bl	8002ee4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c6a:	bf00      	nop
 8001c6c:	3728      	adds	r7, #40	; 0x28
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40012000 	.word	0x40012000
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	40020000 	.word	0x40020000

08001c80 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08e      	sub	sp, #56	; 0x38
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a55      	ldr	r2, [pc, #340]	; (8001df4 <HAL_ETH_MspInit+0x174>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	f040 80a4 	bne.w	8001dec <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	623b      	str	r3, [r7, #32]
 8001ca8:	4b53      	ldr	r3, [pc, #332]	; (8001df8 <HAL_ETH_MspInit+0x178>)
 8001caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cac:	4a52      	ldr	r2, [pc, #328]	; (8001df8 <HAL_ETH_MspInit+0x178>)
 8001cae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cb2:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb4:	4b50      	ldr	r3, [pc, #320]	; (8001df8 <HAL_ETH_MspInit+0x178>)
 8001cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cbc:	623b      	str	r3, [r7, #32]
 8001cbe:	6a3b      	ldr	r3, [r7, #32]
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	61fb      	str	r3, [r7, #28]
 8001cc4:	4b4c      	ldr	r3, [pc, #304]	; (8001df8 <HAL_ETH_MspInit+0x178>)
 8001cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc8:	4a4b      	ldr	r2, [pc, #300]	; (8001df8 <HAL_ETH_MspInit+0x178>)
 8001cca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001cce:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd0:	4b49      	ldr	r3, [pc, #292]	; (8001df8 <HAL_ETH_MspInit+0x178>)
 8001cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cd8:	61fb      	str	r3, [r7, #28]
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	2300      	movs	r3, #0
 8001cde:	61bb      	str	r3, [r7, #24]
 8001ce0:	4b45      	ldr	r3, [pc, #276]	; (8001df8 <HAL_ETH_MspInit+0x178>)
 8001ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce4:	4a44      	ldr	r2, [pc, #272]	; (8001df8 <HAL_ETH_MspInit+0x178>)
 8001ce6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001cea:	6313      	str	r3, [r2, #48]	; 0x30
 8001cec:	4b42      	ldr	r3, [pc, #264]	; (8001df8 <HAL_ETH_MspInit+0x178>)
 8001cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001cf4:	61bb      	str	r3, [r7, #24]
 8001cf6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]
 8001cfc:	4b3e      	ldr	r3, [pc, #248]	; (8001df8 <HAL_ETH_MspInit+0x178>)
 8001cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d00:	4a3d      	ldr	r2, [pc, #244]	; (8001df8 <HAL_ETH_MspInit+0x178>)
 8001d02:	f043 0304 	orr.w	r3, r3, #4
 8001d06:	6313      	str	r3, [r2, #48]	; 0x30
 8001d08:	4b3b      	ldr	r3, [pc, #236]	; (8001df8 <HAL_ETH_MspInit+0x178>)
 8001d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	617b      	str	r3, [r7, #20]
 8001d12:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d14:	2300      	movs	r3, #0
 8001d16:	613b      	str	r3, [r7, #16]
 8001d18:	4b37      	ldr	r3, [pc, #220]	; (8001df8 <HAL_ETH_MspInit+0x178>)
 8001d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1c:	4a36      	ldr	r2, [pc, #216]	; (8001df8 <HAL_ETH_MspInit+0x178>)
 8001d1e:	f043 0301 	orr.w	r3, r3, #1
 8001d22:	6313      	str	r3, [r2, #48]	; 0x30
 8001d24:	4b34      	ldr	r3, [pc, #208]	; (8001df8 <HAL_ETH_MspInit+0x178>)
 8001d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	613b      	str	r3, [r7, #16]
 8001d2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d30:	2300      	movs	r3, #0
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	4b30      	ldr	r3, [pc, #192]	; (8001df8 <HAL_ETH_MspInit+0x178>)
 8001d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d38:	4a2f      	ldr	r2, [pc, #188]	; (8001df8 <HAL_ETH_MspInit+0x178>)
 8001d3a:	f043 0302 	orr.w	r3, r3, #2
 8001d3e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d40:	4b2d      	ldr	r3, [pc, #180]	; (8001df8 <HAL_ETH_MspInit+0x178>)
 8001d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	60bb      	str	r3, [r7, #8]
 8001d50:	4b29      	ldr	r3, [pc, #164]	; (8001df8 <HAL_ETH_MspInit+0x178>)
 8001d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d54:	4a28      	ldr	r2, [pc, #160]	; (8001df8 <HAL_ETH_MspInit+0x178>)
 8001d56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d5a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5c:	4b26      	ldr	r3, [pc, #152]	; (8001df8 <HAL_ETH_MspInit+0x178>)
 8001d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d64:	60bb      	str	r3, [r7, #8]
 8001d66:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001d68:	2332      	movs	r3, #50	; 0x32
 8001d6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d74:	2303      	movs	r3, #3
 8001d76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d78:	230b      	movs	r3, #11
 8001d7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d80:	4619      	mov	r1, r3
 8001d82:	481e      	ldr	r0, [pc, #120]	; (8001dfc <HAL_ETH_MspInit+0x17c>)
 8001d84:	f001 fc76 	bl	8003674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001d88:	2386      	movs	r3, #134	; 0x86
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d94:	2303      	movs	r3, #3
 8001d96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d98:	230b      	movs	r3, #11
 8001d9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001da0:	4619      	mov	r1, r3
 8001da2:	4817      	ldr	r0, [pc, #92]	; (8001e00 <HAL_ETH_MspInit+0x180>)
 8001da4:	f001 fc66 	bl	8003674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001da8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dae:	2302      	movs	r3, #2
 8001db0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db6:	2303      	movs	r3, #3
 8001db8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001dba:	230b      	movs	r3, #11
 8001dbc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	480f      	ldr	r0, [pc, #60]	; (8001e04 <HAL_ETH_MspInit+0x184>)
 8001dc6:	f001 fc55 	bl	8003674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001dca:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ddc:	230b      	movs	r3, #11
 8001dde:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de4:	4619      	mov	r1, r3
 8001de6:	4808      	ldr	r0, [pc, #32]	; (8001e08 <HAL_ETH_MspInit+0x188>)
 8001de8:	f001 fc44 	bl	8003674 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001dec:	bf00      	nop
 8001dee:	3738      	adds	r7, #56	; 0x38
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40028000 	.word	0x40028000
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40020800 	.word	0x40020800
 8001e00:	40020000 	.word	0x40020000
 8001e04:	40020400 	.word	0x40020400
 8001e08:	40021800 	.word	0x40021800

08001e0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08a      	sub	sp, #40	; 0x28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e14:	f107 0314 	add.w	r3, r7, #20
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a19      	ldr	r2, [pc, #100]	; (8001e90 <HAL_I2C_MspInit+0x84>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d12c      	bne.n	8001e88 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	613b      	str	r3, [r7, #16]
 8001e32:	4b18      	ldr	r3, [pc, #96]	; (8001e94 <HAL_I2C_MspInit+0x88>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	4a17      	ldr	r2, [pc, #92]	; (8001e94 <HAL_I2C_MspInit+0x88>)
 8001e38:	f043 0302 	orr.w	r3, r3, #2
 8001e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3e:	4b15      	ldr	r3, [pc, #84]	; (8001e94 <HAL_I2C_MspInit+0x88>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	613b      	str	r3, [r7, #16]
 8001e48:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e50:	2312      	movs	r3, #18
 8001e52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e5c:	2304      	movs	r3, #4
 8001e5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e60:	f107 0314 	add.w	r3, r7, #20
 8001e64:	4619      	mov	r1, r3
 8001e66:	480c      	ldr	r0, [pc, #48]	; (8001e98 <HAL_I2C_MspInit+0x8c>)
 8001e68:	f001 fc04 	bl	8003674 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <HAL_I2C_MspInit+0x88>)
 8001e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e74:	4a07      	ldr	r2, [pc, #28]	; (8001e94 <HAL_I2C_MspInit+0x88>)
 8001e76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e7a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7c:	4b05      	ldr	r3, [pc, #20]	; (8001e94 <HAL_I2C_MspInit+0x88>)
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e88:	bf00      	nop
 8001e8a:	3728      	adds	r7, #40	; 0x28
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40005400 	.word	0x40005400
 8001e94:	40023800 	.word	0x40023800
 8001e98:	40020400 	.word	0x40020400

08001e9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a0e      	ldr	r2, [pc, #56]	; (8001ee4 <HAL_TIM_Base_MspInit+0x48>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d115      	bne.n	8001eda <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	4b0d      	ldr	r3, [pc, #52]	; (8001ee8 <HAL_TIM_Base_MspInit+0x4c>)
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb6:	4a0c      	ldr	r2, [pc, #48]	; (8001ee8 <HAL_TIM_Base_MspInit+0x4c>)
 8001eb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ebc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <HAL_TIM_Base_MspInit+0x4c>)
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2105      	movs	r1, #5
 8001ece:	201a      	movs	r0, #26
 8001ed0:	f000 ffec 	bl	8002eac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001ed4:	201a      	movs	r0, #26
 8001ed6:	f001 f805 	bl	8002ee4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001eda:	bf00      	nop
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40014800 	.word	0x40014800
 8001ee8:	40023800 	.word	0x40023800

08001eec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08a      	sub	sp, #40	; 0x28
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef4:	f107 0314 	add.w	r3, r7, #20
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	60da      	str	r2, [r3, #12]
 8001f02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a1d      	ldr	r2, [pc, #116]	; (8001f80 <HAL_UART_MspInit+0x94>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d134      	bne.n	8001f78 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	4b1c      	ldr	r3, [pc, #112]	; (8001f84 <HAL_UART_MspInit+0x98>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	4a1b      	ldr	r2, [pc, #108]	; (8001f84 <HAL_UART_MspInit+0x98>)
 8001f18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f1e:	4b19      	ldr	r3, [pc, #100]	; (8001f84 <HAL_UART_MspInit+0x98>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f26:	613b      	str	r3, [r7, #16]
 8001f28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <HAL_UART_MspInit+0x98>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	4a14      	ldr	r2, [pc, #80]	; (8001f84 <HAL_UART_MspInit+0x98>)
 8001f34:	f043 0308 	orr.w	r3, r3, #8
 8001f38:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3a:	4b12      	ldr	r3, [pc, #72]	; (8001f84 <HAL_UART_MspInit+0x98>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	f003 0308 	and.w	r3, r3, #8
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001f46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f50:	2300      	movs	r3, #0
 8001f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f54:	2303      	movs	r3, #3
 8001f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f58:	2307      	movs	r3, #7
 8001f5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f5c:	f107 0314 	add.w	r3, r7, #20
 8001f60:	4619      	mov	r1, r3
 8001f62:	4809      	ldr	r0, [pc, #36]	; (8001f88 <HAL_UART_MspInit+0x9c>)
 8001f64:	f001 fb86 	bl	8003674 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001f68:	2200      	movs	r2, #0
 8001f6a:	2105      	movs	r1, #5
 8001f6c:	2027      	movs	r0, #39	; 0x27
 8001f6e:	f000 ff9d 	bl	8002eac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f72:	2027      	movs	r0, #39	; 0x27
 8001f74:	f000 ffb6 	bl	8002ee4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f78:	bf00      	nop
 8001f7a:	3728      	adds	r7, #40	; 0x28
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40004800 	.word	0x40004800
 8001f84:	40023800 	.word	0x40023800
 8001f88:	40020c00 	.word	0x40020c00

08001f8c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08a      	sub	sp, #40	; 0x28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f94:	f107 0314 	add.w	r3, r7, #20
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	60da      	str	r2, [r3, #12]
 8001fa2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fac:	d13f      	bne.n	800202e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	613b      	str	r3, [r7, #16]
 8001fb2:	4b21      	ldr	r3, [pc, #132]	; (8002038 <HAL_PCD_MspInit+0xac>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	4a20      	ldr	r2, [pc, #128]	; (8002038 <HAL_PCD_MspInit+0xac>)
 8001fb8:	f043 0301 	orr.w	r3, r3, #1
 8001fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fbe:	4b1e      	ldr	r3, [pc, #120]	; (8002038 <HAL_PCD_MspInit+0xac>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	613b      	str	r3, [r7, #16]
 8001fc8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001fca:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001fce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001fdc:	230a      	movs	r3, #10
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe0:	f107 0314 	add.w	r3, r7, #20
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4815      	ldr	r0, [pc, #84]	; (800203c <HAL_PCD_MspInit+0xb0>)
 8001fe8:	f001 fb44 	bl	8003674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001fec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ff0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001ffa:	f107 0314 	add.w	r3, r7, #20
 8001ffe:	4619      	mov	r1, r3
 8002000:	480e      	ldr	r0, [pc, #56]	; (800203c <HAL_PCD_MspInit+0xb0>)
 8002002:	f001 fb37 	bl	8003674 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002006:	4b0c      	ldr	r3, [pc, #48]	; (8002038 <HAL_PCD_MspInit+0xac>)
 8002008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800200a:	4a0b      	ldr	r2, [pc, #44]	; (8002038 <HAL_PCD_MspInit+0xac>)
 800200c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002010:	6353      	str	r3, [r2, #52]	; 0x34
 8002012:	2300      	movs	r3, #0
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	4b08      	ldr	r3, [pc, #32]	; (8002038 <HAL_PCD_MspInit+0xac>)
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	4a07      	ldr	r2, [pc, #28]	; (8002038 <HAL_PCD_MspInit+0xac>)
 800201c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002020:	6453      	str	r3, [r2, #68]	; 0x44
 8002022:	4b05      	ldr	r3, [pc, #20]	; (8002038 <HAL_PCD_MspInit+0xac>)
 8002024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800202e:	bf00      	nop
 8002030:	3728      	adds	r7, #40	; 0x28
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40023800 	.word	0x40023800
 800203c:	40020000 	.word	0x40020000

08002040 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b08c      	sub	sp, #48	; 0x30
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002048:	2300      	movs	r3, #0
 800204a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800204c:	2300      	movs	r3, #0
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8002050:	2300      	movs	r3, #0
 8002052:	60bb      	str	r3, [r7, #8]
 8002054:	4b2f      	ldr	r3, [pc, #188]	; (8002114 <HAL_InitTick+0xd4>)
 8002056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002058:	4a2e      	ldr	r2, [pc, #184]	; (8002114 <HAL_InitTick+0xd4>)
 800205a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800205e:	6453      	str	r3, [r2, #68]	; 0x44
 8002060:	4b2c      	ldr	r3, [pc, #176]	; (8002114 <HAL_InitTick+0xd4>)
 8002062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800206c:	f107 020c 	add.w	r2, r7, #12
 8002070:	f107 0310 	add.w	r3, r7, #16
 8002074:	4611      	mov	r1, r2
 8002076:	4618      	mov	r0, r3
 8002078:	f002 ff88 	bl	8004f8c <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800207c:	f002 ff72 	bl	8004f64 <HAL_RCC_GetPCLK2Freq>
 8002080:	4603      	mov	r3, r0
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002088:	4a23      	ldr	r2, [pc, #140]	; (8002118 <HAL_InitTick+0xd8>)
 800208a:	fba2 2303 	umull	r2, r3, r2, r3
 800208e:	0c9b      	lsrs	r3, r3, #18
 8002090:	3b01      	subs	r3, #1
 8002092:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8002094:	4b21      	ldr	r3, [pc, #132]	; (800211c <HAL_InitTick+0xdc>)
 8002096:	4a22      	ldr	r2, [pc, #136]	; (8002120 <HAL_InitTick+0xe0>)
 8002098:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 800209a:	4b20      	ldr	r3, [pc, #128]	; (800211c <HAL_InitTick+0xdc>)
 800209c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020a0:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 80020a2:	4a1e      	ldr	r2, [pc, #120]	; (800211c <HAL_InitTick+0xdc>)
 80020a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a6:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 80020a8:	4b1c      	ldr	r3, [pc, #112]	; (800211c <HAL_InitTick+0xdc>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ae:	4b1b      	ldr	r3, [pc, #108]	; (800211c <HAL_InitTick+0xdc>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020b4:	4b19      	ldr	r3, [pc, #100]	; (800211c <HAL_InitTick+0xdc>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 80020ba:	4818      	ldr	r0, [pc, #96]	; (800211c <HAL_InitTick+0xdc>)
 80020bc:	f002 ff98 	bl	8004ff0 <HAL_TIM_Base_Init>
 80020c0:	4603      	mov	r3, r0
 80020c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80020c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d11b      	bne.n	8002106 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 80020ce:	4813      	ldr	r0, [pc, #76]	; (800211c <HAL_InitTick+0xdc>)
 80020d0:	f002 ffde 	bl	8005090 <HAL_TIM_Base_Start_IT>
 80020d4:	4603      	mov	r3, r0
 80020d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80020da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d111      	bne.n	8002106 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80020e2:	2019      	movs	r0, #25
 80020e4:	f000 fefe 	bl	8002ee4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b0f      	cmp	r3, #15
 80020ec:	d808      	bhi.n	8002100 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80020ee:	2200      	movs	r2, #0
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	2019      	movs	r0, #25
 80020f4:	f000 feda 	bl	8002eac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020f8:	4a0a      	ldr	r2, [pc, #40]	; (8002124 <HAL_InitTick+0xe4>)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6013      	str	r3, [r2, #0]
 80020fe:	e002      	b.n	8002106 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002106:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800210a:	4618      	mov	r0, r3
 800210c:	3730      	adds	r7, #48	; 0x30
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40023800 	.word	0x40023800
 8002118:	431bde83 	.word	0x431bde83
 800211c:	200009a8 	.word	0x200009a8
 8002120:	40014400 	.word	0x40014400
 8002124:	2000006c 	.word	0x2000006c

08002128 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800212c:	e7fe      	b.n	800212c <NMI_Handler+0x4>

0800212e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800212e:	b480      	push	{r7}
 8002130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002132:	e7fe      	b.n	8002132 <HardFault_Handler+0x4>

08002134 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002138:	e7fe      	b.n	8002138 <MemManage_Handler+0x4>

0800213a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800213a:	b480      	push	{r7}
 800213c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800213e:	e7fe      	b.n	800213e <BusFault_Handler+0x4>

08002140 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002144:	e7fe      	b.n	8002144 <UsageFault_Handler+0x4>

08002146 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002146:	b480      	push	{r7}
 8002148:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800214a:	bf00      	nop
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002158:	4802      	ldr	r0, [pc, #8]	; (8002164 <ADC_IRQHandler+0x10>)
 800215a:	f000 fa86 	bl	800266a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000294 	.word	0x20000294

08002168 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800216c:	4802      	ldr	r0, [pc, #8]	; (8002178 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800216e:	f002 ffff 	bl	8005170 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	200009a8 	.word	0x200009a8

0800217c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002180:	4802      	ldr	r0, [pc, #8]	; (800218c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002182:	f002 fff5 	bl	8005170 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	200003e0 	.word	0x200003e0

08002190 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002194:	4802      	ldr	r0, [pc, #8]	; (80021a0 <USART3_IRQHandler+0x10>)
 8002196:	f003 fa1d 	bl	80055d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000428 	.word	0x20000428

080021a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PhotoSensor_EXIT12_Pin);
 80021a8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80021ac:	f001 fc5a 	bl	8003a64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PhotoSensor_EXIT13_Pin);
 80021b0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80021b4:	f001 fc56 	bl	8003a64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PhotoSensor_EXIT14_Pin);
 80021b8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80021bc:	f001 fc52 	bl	8003a64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PhotoSensor_EXIT15_Pin);
 80021c0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80021c4:	f001 fc4e 	bl	8003a64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80021c8:	bf00      	nop
 80021ca:	bd80      	pop	{r7, pc}

080021cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021d4:	4a14      	ldr	r2, [pc, #80]	; (8002228 <_sbrk+0x5c>)
 80021d6:	4b15      	ldr	r3, [pc, #84]	; (800222c <_sbrk+0x60>)
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021e0:	4b13      	ldr	r3, [pc, #76]	; (8002230 <_sbrk+0x64>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d102      	bne.n	80021ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021e8:	4b11      	ldr	r3, [pc, #68]	; (8002230 <_sbrk+0x64>)
 80021ea:	4a12      	ldr	r2, [pc, #72]	; (8002234 <_sbrk+0x68>)
 80021ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ee:	4b10      	ldr	r3, [pc, #64]	; (8002230 <_sbrk+0x64>)
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4413      	add	r3, r2
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d207      	bcs.n	800220c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021fc:	f007 fed6 	bl	8009fac <__errno>
 8002200:	4603      	mov	r3, r0
 8002202:	220c      	movs	r2, #12
 8002204:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002206:	f04f 33ff 	mov.w	r3, #4294967295
 800220a:	e009      	b.n	8002220 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800220c:	4b08      	ldr	r3, [pc, #32]	; (8002230 <_sbrk+0x64>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002212:	4b07      	ldr	r3, [pc, #28]	; (8002230 <_sbrk+0x64>)
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4413      	add	r3, r2
 800221a:	4a05      	ldr	r2, [pc, #20]	; (8002230 <_sbrk+0x64>)
 800221c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800221e:	68fb      	ldr	r3, [r7, #12]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	20030000 	.word	0x20030000
 800222c:	00000400 	.word	0x00000400
 8002230:	200009f0 	.word	0x200009f0
 8002234:	20005418 	.word	0x20005418

08002238 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800223c:	4b06      	ldr	r3, [pc, #24]	; (8002258 <SystemInit+0x20>)
 800223e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002242:	4a05      	ldr	r2, [pc, #20]	; (8002258 <SystemInit+0x20>)
 8002244:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002248:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800224c:	bf00      	nop
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <delay_us>:
/*
 * desc: HAL_Delay()를 대체하기 위한 함수
 * param1: 딜레이시킬 마이크로 세컨드 시간
 * */
void delay_us(uint32_t us)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim11, 0);
 8002264:	4b08      	ldr	r3, [pc, #32]	; (8002288 <delay_us+0x2c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2200      	movs	r2, #0
 800226a:	625a      	str	r2, [r3, #36]	; 0x24

	while(__HAL_TIM_GET_COUNTER(&htim11) < us) // 파라미터로 들어온 us 시간동안 이 와일문에 잡혀있는 것임
 800226c:	bf00      	nop
 800226e:	4b06      	ldr	r3, [pc, #24]	; (8002288 <delay_us+0x2c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	429a      	cmp	r2, r3
 8002278:	d8f9      	bhi.n	800226e <delay_us+0x12>
		;
}
 800227a:	bf00      	nop
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	200003e0 	.word	0x200003e0

0800228c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800228c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022c4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002290:	480d      	ldr	r0, [pc, #52]	; (80022c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002292:	490e      	ldr	r1, [pc, #56]	; (80022cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002294:	4a0e      	ldr	r2, [pc, #56]	; (80022d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002298:	e002      	b.n	80022a0 <LoopCopyDataInit>

0800229a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800229a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800229c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800229e:	3304      	adds	r3, #4

080022a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022a4:	d3f9      	bcc.n	800229a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022a6:	4a0b      	ldr	r2, [pc, #44]	; (80022d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022a8:	4c0b      	ldr	r4, [pc, #44]	; (80022d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80022aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022ac:	e001      	b.n	80022b2 <LoopFillZerobss>

080022ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022b0:	3204      	adds	r2, #4

080022b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022b4:	d3fb      	bcc.n	80022ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022b6:	f7ff ffbf 	bl	8002238 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022ba:	f007 fe7d 	bl	8009fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022be:	f7fe fe39 	bl	8000f34 <main>
  bx  lr    
 80022c2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80022c4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80022c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022cc:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 80022d0:	0800acc0 	.word	0x0800acc0
  ldr r2, =_sbss
 80022d4:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 80022d8:	20005418 	.word	0x20005418

080022dc <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022dc:	e7fe      	b.n	80022dc <CAN1_RX0_IRQHandler>
	...

080022e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022e4:	4b0e      	ldr	r3, [pc, #56]	; (8002320 <HAL_Init+0x40>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a0d      	ldr	r2, [pc, #52]	; (8002320 <HAL_Init+0x40>)
 80022ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022f0:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <HAL_Init+0x40>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a0a      	ldr	r2, [pc, #40]	; (8002320 <HAL_Init+0x40>)
 80022f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022fc:	4b08      	ldr	r3, [pc, #32]	; (8002320 <HAL_Init+0x40>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a07      	ldr	r2, [pc, #28]	; (8002320 <HAL_Init+0x40>)
 8002302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002306:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002308:	2003      	movs	r0, #3
 800230a:	f000 fdc4 	bl	8002e96 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800230e:	200f      	movs	r0, #15
 8002310:	f7ff fe96 	bl	8002040 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002314:	f7ff fc3c 	bl	8001b90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40023c00 	.word	0x40023c00

08002324 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002328:	4b06      	ldr	r3, [pc, #24]	; (8002344 <HAL_IncTick+0x20>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	461a      	mov	r2, r3
 800232e:	4b06      	ldr	r3, [pc, #24]	; (8002348 <HAL_IncTick+0x24>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4413      	add	r3, r2
 8002334:	4a04      	ldr	r2, [pc, #16]	; (8002348 <HAL_IncTick+0x24>)
 8002336:	6013      	str	r3, [r2, #0]
}
 8002338:	bf00      	nop
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	20000070 	.word	0x20000070
 8002348:	200009f4 	.word	0x200009f4

0800234c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  return uwTick;
 8002350:	4b03      	ldr	r3, [pc, #12]	; (8002360 <HAL_GetTick+0x14>)
 8002352:	681b      	ldr	r3, [r3, #0]
}
 8002354:	4618      	mov	r0, r3
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	200009f4 	.word	0x200009f4

08002364 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800236c:	f7ff ffee 	bl	800234c <HAL_GetTick>
 8002370:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800237c:	d005      	beq.n	800238a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800237e:	4b0a      	ldr	r3, [pc, #40]	; (80023a8 <HAL_Delay+0x44>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	461a      	mov	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	4413      	add	r3, r2
 8002388:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800238a:	bf00      	nop
 800238c:	f7ff ffde 	bl	800234c <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	429a      	cmp	r2, r3
 800239a:	d8f7      	bhi.n	800238c <HAL_Delay+0x28>
  {
  }
}
 800239c:	bf00      	nop
 800239e:	bf00      	nop
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	20000070 	.word	0x20000070

080023ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023b4:	2300      	movs	r3, #0
 80023b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e033      	b.n	800242a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d109      	bne.n	80023de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7ff fc0c 	bl	8001be8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	f003 0310 	and.w	r3, r3, #16
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d118      	bne.n	800241c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023f2:	f023 0302 	bic.w	r3, r3, #2
 80023f6:	f043 0202 	orr.w	r2, r3, #2
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 fb96 	bl	8002b30 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	f023 0303 	bic.w	r3, r3, #3
 8002412:	f043 0201 	orr.w	r2, r3, #1
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	641a      	str	r2, [r3, #64]	; 0x40
 800241a:	e001      	b.n	8002420 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002428:	7bfb      	ldrb	r3, [r7, #15]
}
 800242a:	4618      	mov	r0, r3
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800243c:	2300      	movs	r3, #0
 800243e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002446:	2b01      	cmp	r3, #1
 8002448:	d101      	bne.n	800244e <HAL_ADC_Start_IT+0x1a>
 800244a:	2302      	movs	r3, #2
 800244c:	e0bd      	b.n	80025ca <HAL_ADC_Start_IT+0x196>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	2b01      	cmp	r3, #1
 8002462:	d018      	beq.n	8002496 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f042 0201 	orr.w	r2, r2, #1
 8002472:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002474:	4b58      	ldr	r3, [pc, #352]	; (80025d8 <HAL_ADC_Start_IT+0x1a4>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a58      	ldr	r2, [pc, #352]	; (80025dc <HAL_ADC_Start_IT+0x1a8>)
 800247a:	fba2 2303 	umull	r2, r3, r2, r3
 800247e:	0c9a      	lsrs	r2, r3, #18
 8002480:	4613      	mov	r3, r2
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	4413      	add	r3, r2
 8002486:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002488:	e002      	b.n	8002490 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	3b01      	subs	r3, #1
 800248e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1f9      	bne.n	800248a <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	f040 8085 	bne.w	80025b0 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80024ae:	f023 0301 	bic.w	r3, r3, #1
 80024b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d007      	beq.n	80024d8 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024d0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024e4:	d106      	bne.n	80024f4 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ea:	f023 0206 	bic.w	r2, r3, #6
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	645a      	str	r2, [r3, #68]	; 0x44
 80024f2:	e002      	b.n	80024fa <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002502:	4b37      	ldr	r3, [pc, #220]	; (80025e0 <HAL_ADC_Start_IT+0x1ac>)
 8002504:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800250e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6812      	ldr	r2, [r2, #0]
 800251a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800251e:	f043 0320 	orr.w	r3, r3, #32
 8002522:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f003 031f 	and.w	r3, r3, #31
 800252c:	2b00      	cmp	r3, #0
 800252e:	d12a      	bne.n	8002586 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a2b      	ldr	r2, [pc, #172]	; (80025e4 <HAL_ADC_Start_IT+0x1b0>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d015      	beq.n	8002566 <HAL_ADC_Start_IT+0x132>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a2a      	ldr	r2, [pc, #168]	; (80025e8 <HAL_ADC_Start_IT+0x1b4>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d105      	bne.n	8002550 <HAL_ADC_Start_IT+0x11c>
 8002544:	4b26      	ldr	r3, [pc, #152]	; (80025e0 <HAL_ADC_Start_IT+0x1ac>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 031f 	and.w	r3, r3, #31
 800254c:	2b00      	cmp	r3, #0
 800254e:	d00a      	beq.n	8002566 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a25      	ldr	r2, [pc, #148]	; (80025ec <HAL_ADC_Start_IT+0x1b8>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d136      	bne.n	80025c8 <HAL_ADC_Start_IT+0x194>
 800255a:	4b21      	ldr	r3, [pc, #132]	; (80025e0 <HAL_ADC_Start_IT+0x1ac>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f003 0310 	and.w	r3, r3, #16
 8002562:	2b00      	cmp	r3, #0
 8002564:	d130      	bne.n	80025c8 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d129      	bne.n	80025c8 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689a      	ldr	r2, [r3, #8]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002582:	609a      	str	r2, [r3, #8]
 8002584:	e020      	b.n	80025c8 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a16      	ldr	r2, [pc, #88]	; (80025e4 <HAL_ADC_Start_IT+0x1b0>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d11b      	bne.n	80025c8 <HAL_ADC_Start_IT+0x194>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d114      	bne.n	80025c8 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80025ac:	609a      	str	r2, [r3, #8]
 80025ae:	e00b      	b.n	80025c8 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b4:	f043 0210 	orr.w	r2, r3, #16
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c0:	f043 0201 	orr.w	r2, r3, #1
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3714      	adds	r7, #20
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	20000068 	.word	0x20000068
 80025dc:	431bde83 	.word	0x431bde83
 80025e0:	40012300 	.word	0x40012300
 80025e4:	40012000 	.word	0x40012000
 80025e8:	40012100 	.word	0x40012100
 80025ec:	40012200 	.word	0x40012200

080025f0 <HAL_ADC_Stop_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d101      	bne.n	8002606 <HAL_ADC_Stop_IT+0x16>
 8002602:	2302      	movs	r3, #2
 8002604:	e02b      	b.n	800265e <HAL_ADC_Stop_IT+0x6e>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 0201 	bic.w	r2, r2, #1
 800261c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	2b00      	cmp	r3, #0
 800262a:	d113      	bne.n	8002654 <HAL_ADC_Stop_IT+0x64>
  {
  	/* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6812      	ldr	r2, [r2, #0]
 8002636:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800263a:	f023 0320 	bic.w	r3, r3, #32
 800263e:	6053      	str	r3, [r2, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002644:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002648:	f023 0301 	bic.w	r3, r3, #1
 800264c:	f043 0201 	orr.w	r2, r3, #1
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr

0800266a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b086      	sub	sp, #24
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002672:	2300      	movs	r3, #0
 8002674:	617b      	str	r3, [r7, #20]
 8002676:	2300      	movs	r3, #0
 8002678:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	f003 0320 	and.w	r3, r3, #32
 8002698:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d049      	beq.n	8002734 <HAL_ADC_IRQHandler+0xca>
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d046      	beq.n	8002734 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	f003 0310 	and.w	r3, r3, #16
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d105      	bne.n	80026be <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d12b      	bne.n	8002724 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d127      	bne.n	8002724 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026da:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d006      	beq.n	80026f0 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d119      	bne.n	8002724 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	685a      	ldr	r2, [r3, #4]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 0220 	bic.w	r2, r2, #32
 80026fe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002704:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002710:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d105      	bne.n	8002724 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271c:	f043 0201 	orr.w	r2, r3, #1
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f7fe f893 	bl	8000850 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f06f 0212 	mvn.w	r2, #18
 8002732:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f003 0304 	and.w	r3, r3, #4
 800273a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002742:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d057      	beq.n	80027fa <HAL_ADC_IRQHandler+0x190>
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d054      	beq.n	80027fa <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002754:	f003 0310 	and.w	r3, r3, #16
 8002758:	2b00      	cmp	r3, #0
 800275a:	d105      	bne.n	8002768 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002760:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d139      	bne.n	80027ea <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800277c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002780:	2b00      	cmp	r3, #0
 8002782:	d006      	beq.n	8002792 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800278e:	2b00      	cmp	r3, #0
 8002790:	d12b      	bne.n	80027ea <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800279c:	2b00      	cmp	r3, #0
 800279e:	d124      	bne.n	80027ea <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d11d      	bne.n	80027ea <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d119      	bne.n	80027ea <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027c4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d105      	bne.n	80027ea <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	f043 0201 	orr.w	r2, r3, #1
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 fa9c 	bl	8002d28 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f06f 020c 	mvn.w	r2, #12
 80027f8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002808:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d017      	beq.n	8002840 <HAL_ADC_IRQHandler+0x1d6>
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d014      	beq.n	8002840 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b01      	cmp	r3, #1
 8002822:	d10d      	bne.n	8002840 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002828:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 f837 	bl	80028a4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f06f 0201 	mvn.w	r2, #1
 800283e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f003 0320 	and.w	r3, r3, #32
 8002846:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800284e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d015      	beq.n	8002882 <HAL_ADC_IRQHandler+0x218>
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d012      	beq.n	8002882 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002860:	f043 0202 	orr.w	r2, r3, #2
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f06f 0220 	mvn.w	r2, #32
 8002870:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 f820 	bl	80028b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f06f 0220 	mvn.w	r2, #32
 8002880:	601a      	str	r2, [r3, #0]
  }
}
 8002882:	bf00      	nop
 8002884:	3718      	adds	r7, #24
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002898:	4618      	mov	r0, r3
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80028d6:	2300      	movs	r3, #0
 80028d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d101      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x1c>
 80028e4:	2302      	movs	r3, #2
 80028e6:	e113      	b.n	8002b10 <HAL_ADC_ConfigChannel+0x244>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2b09      	cmp	r3, #9
 80028f6:	d925      	bls.n	8002944 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68d9      	ldr	r1, [r3, #12]
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	b29b      	uxth	r3, r3
 8002904:	461a      	mov	r2, r3
 8002906:	4613      	mov	r3, r2
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	4413      	add	r3, r2
 800290c:	3b1e      	subs	r3, #30
 800290e:	2207      	movs	r2, #7
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	43da      	mvns	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	400a      	ands	r2, r1
 800291c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68d9      	ldr	r1, [r3, #12]
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	b29b      	uxth	r3, r3
 800292e:	4618      	mov	r0, r3
 8002930:	4603      	mov	r3, r0
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	4403      	add	r3, r0
 8002936:	3b1e      	subs	r3, #30
 8002938:	409a      	lsls	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	430a      	orrs	r2, r1
 8002940:	60da      	str	r2, [r3, #12]
 8002942:	e022      	b.n	800298a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6919      	ldr	r1, [r3, #16]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	b29b      	uxth	r3, r3
 8002950:	461a      	mov	r2, r3
 8002952:	4613      	mov	r3, r2
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	4413      	add	r3, r2
 8002958:	2207      	movs	r2, #7
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	43da      	mvns	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	400a      	ands	r2, r1
 8002966:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6919      	ldr	r1, [r3, #16]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	689a      	ldr	r2, [r3, #8]
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	b29b      	uxth	r3, r3
 8002978:	4618      	mov	r0, r3
 800297a:	4603      	mov	r3, r0
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	4403      	add	r3, r0
 8002980:	409a      	lsls	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	430a      	orrs	r2, r1
 8002988:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2b06      	cmp	r3, #6
 8002990:	d824      	bhi.n	80029dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	4613      	mov	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	3b05      	subs	r3, #5
 80029a4:	221f      	movs	r2, #31
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	43da      	mvns	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	400a      	ands	r2, r1
 80029b2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	b29b      	uxth	r3, r3
 80029c0:	4618      	mov	r0, r3
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	4613      	mov	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	4413      	add	r3, r2
 80029cc:	3b05      	subs	r3, #5
 80029ce:	fa00 f203 	lsl.w	r2, r0, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	635a      	str	r2, [r3, #52]	; 0x34
 80029da:	e04c      	b.n	8002a76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	2b0c      	cmp	r3, #12
 80029e2:	d824      	bhi.n	8002a2e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	4613      	mov	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4413      	add	r3, r2
 80029f4:	3b23      	subs	r3, #35	; 0x23
 80029f6:	221f      	movs	r2, #31
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	43da      	mvns	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	400a      	ands	r2, r1
 8002a04:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	4618      	mov	r0, r3
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685a      	ldr	r2, [r3, #4]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4413      	add	r3, r2
 8002a1e:	3b23      	subs	r3, #35	; 0x23
 8002a20:	fa00 f203 	lsl.w	r2, r0, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	631a      	str	r2, [r3, #48]	; 0x30
 8002a2c:	e023      	b.n	8002a76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4413      	add	r3, r2
 8002a3e:	3b41      	subs	r3, #65	; 0x41
 8002a40:	221f      	movs	r2, #31
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	43da      	mvns	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	400a      	ands	r2, r1
 8002a4e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	4613      	mov	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4413      	add	r3, r2
 8002a68:	3b41      	subs	r3, #65	; 0x41
 8002a6a:	fa00 f203 	lsl.w	r2, r0, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a76:	4b29      	ldr	r3, [pc, #164]	; (8002b1c <HAL_ADC_ConfigChannel+0x250>)
 8002a78:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a28      	ldr	r2, [pc, #160]	; (8002b20 <HAL_ADC_ConfigChannel+0x254>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d10f      	bne.n	8002aa4 <HAL_ADC_ConfigChannel+0x1d8>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2b12      	cmp	r3, #18
 8002a8a:	d10b      	bne.n	8002aa4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a1d      	ldr	r2, [pc, #116]	; (8002b20 <HAL_ADC_ConfigChannel+0x254>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d12b      	bne.n	8002b06 <HAL_ADC_ConfigChannel+0x23a>
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a1c      	ldr	r2, [pc, #112]	; (8002b24 <HAL_ADC_ConfigChannel+0x258>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d003      	beq.n	8002ac0 <HAL_ADC_ConfigChannel+0x1f4>
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2b11      	cmp	r3, #17
 8002abe:	d122      	bne.n	8002b06 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a11      	ldr	r2, [pc, #68]	; (8002b24 <HAL_ADC_ConfigChannel+0x258>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d111      	bne.n	8002b06 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ae2:	4b11      	ldr	r3, [pc, #68]	; (8002b28 <HAL_ADC_ConfigChannel+0x25c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a11      	ldr	r2, [pc, #68]	; (8002b2c <HAL_ADC_ConfigChannel+0x260>)
 8002ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8002aec:	0c9a      	lsrs	r2, r3, #18
 8002aee:	4613      	mov	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002af8:	e002      	b.n	8002b00 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	3b01      	subs	r3, #1
 8002afe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1f9      	bne.n	8002afa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3714      	adds	r7, #20
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	40012300 	.word	0x40012300
 8002b20:	40012000 	.word	0x40012000
 8002b24:	10000012 	.word	0x10000012
 8002b28:	20000068 	.word	0x20000068
 8002b2c:	431bde83 	.word	0x431bde83

08002b30 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b38:	4b79      	ldr	r3, [pc, #484]	; (8002d20 <ADC_Init+0x1f0>)
 8002b3a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	431a      	orrs	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6859      	ldr	r1, [r3, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	021a      	lsls	r2, r3, #8
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	430a      	orrs	r2, r1
 8002b78:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002b88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	6859      	ldr	r1, [r3, #4]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689a      	ldr	r2, [r3, #8]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002baa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6899      	ldr	r1, [r3, #8]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68da      	ldr	r2, [r3, #12]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc2:	4a58      	ldr	r2, [pc, #352]	; (8002d24 <ADC_Init+0x1f4>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d022      	beq.n	8002c0e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bd6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6899      	ldr	r1, [r3, #8]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002bf8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6899      	ldr	r1, [r3, #8]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	e00f      	b.n	8002c2e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c2c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0202 	bic.w	r2, r2, #2
 8002c3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6899      	ldr	r1, [r3, #8]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	7e1b      	ldrb	r3, [r3, #24]
 8002c48:	005a      	lsls	r2, r3, #1
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d01b      	beq.n	8002c94 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c6a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002c7a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6859      	ldr	r1, [r3, #4]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c86:	3b01      	subs	r3, #1
 8002c88:	035a      	lsls	r2, r3, #13
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	605a      	str	r2, [r3, #4]
 8002c92:	e007      	b.n	8002ca4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ca2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002cb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	051a      	lsls	r2, r3, #20
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002cd8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6899      	ldr	r1, [r3, #8]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ce6:	025a      	lsls	r2, r3, #9
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689a      	ldr	r2, [r3, #8]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cfe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6899      	ldr	r1, [r3, #8]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	029a      	lsls	r2, r3, #10
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	430a      	orrs	r2, r1
 8002d12:	609a      	str	r2, [r3, #8]
}
 8002d14:	bf00      	nop
 8002d16:	3714      	adds	r7, #20
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	40012300 	.word	0x40012300
 8002d24:	0f000001 	.word	0x0f000001

08002d28 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d4c:	4b0c      	ldr	r3, [pc, #48]	; (8002d80 <__NVIC_SetPriorityGrouping+0x44>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d58:	4013      	ands	r3, r2
 8002d5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d6e:	4a04      	ldr	r2, [pc, #16]	; (8002d80 <__NVIC_SetPriorityGrouping+0x44>)
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	60d3      	str	r3, [r2, #12]
}
 8002d74:	bf00      	nop
 8002d76:	3714      	adds	r7, #20
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	e000ed00 	.word	0xe000ed00

08002d84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d88:	4b04      	ldr	r3, [pc, #16]	; (8002d9c <__NVIC_GetPriorityGrouping+0x18>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	0a1b      	lsrs	r3, r3, #8
 8002d8e:	f003 0307 	and.w	r3, r3, #7
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr
 8002d9c:	e000ed00 	.word	0xe000ed00

08002da0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	4603      	mov	r3, r0
 8002da8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	db0b      	blt.n	8002dca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002db2:	79fb      	ldrb	r3, [r7, #7]
 8002db4:	f003 021f 	and.w	r2, r3, #31
 8002db8:	4907      	ldr	r1, [pc, #28]	; (8002dd8 <__NVIC_EnableIRQ+0x38>)
 8002dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dbe:	095b      	lsrs	r3, r3, #5
 8002dc0:	2001      	movs	r0, #1
 8002dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8002dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	e000e100 	.word	0xe000e100

08002ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	4603      	mov	r3, r0
 8002de4:	6039      	str	r1, [r7, #0]
 8002de6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	db0a      	blt.n	8002e06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	490c      	ldr	r1, [pc, #48]	; (8002e28 <__NVIC_SetPriority+0x4c>)
 8002df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfa:	0112      	lsls	r2, r2, #4
 8002dfc:	b2d2      	uxtb	r2, r2
 8002dfe:	440b      	add	r3, r1
 8002e00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e04:	e00a      	b.n	8002e1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	b2da      	uxtb	r2, r3
 8002e0a:	4908      	ldr	r1, [pc, #32]	; (8002e2c <__NVIC_SetPriority+0x50>)
 8002e0c:	79fb      	ldrb	r3, [r7, #7]
 8002e0e:	f003 030f 	and.w	r3, r3, #15
 8002e12:	3b04      	subs	r3, #4
 8002e14:	0112      	lsls	r2, r2, #4
 8002e16:	b2d2      	uxtb	r2, r2
 8002e18:	440b      	add	r3, r1
 8002e1a:	761a      	strb	r2, [r3, #24]
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	e000e100 	.word	0xe000e100
 8002e2c:	e000ed00 	.word	0xe000ed00

08002e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b089      	sub	sp, #36	; 0x24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f003 0307 	and.w	r3, r3, #7
 8002e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	f1c3 0307 	rsb	r3, r3, #7
 8002e4a:	2b04      	cmp	r3, #4
 8002e4c:	bf28      	it	cs
 8002e4e:	2304      	movcs	r3, #4
 8002e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	3304      	adds	r3, #4
 8002e56:	2b06      	cmp	r3, #6
 8002e58:	d902      	bls.n	8002e60 <NVIC_EncodePriority+0x30>
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	3b03      	subs	r3, #3
 8002e5e:	e000      	b.n	8002e62 <NVIC_EncodePriority+0x32>
 8002e60:	2300      	movs	r3, #0
 8002e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e64:	f04f 32ff 	mov.w	r2, #4294967295
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6e:	43da      	mvns	r2, r3
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	401a      	ands	r2, r3
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e78:	f04f 31ff 	mov.w	r1, #4294967295
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e82:	43d9      	mvns	r1, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e88:	4313      	orrs	r3, r2
         );
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3724      	adds	r7, #36	; 0x24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b082      	sub	sp, #8
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7ff ff4c 	bl	8002d3c <__NVIC_SetPriorityGrouping>
}
 8002ea4:	bf00      	nop
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
 8002eb8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ebe:	f7ff ff61 	bl	8002d84 <__NVIC_GetPriorityGrouping>
 8002ec2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	68b9      	ldr	r1, [r7, #8]
 8002ec8:	6978      	ldr	r0, [r7, #20]
 8002eca:	f7ff ffb1 	bl	8002e30 <NVIC_EncodePriority>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ed4:	4611      	mov	r1, r2
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff ff80 	bl	8002ddc <__NVIC_SetPriority>
}
 8002edc:	bf00      	nop
 8002ede:	3718      	adds	r7, #24
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4603      	mov	r3, r0
 8002eec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7ff ff54 	bl	8002da0 <__NVIC_EnableIRQ>
}
 8002ef8:	bf00      	nop
 8002efa:	3708      	adds	r7, #8
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f0c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f0e:	f7ff fa1d 	bl	800234c <HAL_GetTick>
 8002f12:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d008      	beq.n	8002f32 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2280      	movs	r2, #128	; 0x80
 8002f24:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e052      	b.n	8002fd8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 0216 	bic.w	r2, r2, #22
 8002f40:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	695a      	ldr	r2, [r3, #20]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f50:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d103      	bne.n	8002f62 <HAL_DMA_Abort+0x62>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d007      	beq.n	8002f72 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 0208 	bic.w	r2, r2, #8
 8002f70:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 0201 	bic.w	r2, r2, #1
 8002f80:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f82:	e013      	b.n	8002fac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f84:	f7ff f9e2 	bl	800234c <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b05      	cmp	r3, #5
 8002f90:	d90c      	bls.n	8002fac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2220      	movs	r2, #32
 8002f96:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2203      	movs	r2, #3
 8002f9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e015      	b.n	8002fd8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1e4      	bne.n	8002f84 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fbe:	223f      	movs	r2, #63	; 0x3f
 8002fc0:	409a      	lsls	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3710      	adds	r7, #16
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d004      	beq.n	8002ffe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2280      	movs	r2, #128	; 0x80
 8002ff8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e00c      	b.n	8003018 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2205      	movs	r2, #5
 8003002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 0201 	bic.w	r2, r2, #1
 8003014:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e06c      	b.n	8003110 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800303c:	2b00      	cmp	r3, #0
 800303e:	d106      	bne.n	800304e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2223      	movs	r2, #35	; 0x23
 8003044:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f7fe fe19 	bl	8001c80 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800304e:	2300      	movs	r3, #0
 8003050:	60bb      	str	r3, [r7, #8]
 8003052:	4b31      	ldr	r3, [pc, #196]	; (8003118 <HAL_ETH_Init+0xf4>)
 8003054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003056:	4a30      	ldr	r2, [pc, #192]	; (8003118 <HAL_ETH_Init+0xf4>)
 8003058:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800305c:	6453      	str	r3, [r2, #68]	; 0x44
 800305e:	4b2e      	ldr	r3, [pc, #184]	; (8003118 <HAL_ETH_Init+0xf4>)
 8003060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003062:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003066:	60bb      	str	r3, [r7, #8]
 8003068:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800306a:	4b2c      	ldr	r3, [pc, #176]	; (800311c <HAL_ETH_Init+0xf8>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	4a2b      	ldr	r2, [pc, #172]	; (800311c <HAL_ETH_Init+0xf8>)
 8003070:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003074:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003076:	4b29      	ldr	r3, [pc, #164]	; (800311c <HAL_ETH_Init+0xf8>)
 8003078:	685a      	ldr	r2, [r3, #4]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	4927      	ldr	r1, [pc, #156]	; (800311c <HAL_ETH_Init+0xf8>)
 8003080:	4313      	orrs	r3, r2
 8003082:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003084:	4b25      	ldr	r3, [pc, #148]	; (800311c <HAL_ETH_Init+0xf8>)
 8003086:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	6812      	ldr	r2, [r2, #0]
 8003096:	f043 0301 	orr.w	r3, r3, #1
 800309a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800309e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030a0:	f7ff f954 	bl	800234c <HAL_GetTick>
 80030a4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80030a6:	e011      	b.n	80030cc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80030a8:	f7ff f950 	bl	800234c <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80030b6:	d909      	bls.n	80030cc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2204      	movs	r2, #4
 80030bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	22e0      	movs	r2, #224	; 0xe0
 80030c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e021      	b.n	8003110 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1e4      	bne.n	80030a8 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 f958 	bl	8003394 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 f9ff 	bl	80034e8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 fa55 	bl	800359a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	461a      	mov	r2, r3
 80030f6:	2100      	movs	r1, #0
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 f9bd 	bl	8003478 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2210      	movs	r2, #16
 800310a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40023800 	.word	0x40023800
 800311c:	40013800 	.word	0x40013800

08003120 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	4b51      	ldr	r3, [pc, #324]	; (800327c <ETH_SetMACConfig+0x15c>)
 8003136:	4013      	ands	r3, r2
 8003138:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	7c1b      	ldrb	r3, [r3, #16]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d102      	bne.n	8003148 <ETH_SetMACConfig+0x28>
 8003142:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003146:	e000      	b.n	800314a <ETH_SetMACConfig+0x2a>
 8003148:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	7c5b      	ldrb	r3, [r3, #17]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d102      	bne.n	8003158 <ETH_SetMACConfig+0x38>
 8003152:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003156:	e000      	b.n	800315a <ETH_SetMACConfig+0x3a>
 8003158:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800315a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003160:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	7fdb      	ldrb	r3, [r3, #31]
 8003166:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003168:	431a      	orrs	r2, r3
                        macconf->Speed |
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800316e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	7f92      	ldrb	r2, [r2, #30]
 8003174:	2a00      	cmp	r2, #0
 8003176:	d102      	bne.n	800317e <ETH_SetMACConfig+0x5e>
 8003178:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800317c:	e000      	b.n	8003180 <ETH_SetMACConfig+0x60>
 800317e:	2200      	movs	r2, #0
                        macconf->Speed |
 8003180:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	7f1b      	ldrb	r3, [r3, #28]
 8003186:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003188:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800318e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	791b      	ldrb	r3, [r3, #4]
 8003194:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003196:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800319e:	2a00      	cmp	r2, #0
 80031a0:	d102      	bne.n	80031a8 <ETH_SetMACConfig+0x88>
 80031a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031a6:	e000      	b.n	80031aa <ETH_SetMACConfig+0x8a>
 80031a8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80031aa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	7bdb      	ldrb	r3, [r3, #15]
 80031b0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80031b2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80031b8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80031c0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80031c2:	4313      	orrs	r3, r2
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80031da:	2001      	movs	r0, #1
 80031dc:	f7ff f8c2 	bl	8002364 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80031f6:	4013      	ands	r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031fe:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003206:	2a00      	cmp	r2, #0
 8003208:	d101      	bne.n	800320e <ETH_SetMACConfig+0xee>
 800320a:	2280      	movs	r2, #128	; 0x80
 800320c:	e000      	b.n	8003210 <ETH_SetMACConfig+0xf0>
 800320e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003210:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003216:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800321e:	2a01      	cmp	r2, #1
 8003220:	d101      	bne.n	8003226 <ETH_SetMACConfig+0x106>
 8003222:	2208      	movs	r2, #8
 8003224:	e000      	b.n	8003228 <ETH_SetMACConfig+0x108>
 8003226:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003228:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003230:	2a01      	cmp	r2, #1
 8003232:	d101      	bne.n	8003238 <ETH_SetMACConfig+0x118>
 8003234:	2204      	movs	r2, #4
 8003236:	e000      	b.n	800323a <ETH_SetMACConfig+0x11a>
 8003238:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800323a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003242:	2a01      	cmp	r2, #1
 8003244:	d101      	bne.n	800324a <ETH_SetMACConfig+0x12a>
 8003246:	2202      	movs	r2, #2
 8003248:	e000      	b.n	800324c <ETH_SetMACConfig+0x12c>
 800324a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800324c:	4313      	orrs	r3, r2
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	4313      	orrs	r3, r2
 8003252:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003264:	2001      	movs	r0, #1
 8003266:	f7ff f87d 	bl	8002364 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	619a      	str	r2, [r3, #24]
}
 8003272:	bf00      	nop
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	ff20810f 	.word	0xff20810f

08003280 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	4b3d      	ldr	r3, [pc, #244]	; (8003390 <ETH_SetDMAConfig+0x110>)
 800329a:	4013      	ands	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	7b1b      	ldrb	r3, [r3, #12]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d102      	bne.n	80032ac <ETH_SetDMAConfig+0x2c>
 80032a6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80032aa:	e000      	b.n	80032ae <ETH_SetDMAConfig+0x2e>
 80032ac:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	7b5b      	ldrb	r3, [r3, #13]
 80032b2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80032b4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	7f52      	ldrb	r2, [r2, #29]
 80032ba:	2a00      	cmp	r2, #0
 80032bc:	d102      	bne.n	80032c4 <ETH_SetDMAConfig+0x44>
 80032be:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80032c2:	e000      	b.n	80032c6 <ETH_SetDMAConfig+0x46>
 80032c4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80032c6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	7b9b      	ldrb	r3, [r3, #14]
 80032cc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80032ce:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80032d4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	7f1b      	ldrb	r3, [r3, #28]
 80032da:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80032dc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	7f9b      	ldrb	r3, [r3, #30]
 80032e2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80032e4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80032ea:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032f2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80032f4:	4313      	orrs	r3, r2
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003304:	461a      	mov	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003316:	2001      	movs	r0, #1
 8003318:	f7ff f824 	bl	8002364 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003324:	461a      	mov	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	791b      	ldrb	r3, [r3, #4]
 800332e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003334:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800333a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003340:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003348:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800334a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003350:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003352:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003358:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	6812      	ldr	r2, [r2, #0]
 800335e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003362:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003366:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003374:	2001      	movs	r0, #1
 8003376:	f7fe fff5 	bl	8002364 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003382:	461a      	mov	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6013      	str	r3, [r2, #0]
}
 8003388:	bf00      	nop
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	f8de3f23 	.word	0xf8de3f23

08003394 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b0a6      	sub	sp, #152	; 0x98
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800339c:	2301      	movs	r3, #1
 800339e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80033a2:	2301      	movs	r3, #1
 80033a4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80033a8:	2300      	movs	r3, #0
 80033aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80033ac:	2300      	movs	r3, #0
 80033ae:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80033b2:	2301      	movs	r3, #1
 80033b4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80033b8:	2300      	movs	r3, #0
 80033ba:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80033be:	2301      	movs	r3, #1
 80033c0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80033c4:	2300      	movs	r3, #0
 80033c6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80033ca:	2300      	movs	r3, #0
 80033cc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80033d0:	2300      	movs	r3, #0
 80033d2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80033d4:	2300      	movs	r3, #0
 80033d6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80033da:	2300      	movs	r3, #0
 80033dc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80033de:	2300      	movs	r3, #0
 80033e0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80033e4:	2300      	movs	r3, #0
 80033e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80033ea:	2300      	movs	r3, #0
 80033ec:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80033f0:	2300      	movs	r3, #0
 80033f2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80033f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80033fa:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80033fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003400:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003402:	2300      	movs	r3, #0
 8003404:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003408:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800340c:	4619      	mov	r1, r3
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7ff fe86 	bl	8003120 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003414:	2301      	movs	r3, #1
 8003416:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003418:	2301      	movs	r3, #1
 800341a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800341c:	2301      	movs	r3, #1
 800341e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003422:	2301      	movs	r3, #1
 8003424:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003426:	2300      	movs	r3, #0
 8003428:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800342a:	2300      	movs	r3, #0
 800342c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003430:	2300      	movs	r3, #0
 8003432:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003436:	2300      	movs	r3, #0
 8003438:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800343a:	2301      	movs	r3, #1
 800343c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003440:	2301      	movs	r3, #1
 8003442:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003444:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003448:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800344a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800344e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003450:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003454:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003456:	2301      	movs	r3, #1
 8003458:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800345c:	2300      	movs	r3, #0
 800345e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003460:	2300      	movs	r3, #0
 8003462:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003464:	f107 0308 	add.w	r3, r7, #8
 8003468:	4619      	mov	r1, r3
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7ff ff08 	bl	8003280 <ETH_SetDMAConfig>
}
 8003470:	bf00      	nop
 8003472:	3798      	adds	r7, #152	; 0x98
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003478:	b480      	push	{r7}
 800347a:	b087      	sub	sp, #28
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3305      	adds	r3, #5
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	021b      	lsls	r3, r3, #8
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	3204      	adds	r2, #4
 8003490:	7812      	ldrb	r2, [r2, #0]
 8003492:	4313      	orrs	r3, r2
 8003494:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003496:	68ba      	ldr	r2, [r7, #8]
 8003498:	4b11      	ldr	r3, [pc, #68]	; (80034e0 <ETH_MACAddressConfig+0x68>)
 800349a:	4413      	add	r3, r2
 800349c:	461a      	mov	r2, r3
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	3303      	adds	r3, #3
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	061a      	lsls	r2, r3, #24
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	3302      	adds	r3, #2
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	041b      	lsls	r3, r3, #16
 80034b2:	431a      	orrs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3301      	adds	r3, #1
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	021b      	lsls	r3, r3, #8
 80034bc:	4313      	orrs	r3, r2
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	7812      	ldrb	r2, [r2, #0]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	4b06      	ldr	r3, [pc, #24]	; (80034e4 <ETH_MACAddressConfig+0x6c>)
 80034ca:	4413      	add	r3, r2
 80034cc:	461a      	mov	r2, r3
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	6013      	str	r3, [r2, #0]
}
 80034d2:	bf00      	nop
 80034d4:	371c      	adds	r7, #28
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	40028040 	.word	0x40028040
 80034e4:	40028044 	.word	0x40028044

080034e8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80034f0:	2300      	movs	r3, #0
 80034f2:	60fb      	str	r3, [r7, #12]
 80034f4:	e03e      	b.n	8003574 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68d9      	ldr	r1, [r3, #12]
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	4613      	mov	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4413      	add	r3, r2
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	440b      	add	r3, r1
 8003506:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	2200      	movs	r2, #0
 800350c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	2200      	movs	r2, #0
 8003512:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	2200      	movs	r2, #0
 8003518:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	2200      	movs	r2, #0
 800351e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003520:	68b9      	ldr	r1, [r7, #8]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	3206      	adds	r2, #6
 8003528:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2b02      	cmp	r3, #2
 800353c:	d80c      	bhi.n	8003558 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68d9      	ldr	r1, [r3, #12]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	1c5a      	adds	r2, r3, #1
 8003546:	4613      	mov	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	4413      	add	r3, r2
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	440b      	add	r3, r1
 8003550:	461a      	mov	r2, r3
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	60da      	str	r2, [r3, #12]
 8003556:	e004      	b.n	8003562 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	461a      	mov	r2, r3
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	3301      	adds	r3, #1
 8003572:	60fb      	str	r3, [r7, #12]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2b03      	cmp	r3, #3
 8003578:	d9bd      	bls.n	80034f6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	68da      	ldr	r2, [r3, #12]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800358c:	611a      	str	r2, [r3, #16]
}
 800358e:	bf00      	nop
 8003590:	3714      	adds	r7, #20
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800359a:	b480      	push	{r7}
 800359c:	b085      	sub	sp, #20
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80035a2:	2300      	movs	r3, #0
 80035a4:	60fb      	str	r3, [r7, #12]
 80035a6:	e046      	b.n	8003636 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6919      	ldr	r1, [r3, #16]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	4613      	mov	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4413      	add	r3, r2
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	440b      	add	r3, r1
 80035b8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	2200      	movs	r2, #0
 80035be:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	2200      	movs	r2, #0
 80035c4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	2200      	movs	r2, #0
 80035ca:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	2200      	movs	r2, #0
 80035d0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	2200      	movs	r2, #0
 80035d6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2200      	movs	r2, #0
 80035dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80035e4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80035ec:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80035fa:	68b9      	ldr	r1, [r7, #8]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	3212      	adds	r2, #18
 8003602:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2b02      	cmp	r3, #2
 800360a:	d80c      	bhi.n	8003626 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6919      	ldr	r1, [r3, #16]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	1c5a      	adds	r2, r3, #1
 8003614:	4613      	mov	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	440b      	add	r3, r1
 800361e:	461a      	mov	r2, r3
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	60da      	str	r2, [r3, #12]
 8003624:	e004      	b.n	8003630 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	461a      	mov	r2, r3
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	3301      	adds	r3, #1
 8003634:	60fb      	str	r3, [r7, #12]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2b03      	cmp	r3, #3
 800363a:	d9b5      	bls.n	80035a8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	691a      	ldr	r2, [r3, #16]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003666:	60da      	str	r2, [r3, #12]
}
 8003668:	bf00      	nop
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003674:	b480      	push	{r7}
 8003676:	b089      	sub	sp, #36	; 0x24
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800367e:	2300      	movs	r3, #0
 8003680:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003682:	2300      	movs	r3, #0
 8003684:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003686:	2300      	movs	r3, #0
 8003688:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800368a:	2300      	movs	r3, #0
 800368c:	61fb      	str	r3, [r7, #28]
 800368e:	e177      	b.n	8003980 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003690:	2201      	movs	r2, #1
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	fa02 f303 	lsl.w	r3, r2, r3
 8003698:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	4013      	ands	r3, r2
 80036a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	f040 8166 	bne.w	800397a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f003 0303 	and.w	r3, r3, #3
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d005      	beq.n	80036c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d130      	bne.n	8003728 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	2203      	movs	r2, #3
 80036d2:	fa02 f303 	lsl.w	r3, r2, r3
 80036d6:	43db      	mvns	r3, r3
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	4013      	ands	r3, r2
 80036dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	68da      	ldr	r2, [r3, #12]
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	005b      	lsls	r3, r3, #1
 80036e6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036fc:	2201      	movs	r2, #1
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	43db      	mvns	r3, r3
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	4013      	ands	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	091b      	lsrs	r3, r3, #4
 8003712:	f003 0201 	and.w	r2, r3, #1
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	4313      	orrs	r3, r2
 8003720:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f003 0303 	and.w	r3, r3, #3
 8003730:	2b03      	cmp	r3, #3
 8003732:	d017      	beq.n	8003764 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	2203      	movs	r2, #3
 8003740:	fa02 f303 	lsl.w	r3, r2, r3
 8003744:	43db      	mvns	r3, r3
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	4013      	ands	r3, r2
 800374a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	689a      	ldr	r2, [r3, #8]
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	4313      	orrs	r3, r2
 800375c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f003 0303 	and.w	r3, r3, #3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d123      	bne.n	80037b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	08da      	lsrs	r2, r3, #3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	3208      	adds	r2, #8
 8003778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800377c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	f003 0307 	and.w	r3, r3, #7
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	220f      	movs	r2, #15
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	43db      	mvns	r3, r3
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	4013      	ands	r3, r2
 8003792:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	691a      	ldr	r2, [r3, #16]
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	f003 0307 	and.w	r3, r3, #7
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	08da      	lsrs	r2, r3, #3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	3208      	adds	r2, #8
 80037b2:	69b9      	ldr	r1, [r7, #24]
 80037b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	2203      	movs	r2, #3
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	43db      	mvns	r3, r3
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	4013      	ands	r3, r2
 80037ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f003 0203 	and.w	r2, r3, #3
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	fa02 f303 	lsl.w	r3, r2, r3
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 80c0 	beq.w	800397a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037fa:	2300      	movs	r3, #0
 80037fc:	60fb      	str	r3, [r7, #12]
 80037fe:	4b66      	ldr	r3, [pc, #408]	; (8003998 <HAL_GPIO_Init+0x324>)
 8003800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003802:	4a65      	ldr	r2, [pc, #404]	; (8003998 <HAL_GPIO_Init+0x324>)
 8003804:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003808:	6453      	str	r3, [r2, #68]	; 0x44
 800380a:	4b63      	ldr	r3, [pc, #396]	; (8003998 <HAL_GPIO_Init+0x324>)
 800380c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003812:	60fb      	str	r3, [r7, #12]
 8003814:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003816:	4a61      	ldr	r2, [pc, #388]	; (800399c <HAL_GPIO_Init+0x328>)
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	089b      	lsrs	r3, r3, #2
 800381c:	3302      	adds	r3, #2
 800381e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003822:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	f003 0303 	and.w	r3, r3, #3
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	220f      	movs	r2, #15
 800382e:	fa02 f303 	lsl.w	r3, r2, r3
 8003832:	43db      	mvns	r3, r3
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	4013      	ands	r3, r2
 8003838:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a58      	ldr	r2, [pc, #352]	; (80039a0 <HAL_GPIO_Init+0x32c>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d037      	beq.n	80038b2 <HAL_GPIO_Init+0x23e>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a57      	ldr	r2, [pc, #348]	; (80039a4 <HAL_GPIO_Init+0x330>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d031      	beq.n	80038ae <HAL_GPIO_Init+0x23a>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a56      	ldr	r2, [pc, #344]	; (80039a8 <HAL_GPIO_Init+0x334>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d02b      	beq.n	80038aa <HAL_GPIO_Init+0x236>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a55      	ldr	r2, [pc, #340]	; (80039ac <HAL_GPIO_Init+0x338>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d025      	beq.n	80038a6 <HAL_GPIO_Init+0x232>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a54      	ldr	r2, [pc, #336]	; (80039b0 <HAL_GPIO_Init+0x33c>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d01f      	beq.n	80038a2 <HAL_GPIO_Init+0x22e>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a53      	ldr	r2, [pc, #332]	; (80039b4 <HAL_GPIO_Init+0x340>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d019      	beq.n	800389e <HAL_GPIO_Init+0x22a>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a52      	ldr	r2, [pc, #328]	; (80039b8 <HAL_GPIO_Init+0x344>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d013      	beq.n	800389a <HAL_GPIO_Init+0x226>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a51      	ldr	r2, [pc, #324]	; (80039bc <HAL_GPIO_Init+0x348>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d00d      	beq.n	8003896 <HAL_GPIO_Init+0x222>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a50      	ldr	r2, [pc, #320]	; (80039c0 <HAL_GPIO_Init+0x34c>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d007      	beq.n	8003892 <HAL_GPIO_Init+0x21e>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a4f      	ldr	r2, [pc, #316]	; (80039c4 <HAL_GPIO_Init+0x350>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d101      	bne.n	800388e <HAL_GPIO_Init+0x21a>
 800388a:	2309      	movs	r3, #9
 800388c:	e012      	b.n	80038b4 <HAL_GPIO_Init+0x240>
 800388e:	230a      	movs	r3, #10
 8003890:	e010      	b.n	80038b4 <HAL_GPIO_Init+0x240>
 8003892:	2308      	movs	r3, #8
 8003894:	e00e      	b.n	80038b4 <HAL_GPIO_Init+0x240>
 8003896:	2307      	movs	r3, #7
 8003898:	e00c      	b.n	80038b4 <HAL_GPIO_Init+0x240>
 800389a:	2306      	movs	r3, #6
 800389c:	e00a      	b.n	80038b4 <HAL_GPIO_Init+0x240>
 800389e:	2305      	movs	r3, #5
 80038a0:	e008      	b.n	80038b4 <HAL_GPIO_Init+0x240>
 80038a2:	2304      	movs	r3, #4
 80038a4:	e006      	b.n	80038b4 <HAL_GPIO_Init+0x240>
 80038a6:	2303      	movs	r3, #3
 80038a8:	e004      	b.n	80038b4 <HAL_GPIO_Init+0x240>
 80038aa:	2302      	movs	r3, #2
 80038ac:	e002      	b.n	80038b4 <HAL_GPIO_Init+0x240>
 80038ae:	2301      	movs	r3, #1
 80038b0:	e000      	b.n	80038b4 <HAL_GPIO_Init+0x240>
 80038b2:	2300      	movs	r3, #0
 80038b4:	69fa      	ldr	r2, [r7, #28]
 80038b6:	f002 0203 	and.w	r2, r2, #3
 80038ba:	0092      	lsls	r2, r2, #2
 80038bc:	4093      	lsls	r3, r2
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038c4:	4935      	ldr	r1, [pc, #212]	; (800399c <HAL_GPIO_Init+0x328>)
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	089b      	lsrs	r3, r3, #2
 80038ca:	3302      	adds	r3, #2
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038d2:	4b3d      	ldr	r3, [pc, #244]	; (80039c8 <HAL_GPIO_Init+0x354>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	43db      	mvns	r3, r3
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	4013      	ands	r3, r2
 80038e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d003      	beq.n	80038f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038f6:	4a34      	ldr	r2, [pc, #208]	; (80039c8 <HAL_GPIO_Init+0x354>)
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038fc:	4b32      	ldr	r3, [pc, #200]	; (80039c8 <HAL_GPIO_Init+0x354>)
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	43db      	mvns	r3, r3
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	4013      	ands	r3, r2
 800390a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	4313      	orrs	r3, r2
 800391e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003920:	4a29      	ldr	r2, [pc, #164]	; (80039c8 <HAL_GPIO_Init+0x354>)
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003926:	4b28      	ldr	r3, [pc, #160]	; (80039c8 <HAL_GPIO_Init+0x354>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	43db      	mvns	r3, r3
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	4013      	ands	r3, r2
 8003934:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	4313      	orrs	r3, r2
 8003948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800394a:	4a1f      	ldr	r2, [pc, #124]	; (80039c8 <HAL_GPIO_Init+0x354>)
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003950:	4b1d      	ldr	r3, [pc, #116]	; (80039c8 <HAL_GPIO_Init+0x354>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	43db      	mvns	r3, r3
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	4013      	ands	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d003      	beq.n	8003974 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	4313      	orrs	r3, r2
 8003972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003974:	4a14      	ldr	r2, [pc, #80]	; (80039c8 <HAL_GPIO_Init+0x354>)
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	3301      	adds	r3, #1
 800397e:	61fb      	str	r3, [r7, #28]
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	2b0f      	cmp	r3, #15
 8003984:	f67f ae84 	bls.w	8003690 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003988:	bf00      	nop
 800398a:	bf00      	nop
 800398c:	3724      	adds	r7, #36	; 0x24
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	40023800 	.word	0x40023800
 800399c:	40013800 	.word	0x40013800
 80039a0:	40020000 	.word	0x40020000
 80039a4:	40020400 	.word	0x40020400
 80039a8:	40020800 	.word	0x40020800
 80039ac:	40020c00 	.word	0x40020c00
 80039b0:	40021000 	.word	0x40021000
 80039b4:	40021400 	.word	0x40021400
 80039b8:	40021800 	.word	0x40021800
 80039bc:	40021c00 	.word	0x40021c00
 80039c0:	40022000 	.word	0x40022000
 80039c4:	40022400 	.word	0x40022400
 80039c8:	40013c00 	.word	0x40013c00

080039cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	460b      	mov	r3, r1
 80039d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	691a      	ldr	r2, [r3, #16]
 80039dc:	887b      	ldrh	r3, [r7, #2]
 80039de:	4013      	ands	r3, r2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d002      	beq.n	80039ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80039e4:	2301      	movs	r3, #1
 80039e6:	73fb      	strb	r3, [r7, #15]
 80039e8:	e001      	b.n	80039ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80039ea:	2300      	movs	r3, #0
 80039ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80039ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3714      	adds	r7, #20
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	460b      	mov	r3, r1
 8003a06:	807b      	strh	r3, [r7, #2]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a0c:	787b      	ldrb	r3, [r7, #1]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a12:	887a      	ldrh	r2, [r7, #2]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a18:	e003      	b.n	8003a22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a1a:	887b      	ldrh	r3, [r7, #2]
 8003a1c:	041a      	lsls	r2, r3, #16
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	619a      	str	r2, [r3, #24]
}
 8003a22:	bf00      	nop
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr

08003a2e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b085      	sub	sp, #20
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
 8003a36:	460b      	mov	r3, r1
 8003a38:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a40:	887a      	ldrh	r2, [r7, #2]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	4013      	ands	r3, r2
 8003a46:	041a      	lsls	r2, r3, #16
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	43d9      	mvns	r1, r3
 8003a4c:	887b      	ldrh	r3, [r7, #2]
 8003a4e:	400b      	ands	r3, r1
 8003a50:	431a      	orrs	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	619a      	str	r2, [r3, #24]
}
 8003a56:	bf00      	nop
 8003a58:	3714      	adds	r7, #20
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
	...

08003a64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003a6e:	4b08      	ldr	r3, [pc, #32]	; (8003a90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a70:	695a      	ldr	r2, [r3, #20]
 8003a72:	88fb      	ldrh	r3, [r7, #6]
 8003a74:	4013      	ands	r3, r2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d006      	beq.n	8003a88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a7a:	4a05      	ldr	r2, [pc, #20]	; (8003a90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a7c:	88fb      	ldrh	r3, [r7, #6]
 8003a7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a80:	88fb      	ldrh	r3, [r7, #6]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fc fe6c 	bl	8000760 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a88:	bf00      	nop
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	40013c00 	.word	0x40013c00

08003a94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e12b      	b.n	8003cfe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d106      	bne.n	8003ac0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7fe f9a6 	bl	8001e0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2224      	movs	r2, #36	; 0x24
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 0201 	bic.w	r2, r2, #1
 8003ad6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ae6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003af6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003af8:	f001 fa20 	bl	8004f3c <HAL_RCC_GetPCLK1Freq>
 8003afc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	4a81      	ldr	r2, [pc, #516]	; (8003d08 <HAL_I2C_Init+0x274>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d807      	bhi.n	8003b18 <HAL_I2C_Init+0x84>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	4a80      	ldr	r2, [pc, #512]	; (8003d0c <HAL_I2C_Init+0x278>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	bf94      	ite	ls
 8003b10:	2301      	movls	r3, #1
 8003b12:	2300      	movhi	r3, #0
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	e006      	b.n	8003b26 <HAL_I2C_Init+0x92>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	4a7d      	ldr	r2, [pc, #500]	; (8003d10 <HAL_I2C_Init+0x27c>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	bf94      	ite	ls
 8003b20:	2301      	movls	r3, #1
 8003b22:	2300      	movhi	r3, #0
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e0e7      	b.n	8003cfe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	4a78      	ldr	r2, [pc, #480]	; (8003d14 <HAL_I2C_Init+0x280>)
 8003b32:	fba2 2303 	umull	r2, r3, r2, r3
 8003b36:	0c9b      	lsrs	r3, r3, #18
 8003b38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68ba      	ldr	r2, [r7, #8]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	4a6a      	ldr	r2, [pc, #424]	; (8003d08 <HAL_I2C_Init+0x274>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d802      	bhi.n	8003b68 <HAL_I2C_Init+0xd4>
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	3301      	adds	r3, #1
 8003b66:	e009      	b.n	8003b7c <HAL_I2C_Init+0xe8>
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b6e:	fb02 f303 	mul.w	r3, r2, r3
 8003b72:	4a69      	ldr	r2, [pc, #420]	; (8003d18 <HAL_I2C_Init+0x284>)
 8003b74:	fba2 2303 	umull	r2, r3, r2, r3
 8003b78:	099b      	lsrs	r3, r3, #6
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	6812      	ldr	r2, [r2, #0]
 8003b80:	430b      	orrs	r3, r1
 8003b82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	495c      	ldr	r1, [pc, #368]	; (8003d08 <HAL_I2C_Init+0x274>)
 8003b98:	428b      	cmp	r3, r1
 8003b9a:	d819      	bhi.n	8003bd0 <HAL_I2C_Init+0x13c>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	1e59      	subs	r1, r3, #1
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003baa:	1c59      	adds	r1, r3, #1
 8003bac:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003bb0:	400b      	ands	r3, r1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00a      	beq.n	8003bcc <HAL_I2C_Init+0x138>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	1e59      	subs	r1, r3, #1
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bca:	e051      	b.n	8003c70 <HAL_I2C_Init+0x1dc>
 8003bcc:	2304      	movs	r3, #4
 8003bce:	e04f      	b.n	8003c70 <HAL_I2C_Init+0x1dc>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d111      	bne.n	8003bfc <HAL_I2C_Init+0x168>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	1e58      	subs	r0, r3, #1
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6859      	ldr	r1, [r3, #4]
 8003be0:	460b      	mov	r3, r1
 8003be2:	005b      	lsls	r3, r3, #1
 8003be4:	440b      	add	r3, r1
 8003be6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bea:	3301      	adds	r3, #1
 8003bec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	bf0c      	ite	eq
 8003bf4:	2301      	moveq	r3, #1
 8003bf6:	2300      	movne	r3, #0
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	e012      	b.n	8003c22 <HAL_I2C_Init+0x18e>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	1e58      	subs	r0, r3, #1
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6859      	ldr	r1, [r3, #4]
 8003c04:	460b      	mov	r3, r1
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	440b      	add	r3, r1
 8003c0a:	0099      	lsls	r1, r3, #2
 8003c0c:	440b      	add	r3, r1
 8003c0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c12:	3301      	adds	r3, #1
 8003c14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	bf0c      	ite	eq
 8003c1c:	2301      	moveq	r3, #1
 8003c1e:	2300      	movne	r3, #0
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <HAL_I2C_Init+0x196>
 8003c26:	2301      	movs	r3, #1
 8003c28:	e022      	b.n	8003c70 <HAL_I2C_Init+0x1dc>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d10e      	bne.n	8003c50 <HAL_I2C_Init+0x1bc>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	1e58      	subs	r0, r3, #1
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6859      	ldr	r1, [r3, #4]
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	440b      	add	r3, r1
 8003c40:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c44:	3301      	adds	r3, #1
 8003c46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c4e:	e00f      	b.n	8003c70 <HAL_I2C_Init+0x1dc>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	1e58      	subs	r0, r3, #1
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6859      	ldr	r1, [r3, #4]
 8003c58:	460b      	mov	r3, r1
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	0099      	lsls	r1, r3, #2
 8003c60:	440b      	add	r3, r1
 8003c62:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c66:	3301      	adds	r3, #1
 8003c68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c70:	6879      	ldr	r1, [r7, #4]
 8003c72:	6809      	ldr	r1, [r1, #0]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	69da      	ldr	r2, [r3, #28]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	430a      	orrs	r2, r1
 8003c92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	6911      	ldr	r1, [r2, #16]
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	68d2      	ldr	r2, [r2, #12]
 8003caa:	4311      	orrs	r1, r2
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	6812      	ldr	r2, [r2, #0]
 8003cb0:	430b      	orrs	r3, r1
 8003cb2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	695a      	ldr	r2, [r3, #20]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f042 0201 	orr.w	r2, r2, #1
 8003cde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2220      	movs	r2, #32
 8003cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	000186a0 	.word	0x000186a0
 8003d0c:	001e847f 	.word	0x001e847f
 8003d10:	003d08ff 	.word	0x003d08ff
 8003d14:	431bde83 	.word	0x431bde83
 8003d18:	10624dd3 	.word	0x10624dd3

08003d1c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b088      	sub	sp, #32
 8003d20:	af02      	add	r7, sp, #8
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	607a      	str	r2, [r7, #4]
 8003d26:	461a      	mov	r2, r3
 8003d28:	460b      	mov	r3, r1
 8003d2a:	817b      	strh	r3, [r7, #10]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d30:	f7fe fb0c 	bl	800234c <HAL_GetTick>
 8003d34:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b20      	cmp	r3, #32
 8003d40:	f040 80e0 	bne.w	8003f04 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	9300      	str	r3, [sp, #0]
 8003d48:	2319      	movs	r3, #25
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	4970      	ldr	r1, [pc, #448]	; (8003f10 <HAL_I2C_Master_Transmit+0x1f4>)
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f000 f964 	bl	800401c <I2C_WaitOnFlagUntilTimeout>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	e0d3      	b.n	8003f06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d101      	bne.n	8003d6c <HAL_I2C_Master_Transmit+0x50>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e0cc      	b.n	8003f06 <HAL_I2C_Master_Transmit+0x1ea>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d007      	beq.n	8003d92 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f042 0201 	orr.w	r2, r2, #1
 8003d90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003da0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2221      	movs	r2, #33	; 0x21
 8003da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2210      	movs	r2, #16
 8003dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	893a      	ldrh	r2, [r7, #8]
 8003dc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc8:	b29a      	uxth	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	4a50      	ldr	r2, [pc, #320]	; (8003f14 <HAL_I2C_Master_Transmit+0x1f8>)
 8003dd2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003dd4:	8979      	ldrh	r1, [r7, #10]
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	6a3a      	ldr	r2, [r7, #32]
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f000 f89c 	bl	8003f18 <I2C_MasterRequestWrite>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e08d      	b.n	8003f06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dea:	2300      	movs	r3, #0
 8003dec:	613b      	str	r3, [r7, #16]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	613b      	str	r3, [r7, #16]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	613b      	str	r3, [r7, #16]
 8003dfe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003e00:	e066      	b.n	8003ed0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	6a39      	ldr	r1, [r7, #32]
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f000 f9de 	bl	80041c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00d      	beq.n	8003e2e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	2b04      	cmp	r3, #4
 8003e18:	d107      	bne.n	8003e2a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e06b      	b.n	8003f06 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	781a      	ldrb	r2, [r3, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3e:	1c5a      	adds	r2, r3, #1
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e56:	3b01      	subs	r3, #1
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	695b      	ldr	r3, [r3, #20]
 8003e64:	f003 0304 	and.w	r3, r3, #4
 8003e68:	2b04      	cmp	r3, #4
 8003e6a:	d11b      	bne.n	8003ea4 <HAL_I2C_Master_Transmit+0x188>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d017      	beq.n	8003ea4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e78:	781a      	ldrb	r2, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e84:	1c5a      	adds	r2, r3, #1
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	3b01      	subs	r3, #1
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	6a39      	ldr	r1, [r7, #32]
 8003ea8:	68f8      	ldr	r0, [r7, #12]
 8003eaa:	f000 f9ce 	bl	800424a <I2C_WaitOnBTFFlagUntilTimeout>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00d      	beq.n	8003ed0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb8:	2b04      	cmp	r3, #4
 8003eba:	d107      	bne.n	8003ecc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e01a      	b.n	8003f06 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d194      	bne.n	8003e02 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ee6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2220      	movs	r2, #32
 8003eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f00:	2300      	movs	r3, #0
 8003f02:	e000      	b.n	8003f06 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003f04:	2302      	movs	r3, #2
  }
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3718      	adds	r7, #24
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	00100002 	.word	0x00100002
 8003f14:	ffff0000 	.word	0xffff0000

08003f18 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b088      	sub	sp, #32
 8003f1c:	af02      	add	r7, sp, #8
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	607a      	str	r2, [r7, #4]
 8003f22:	603b      	str	r3, [r7, #0]
 8003f24:	460b      	mov	r3, r1
 8003f26:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	2b08      	cmp	r3, #8
 8003f32:	d006      	beq.n	8003f42 <I2C_MasterRequestWrite+0x2a>
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d003      	beq.n	8003f42 <I2C_MasterRequestWrite+0x2a>
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f40:	d108      	bne.n	8003f54 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f50:	601a      	str	r2, [r3, #0]
 8003f52:	e00b      	b.n	8003f6c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f58:	2b12      	cmp	r3, #18
 8003f5a:	d107      	bne.n	8003f6c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f6a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	9300      	str	r3, [sp, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	f000 f84f 	bl	800401c <I2C_WaitOnFlagUntilTimeout>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00d      	beq.n	8003fa0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f92:	d103      	bne.n	8003f9c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e035      	b.n	800400c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fa8:	d108      	bne.n	8003fbc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003faa:	897b      	ldrh	r3, [r7, #10]
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	461a      	mov	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003fb8:	611a      	str	r2, [r3, #16]
 8003fba:	e01b      	b.n	8003ff4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003fbc:	897b      	ldrh	r3, [r7, #10]
 8003fbe:	11db      	asrs	r3, r3, #7
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	f003 0306 	and.w	r3, r3, #6
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	f063 030f 	orn	r3, r3, #15
 8003fcc:	b2da      	uxtb	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	490e      	ldr	r1, [pc, #56]	; (8004014 <I2C_MasterRequestWrite+0xfc>)
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f000 f875 	bl	80040ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e010      	b.n	800400c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003fea:	897b      	ldrh	r3, [r7, #10]
 8003fec:	b2da      	uxtb	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	4907      	ldr	r1, [pc, #28]	; (8004018 <I2C_MasterRequestWrite+0x100>)
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f000 f865 	bl	80040ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e000      	b.n	800400c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	3718      	adds	r7, #24
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	00010008 	.word	0x00010008
 8004018:	00010002 	.word	0x00010002

0800401c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	603b      	str	r3, [r7, #0]
 8004028:	4613      	mov	r3, r2
 800402a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800402c:	e025      	b.n	800407a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004034:	d021      	beq.n	800407a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004036:	f7fe f989 	bl	800234c <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	683a      	ldr	r2, [r7, #0]
 8004042:	429a      	cmp	r2, r3
 8004044:	d302      	bcc.n	800404c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d116      	bne.n	800407a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2220      	movs	r2, #32
 8004056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004066:	f043 0220 	orr.w	r2, r3, #32
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e023      	b.n	80040c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	0c1b      	lsrs	r3, r3, #16
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b01      	cmp	r3, #1
 8004082:	d10d      	bne.n	80040a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	43da      	mvns	r2, r3
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	4013      	ands	r3, r2
 8004090:	b29b      	uxth	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	bf0c      	ite	eq
 8004096:	2301      	moveq	r3, #1
 8004098:	2300      	movne	r3, #0
 800409a:	b2db      	uxtb	r3, r3
 800409c:	461a      	mov	r2, r3
 800409e:	e00c      	b.n	80040ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	43da      	mvns	r2, r3
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	4013      	ands	r3, r2
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	bf0c      	ite	eq
 80040b2:	2301      	moveq	r3, #1
 80040b4:	2300      	movne	r3, #0
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	461a      	mov	r2, r3
 80040ba:	79fb      	ldrb	r3, [r7, #7]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d0b6      	beq.n	800402e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b084      	sub	sp, #16
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	60f8      	str	r0, [r7, #12]
 80040d2:	60b9      	str	r1, [r7, #8]
 80040d4:	607a      	str	r2, [r7, #4]
 80040d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040d8:	e051      	b.n	800417e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040e8:	d123      	bne.n	8004132 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004102:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2220      	movs	r2, #32
 800410e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411e:	f043 0204 	orr.w	r2, r3, #4
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e046      	b.n	80041c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004138:	d021      	beq.n	800417e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800413a:	f7fe f907 	bl	800234c <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	429a      	cmp	r2, r3
 8004148:	d302      	bcc.n	8004150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d116      	bne.n	800417e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2220      	movs	r2, #32
 800415a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416a:	f043 0220 	orr.w	r2, r3, #32
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e020      	b.n	80041c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	0c1b      	lsrs	r3, r3, #16
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2b01      	cmp	r3, #1
 8004186:	d10c      	bne.n	80041a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	43da      	mvns	r2, r3
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	4013      	ands	r3, r2
 8004194:	b29b      	uxth	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	bf14      	ite	ne
 800419a:	2301      	movne	r3, #1
 800419c:	2300      	moveq	r3, #0
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	e00b      	b.n	80041ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	43da      	mvns	r2, r3
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	4013      	ands	r3, r2
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	bf14      	ite	ne
 80041b4:	2301      	movne	r3, #1
 80041b6:	2300      	moveq	r3, #0
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d18d      	bne.n	80040da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3710      	adds	r7, #16
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041d4:	e02d      	b.n	8004232 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f000 f878 	bl	80042cc <I2C_IsAcknowledgeFailed>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e02d      	b.n	8004242 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ec:	d021      	beq.n	8004232 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ee:	f7fe f8ad 	bl	800234c <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	68ba      	ldr	r2, [r7, #8]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d302      	bcc.n	8004204 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d116      	bne.n	8004232 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2220      	movs	r2, #32
 800420e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421e:	f043 0220 	orr.w	r2, r3, #32
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e007      	b.n	8004242 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800423c:	2b80      	cmp	r3, #128	; 0x80
 800423e:	d1ca      	bne.n	80041d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800424a:	b580      	push	{r7, lr}
 800424c:	b084      	sub	sp, #16
 800424e:	af00      	add	r7, sp, #0
 8004250:	60f8      	str	r0, [r7, #12]
 8004252:	60b9      	str	r1, [r7, #8]
 8004254:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004256:	e02d      	b.n	80042b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f000 f837 	bl	80042cc <I2C_IsAcknowledgeFailed>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e02d      	b.n	80042c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426e:	d021      	beq.n	80042b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004270:	f7fe f86c 	bl	800234c <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	429a      	cmp	r2, r3
 800427e:	d302      	bcc.n	8004286 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d116      	bne.n	80042b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2220      	movs	r2, #32
 8004290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a0:	f043 0220 	orr.w	r2, r3, #32
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e007      	b.n	80042c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	f003 0304 	and.w	r3, r3, #4
 80042be:	2b04      	cmp	r3, #4
 80042c0:	d1ca      	bne.n	8004258 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3710      	adds	r7, #16
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042e2:	d11b      	bne.n	800431c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2220      	movs	r2, #32
 80042f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004308:	f043 0204 	orr.w	r2, r3, #4
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e000      	b.n	800431e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr

0800432a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800432a:	b480      	push	{r7}
 800432c:	b083      	sub	sp, #12
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
 8004332:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800433a:	b2db      	uxtb	r3, r3
 800433c:	2b20      	cmp	r3, #32
 800433e:	d129      	bne.n	8004394 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2224      	movs	r2, #36	; 0x24
 8004344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 0201 	bic.w	r2, r2, #1
 8004356:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f022 0210 	bic.w	r2, r2, #16
 8004366:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f042 0201 	orr.w	r2, r2, #1
 8004386:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2220      	movs	r2, #32
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004390:	2300      	movs	r3, #0
 8004392:	e000      	b.n	8004396 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004394:	2302      	movs	r3, #2
  }
}
 8004396:	4618      	mov	r0, r3
 8004398:	370c      	adds	r7, #12
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr

080043a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80043a2:	b480      	push	{r7}
 80043a4:	b085      	sub	sp, #20
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
 80043aa:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80043ac:	2300      	movs	r3, #0
 80043ae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	2b20      	cmp	r3, #32
 80043ba:	d12a      	bne.n	8004412 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2224      	movs	r2, #36	; 0x24
 80043c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 0201 	bic.w	r2, r2, #1
 80043d2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043da:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80043dc:	89fb      	ldrh	r3, [r7, #14]
 80043de:	f023 030f 	bic.w	r3, r3, #15
 80043e2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	89fb      	ldrh	r3, [r7, #14]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	89fa      	ldrh	r2, [r7, #14]
 80043f4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f042 0201 	orr.w	r2, r2, #1
 8004404:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2220      	movs	r2, #32
 800440a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800440e:	2300      	movs	r3, #0
 8004410:	e000      	b.n	8004414 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004412:	2302      	movs	r3, #2
  }
}
 8004414:	4618      	mov	r0, r3
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004422:	b08f      	sub	sp, #60	; 0x3c
 8004424:	af0a      	add	r7, sp, #40	; 0x28
 8004426:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e10f      	b.n	8004652 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800443e:	b2db      	uxtb	r3, r3
 8004440:	2b00      	cmp	r3, #0
 8004442:	d106      	bne.n	8004452 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f7fd fd9d 	bl	8001f8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2203      	movs	r2, #3
 8004456:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800445e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004462:	2b00      	cmp	r3, #0
 8004464:	d102      	bne.n	800446c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4618      	mov	r0, r3
 8004472:	f001 ffd6 	bl	8006422 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	603b      	str	r3, [r7, #0]
 800447c:	687e      	ldr	r6, [r7, #4]
 800447e:	466d      	mov	r5, sp
 8004480:	f106 0410 	add.w	r4, r6, #16
 8004484:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004486:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004488:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800448a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800448c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004490:	e885 0003 	stmia.w	r5, {r0, r1}
 8004494:	1d33      	adds	r3, r6, #4
 8004496:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004498:	6838      	ldr	r0, [r7, #0]
 800449a:	f001 ff61 	bl	8006360 <USB_CoreInit>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d005      	beq.n	80044b0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2202      	movs	r2, #2
 80044a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e0d0      	b.n	8004652 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2100      	movs	r1, #0
 80044b6:	4618      	mov	r0, r3
 80044b8:	f001 ffc4 	bl	8006444 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044bc:	2300      	movs	r3, #0
 80044be:	73fb      	strb	r3, [r7, #15]
 80044c0:	e04a      	b.n	8004558 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80044c2:	7bfa      	ldrb	r2, [r7, #15]
 80044c4:	6879      	ldr	r1, [r7, #4]
 80044c6:	4613      	mov	r3, r2
 80044c8:	00db      	lsls	r3, r3, #3
 80044ca:	4413      	add	r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	440b      	add	r3, r1
 80044d0:	333d      	adds	r3, #61	; 0x3d
 80044d2:	2201      	movs	r2, #1
 80044d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80044d6:	7bfa      	ldrb	r2, [r7, #15]
 80044d8:	6879      	ldr	r1, [r7, #4]
 80044da:	4613      	mov	r3, r2
 80044dc:	00db      	lsls	r3, r3, #3
 80044de:	4413      	add	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	440b      	add	r3, r1
 80044e4:	333c      	adds	r3, #60	; 0x3c
 80044e6:	7bfa      	ldrb	r2, [r7, #15]
 80044e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80044ea:	7bfa      	ldrb	r2, [r7, #15]
 80044ec:	7bfb      	ldrb	r3, [r7, #15]
 80044ee:	b298      	uxth	r0, r3
 80044f0:	6879      	ldr	r1, [r7, #4]
 80044f2:	4613      	mov	r3, r2
 80044f4:	00db      	lsls	r3, r3, #3
 80044f6:	4413      	add	r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	440b      	add	r3, r1
 80044fc:	3344      	adds	r3, #68	; 0x44
 80044fe:	4602      	mov	r2, r0
 8004500:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004502:	7bfa      	ldrb	r2, [r7, #15]
 8004504:	6879      	ldr	r1, [r7, #4]
 8004506:	4613      	mov	r3, r2
 8004508:	00db      	lsls	r3, r3, #3
 800450a:	4413      	add	r3, r2
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	440b      	add	r3, r1
 8004510:	3340      	adds	r3, #64	; 0x40
 8004512:	2200      	movs	r2, #0
 8004514:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004516:	7bfa      	ldrb	r2, [r7, #15]
 8004518:	6879      	ldr	r1, [r7, #4]
 800451a:	4613      	mov	r3, r2
 800451c:	00db      	lsls	r3, r3, #3
 800451e:	4413      	add	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	440b      	add	r3, r1
 8004524:	3348      	adds	r3, #72	; 0x48
 8004526:	2200      	movs	r2, #0
 8004528:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800452a:	7bfa      	ldrb	r2, [r7, #15]
 800452c:	6879      	ldr	r1, [r7, #4]
 800452e:	4613      	mov	r3, r2
 8004530:	00db      	lsls	r3, r3, #3
 8004532:	4413      	add	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	440b      	add	r3, r1
 8004538:	334c      	adds	r3, #76	; 0x4c
 800453a:	2200      	movs	r2, #0
 800453c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800453e:	7bfa      	ldrb	r2, [r7, #15]
 8004540:	6879      	ldr	r1, [r7, #4]
 8004542:	4613      	mov	r3, r2
 8004544:	00db      	lsls	r3, r3, #3
 8004546:	4413      	add	r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	440b      	add	r3, r1
 800454c:	3354      	adds	r3, #84	; 0x54
 800454e:	2200      	movs	r2, #0
 8004550:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004552:	7bfb      	ldrb	r3, [r7, #15]
 8004554:	3301      	adds	r3, #1
 8004556:	73fb      	strb	r3, [r7, #15]
 8004558:	7bfa      	ldrb	r2, [r7, #15]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	429a      	cmp	r2, r3
 8004560:	d3af      	bcc.n	80044c2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004562:	2300      	movs	r3, #0
 8004564:	73fb      	strb	r3, [r7, #15]
 8004566:	e044      	b.n	80045f2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004568:	7bfa      	ldrb	r2, [r7, #15]
 800456a:	6879      	ldr	r1, [r7, #4]
 800456c:	4613      	mov	r3, r2
 800456e:	00db      	lsls	r3, r3, #3
 8004570:	4413      	add	r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	440b      	add	r3, r1
 8004576:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800457a:	2200      	movs	r2, #0
 800457c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800457e:	7bfa      	ldrb	r2, [r7, #15]
 8004580:	6879      	ldr	r1, [r7, #4]
 8004582:	4613      	mov	r3, r2
 8004584:	00db      	lsls	r3, r3, #3
 8004586:	4413      	add	r3, r2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	440b      	add	r3, r1
 800458c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004590:	7bfa      	ldrb	r2, [r7, #15]
 8004592:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004594:	7bfa      	ldrb	r2, [r7, #15]
 8004596:	6879      	ldr	r1, [r7, #4]
 8004598:	4613      	mov	r3, r2
 800459a:	00db      	lsls	r3, r3, #3
 800459c:	4413      	add	r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	440b      	add	r3, r1
 80045a2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80045a6:	2200      	movs	r2, #0
 80045a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80045aa:	7bfa      	ldrb	r2, [r7, #15]
 80045ac:	6879      	ldr	r1, [r7, #4]
 80045ae:	4613      	mov	r3, r2
 80045b0:	00db      	lsls	r3, r3, #3
 80045b2:	4413      	add	r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	440b      	add	r3, r1
 80045b8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80045bc:	2200      	movs	r2, #0
 80045be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80045c0:	7bfa      	ldrb	r2, [r7, #15]
 80045c2:	6879      	ldr	r1, [r7, #4]
 80045c4:	4613      	mov	r3, r2
 80045c6:	00db      	lsls	r3, r3, #3
 80045c8:	4413      	add	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	440b      	add	r3, r1
 80045ce:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80045d2:	2200      	movs	r2, #0
 80045d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80045d6:	7bfa      	ldrb	r2, [r7, #15]
 80045d8:	6879      	ldr	r1, [r7, #4]
 80045da:	4613      	mov	r3, r2
 80045dc:	00db      	lsls	r3, r3, #3
 80045de:	4413      	add	r3, r2
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	440b      	add	r3, r1
 80045e4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80045e8:	2200      	movs	r2, #0
 80045ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045ec:	7bfb      	ldrb	r3, [r7, #15]
 80045ee:	3301      	adds	r3, #1
 80045f0:	73fb      	strb	r3, [r7, #15]
 80045f2:	7bfa      	ldrb	r2, [r7, #15]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d3b5      	bcc.n	8004568 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	603b      	str	r3, [r7, #0]
 8004602:	687e      	ldr	r6, [r7, #4]
 8004604:	466d      	mov	r5, sp
 8004606:	f106 0410 	add.w	r4, r6, #16
 800460a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800460c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800460e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004610:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004612:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004616:	e885 0003 	stmia.w	r5, {r0, r1}
 800461a:	1d33      	adds	r3, r6, #4
 800461c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800461e:	6838      	ldr	r0, [r7, #0]
 8004620:	f001 ff5c 	bl	80064dc <USB_DevInit>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d005      	beq.n	8004636 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2202      	movs	r2, #2
 800462e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e00d      	b.n	8004652 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4618      	mov	r0, r3
 800464c:	f002 f927 	bl	800689e <USB_DevDisconnect>

  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3714      	adds	r7, #20
 8004656:	46bd      	mov	sp, r7
 8004658:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800465c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b086      	sub	sp, #24
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e267      	b.n	8004b3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b00      	cmp	r3, #0
 8004678:	d075      	beq.n	8004766 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800467a:	4b88      	ldr	r3, [pc, #544]	; (800489c <HAL_RCC_OscConfig+0x240>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f003 030c 	and.w	r3, r3, #12
 8004682:	2b04      	cmp	r3, #4
 8004684:	d00c      	beq.n	80046a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004686:	4b85      	ldr	r3, [pc, #532]	; (800489c <HAL_RCC_OscConfig+0x240>)
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800468e:	2b08      	cmp	r3, #8
 8004690:	d112      	bne.n	80046b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004692:	4b82      	ldr	r3, [pc, #520]	; (800489c <HAL_RCC_OscConfig+0x240>)
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800469a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800469e:	d10b      	bne.n	80046b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046a0:	4b7e      	ldr	r3, [pc, #504]	; (800489c <HAL_RCC_OscConfig+0x240>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d05b      	beq.n	8004764 <HAL_RCC_OscConfig+0x108>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d157      	bne.n	8004764 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e242      	b.n	8004b3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046c0:	d106      	bne.n	80046d0 <HAL_RCC_OscConfig+0x74>
 80046c2:	4b76      	ldr	r3, [pc, #472]	; (800489c <HAL_RCC_OscConfig+0x240>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a75      	ldr	r2, [pc, #468]	; (800489c <HAL_RCC_OscConfig+0x240>)
 80046c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046cc:	6013      	str	r3, [r2, #0]
 80046ce:	e01d      	b.n	800470c <HAL_RCC_OscConfig+0xb0>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046d8:	d10c      	bne.n	80046f4 <HAL_RCC_OscConfig+0x98>
 80046da:	4b70      	ldr	r3, [pc, #448]	; (800489c <HAL_RCC_OscConfig+0x240>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a6f      	ldr	r2, [pc, #444]	; (800489c <HAL_RCC_OscConfig+0x240>)
 80046e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046e4:	6013      	str	r3, [r2, #0]
 80046e6:	4b6d      	ldr	r3, [pc, #436]	; (800489c <HAL_RCC_OscConfig+0x240>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a6c      	ldr	r2, [pc, #432]	; (800489c <HAL_RCC_OscConfig+0x240>)
 80046ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046f0:	6013      	str	r3, [r2, #0]
 80046f2:	e00b      	b.n	800470c <HAL_RCC_OscConfig+0xb0>
 80046f4:	4b69      	ldr	r3, [pc, #420]	; (800489c <HAL_RCC_OscConfig+0x240>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a68      	ldr	r2, [pc, #416]	; (800489c <HAL_RCC_OscConfig+0x240>)
 80046fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046fe:	6013      	str	r3, [r2, #0]
 8004700:	4b66      	ldr	r3, [pc, #408]	; (800489c <HAL_RCC_OscConfig+0x240>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a65      	ldr	r2, [pc, #404]	; (800489c <HAL_RCC_OscConfig+0x240>)
 8004706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800470a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d013      	beq.n	800473c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004714:	f7fd fe1a 	bl	800234c <HAL_GetTick>
 8004718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800471a:	e008      	b.n	800472e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800471c:	f7fd fe16 	bl	800234c <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	2b64      	cmp	r3, #100	; 0x64
 8004728:	d901      	bls.n	800472e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e207      	b.n	8004b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800472e:	4b5b      	ldr	r3, [pc, #364]	; (800489c <HAL_RCC_OscConfig+0x240>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d0f0      	beq.n	800471c <HAL_RCC_OscConfig+0xc0>
 800473a:	e014      	b.n	8004766 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800473c:	f7fd fe06 	bl	800234c <HAL_GetTick>
 8004740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004742:	e008      	b.n	8004756 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004744:	f7fd fe02 	bl	800234c <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	2b64      	cmp	r3, #100	; 0x64
 8004750:	d901      	bls.n	8004756 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e1f3      	b.n	8004b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004756:	4b51      	ldr	r3, [pc, #324]	; (800489c <HAL_RCC_OscConfig+0x240>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1f0      	bne.n	8004744 <HAL_RCC_OscConfig+0xe8>
 8004762:	e000      	b.n	8004766 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004764:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d063      	beq.n	800483a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004772:	4b4a      	ldr	r3, [pc, #296]	; (800489c <HAL_RCC_OscConfig+0x240>)
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f003 030c 	and.w	r3, r3, #12
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00b      	beq.n	8004796 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800477e:	4b47      	ldr	r3, [pc, #284]	; (800489c <HAL_RCC_OscConfig+0x240>)
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004786:	2b08      	cmp	r3, #8
 8004788:	d11c      	bne.n	80047c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800478a:	4b44      	ldr	r3, [pc, #272]	; (800489c <HAL_RCC_OscConfig+0x240>)
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d116      	bne.n	80047c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004796:	4b41      	ldr	r3, [pc, #260]	; (800489c <HAL_RCC_OscConfig+0x240>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d005      	beq.n	80047ae <HAL_RCC_OscConfig+0x152>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d001      	beq.n	80047ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e1c7      	b.n	8004b3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ae:	4b3b      	ldr	r3, [pc, #236]	; (800489c <HAL_RCC_OscConfig+0x240>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	00db      	lsls	r3, r3, #3
 80047bc:	4937      	ldr	r1, [pc, #220]	; (800489c <HAL_RCC_OscConfig+0x240>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047c2:	e03a      	b.n	800483a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d020      	beq.n	800480e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047cc:	4b34      	ldr	r3, [pc, #208]	; (80048a0 <HAL_RCC_OscConfig+0x244>)
 80047ce:	2201      	movs	r2, #1
 80047d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d2:	f7fd fdbb 	bl	800234c <HAL_GetTick>
 80047d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047d8:	e008      	b.n	80047ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047da:	f7fd fdb7 	bl	800234c <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d901      	bls.n	80047ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e1a8      	b.n	8004b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ec:	4b2b      	ldr	r3, [pc, #172]	; (800489c <HAL_RCC_OscConfig+0x240>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d0f0      	beq.n	80047da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047f8:	4b28      	ldr	r3, [pc, #160]	; (800489c <HAL_RCC_OscConfig+0x240>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	00db      	lsls	r3, r3, #3
 8004806:	4925      	ldr	r1, [pc, #148]	; (800489c <HAL_RCC_OscConfig+0x240>)
 8004808:	4313      	orrs	r3, r2
 800480a:	600b      	str	r3, [r1, #0]
 800480c:	e015      	b.n	800483a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800480e:	4b24      	ldr	r3, [pc, #144]	; (80048a0 <HAL_RCC_OscConfig+0x244>)
 8004810:	2200      	movs	r2, #0
 8004812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004814:	f7fd fd9a 	bl	800234c <HAL_GetTick>
 8004818:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800481a:	e008      	b.n	800482e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800481c:	f7fd fd96 	bl	800234c <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	2b02      	cmp	r3, #2
 8004828:	d901      	bls.n	800482e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e187      	b.n	8004b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800482e:	4b1b      	ldr	r3, [pc, #108]	; (800489c <HAL_RCC_OscConfig+0x240>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1f0      	bne.n	800481c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0308 	and.w	r3, r3, #8
 8004842:	2b00      	cmp	r3, #0
 8004844:	d036      	beq.n	80048b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d016      	beq.n	800487c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800484e:	4b15      	ldr	r3, [pc, #84]	; (80048a4 <HAL_RCC_OscConfig+0x248>)
 8004850:	2201      	movs	r2, #1
 8004852:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004854:	f7fd fd7a 	bl	800234c <HAL_GetTick>
 8004858:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800485a:	e008      	b.n	800486e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800485c:	f7fd fd76 	bl	800234c <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b02      	cmp	r3, #2
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e167      	b.n	8004b3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800486e:	4b0b      	ldr	r3, [pc, #44]	; (800489c <HAL_RCC_OscConfig+0x240>)
 8004870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d0f0      	beq.n	800485c <HAL_RCC_OscConfig+0x200>
 800487a:	e01b      	b.n	80048b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800487c:	4b09      	ldr	r3, [pc, #36]	; (80048a4 <HAL_RCC_OscConfig+0x248>)
 800487e:	2200      	movs	r2, #0
 8004880:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004882:	f7fd fd63 	bl	800234c <HAL_GetTick>
 8004886:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004888:	e00e      	b.n	80048a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800488a:	f7fd fd5f 	bl	800234c <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	2b02      	cmp	r3, #2
 8004896:	d907      	bls.n	80048a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e150      	b.n	8004b3e <HAL_RCC_OscConfig+0x4e2>
 800489c:	40023800 	.word	0x40023800
 80048a0:	42470000 	.word	0x42470000
 80048a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048a8:	4b88      	ldr	r3, [pc, #544]	; (8004acc <HAL_RCC_OscConfig+0x470>)
 80048aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1ea      	bne.n	800488a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0304 	and.w	r3, r3, #4
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f000 8097 	beq.w	80049f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048c2:	2300      	movs	r3, #0
 80048c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048c6:	4b81      	ldr	r3, [pc, #516]	; (8004acc <HAL_RCC_OscConfig+0x470>)
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10f      	bne.n	80048f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048d2:	2300      	movs	r3, #0
 80048d4:	60bb      	str	r3, [r7, #8]
 80048d6:	4b7d      	ldr	r3, [pc, #500]	; (8004acc <HAL_RCC_OscConfig+0x470>)
 80048d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048da:	4a7c      	ldr	r2, [pc, #496]	; (8004acc <HAL_RCC_OscConfig+0x470>)
 80048dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048e0:	6413      	str	r3, [r2, #64]	; 0x40
 80048e2:	4b7a      	ldr	r3, [pc, #488]	; (8004acc <HAL_RCC_OscConfig+0x470>)
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ea:	60bb      	str	r3, [r7, #8]
 80048ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048ee:	2301      	movs	r3, #1
 80048f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048f2:	4b77      	ldr	r3, [pc, #476]	; (8004ad0 <HAL_RCC_OscConfig+0x474>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d118      	bne.n	8004930 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048fe:	4b74      	ldr	r3, [pc, #464]	; (8004ad0 <HAL_RCC_OscConfig+0x474>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a73      	ldr	r2, [pc, #460]	; (8004ad0 <HAL_RCC_OscConfig+0x474>)
 8004904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004908:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800490a:	f7fd fd1f 	bl	800234c <HAL_GetTick>
 800490e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004910:	e008      	b.n	8004924 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004912:	f7fd fd1b 	bl	800234c <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	2b02      	cmp	r3, #2
 800491e:	d901      	bls.n	8004924 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e10c      	b.n	8004b3e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004924:	4b6a      	ldr	r3, [pc, #424]	; (8004ad0 <HAL_RCC_OscConfig+0x474>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492c:	2b00      	cmp	r3, #0
 800492e:	d0f0      	beq.n	8004912 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d106      	bne.n	8004946 <HAL_RCC_OscConfig+0x2ea>
 8004938:	4b64      	ldr	r3, [pc, #400]	; (8004acc <HAL_RCC_OscConfig+0x470>)
 800493a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800493c:	4a63      	ldr	r2, [pc, #396]	; (8004acc <HAL_RCC_OscConfig+0x470>)
 800493e:	f043 0301 	orr.w	r3, r3, #1
 8004942:	6713      	str	r3, [r2, #112]	; 0x70
 8004944:	e01c      	b.n	8004980 <HAL_RCC_OscConfig+0x324>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	2b05      	cmp	r3, #5
 800494c:	d10c      	bne.n	8004968 <HAL_RCC_OscConfig+0x30c>
 800494e:	4b5f      	ldr	r3, [pc, #380]	; (8004acc <HAL_RCC_OscConfig+0x470>)
 8004950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004952:	4a5e      	ldr	r2, [pc, #376]	; (8004acc <HAL_RCC_OscConfig+0x470>)
 8004954:	f043 0304 	orr.w	r3, r3, #4
 8004958:	6713      	str	r3, [r2, #112]	; 0x70
 800495a:	4b5c      	ldr	r3, [pc, #368]	; (8004acc <HAL_RCC_OscConfig+0x470>)
 800495c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800495e:	4a5b      	ldr	r2, [pc, #364]	; (8004acc <HAL_RCC_OscConfig+0x470>)
 8004960:	f043 0301 	orr.w	r3, r3, #1
 8004964:	6713      	str	r3, [r2, #112]	; 0x70
 8004966:	e00b      	b.n	8004980 <HAL_RCC_OscConfig+0x324>
 8004968:	4b58      	ldr	r3, [pc, #352]	; (8004acc <HAL_RCC_OscConfig+0x470>)
 800496a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496c:	4a57      	ldr	r2, [pc, #348]	; (8004acc <HAL_RCC_OscConfig+0x470>)
 800496e:	f023 0301 	bic.w	r3, r3, #1
 8004972:	6713      	str	r3, [r2, #112]	; 0x70
 8004974:	4b55      	ldr	r3, [pc, #340]	; (8004acc <HAL_RCC_OscConfig+0x470>)
 8004976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004978:	4a54      	ldr	r2, [pc, #336]	; (8004acc <HAL_RCC_OscConfig+0x470>)
 800497a:	f023 0304 	bic.w	r3, r3, #4
 800497e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d015      	beq.n	80049b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004988:	f7fd fce0 	bl	800234c <HAL_GetTick>
 800498c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800498e:	e00a      	b.n	80049a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004990:	f7fd fcdc 	bl	800234c <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	f241 3288 	movw	r2, #5000	; 0x1388
 800499e:	4293      	cmp	r3, r2
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e0cb      	b.n	8004b3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049a6:	4b49      	ldr	r3, [pc, #292]	; (8004acc <HAL_RCC_OscConfig+0x470>)
 80049a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d0ee      	beq.n	8004990 <HAL_RCC_OscConfig+0x334>
 80049b2:	e014      	b.n	80049de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049b4:	f7fd fcca 	bl	800234c <HAL_GetTick>
 80049b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049ba:	e00a      	b.n	80049d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049bc:	f7fd fcc6 	bl	800234c <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d901      	bls.n	80049d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e0b5      	b.n	8004b3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049d2:	4b3e      	ldr	r3, [pc, #248]	; (8004acc <HAL_RCC_OscConfig+0x470>)
 80049d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1ee      	bne.n	80049bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049de:	7dfb      	ldrb	r3, [r7, #23]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d105      	bne.n	80049f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049e4:	4b39      	ldr	r3, [pc, #228]	; (8004acc <HAL_RCC_OscConfig+0x470>)
 80049e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e8:	4a38      	ldr	r2, [pc, #224]	; (8004acc <HAL_RCC_OscConfig+0x470>)
 80049ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 80a1 	beq.w	8004b3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049fa:	4b34      	ldr	r3, [pc, #208]	; (8004acc <HAL_RCC_OscConfig+0x470>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f003 030c 	and.w	r3, r3, #12
 8004a02:	2b08      	cmp	r3, #8
 8004a04:	d05c      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d141      	bne.n	8004a92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a0e:	4b31      	ldr	r3, [pc, #196]	; (8004ad4 <HAL_RCC_OscConfig+0x478>)
 8004a10:	2200      	movs	r2, #0
 8004a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a14:	f7fd fc9a 	bl	800234c <HAL_GetTick>
 8004a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a1c:	f7fd fc96 	bl	800234c <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e087      	b.n	8004b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a2e:	4b27      	ldr	r3, [pc, #156]	; (8004acc <HAL_RCC_OscConfig+0x470>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1f0      	bne.n	8004a1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	69da      	ldr	r2, [r3, #28]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	431a      	orrs	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a48:	019b      	lsls	r3, r3, #6
 8004a4a:	431a      	orrs	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a50:	085b      	lsrs	r3, r3, #1
 8004a52:	3b01      	subs	r3, #1
 8004a54:	041b      	lsls	r3, r3, #16
 8004a56:	431a      	orrs	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5c:	061b      	lsls	r3, r3, #24
 8004a5e:	491b      	ldr	r1, [pc, #108]	; (8004acc <HAL_RCC_OscConfig+0x470>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a64:	4b1b      	ldr	r3, [pc, #108]	; (8004ad4 <HAL_RCC_OscConfig+0x478>)
 8004a66:	2201      	movs	r2, #1
 8004a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a6a:	f7fd fc6f 	bl	800234c <HAL_GetTick>
 8004a6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a70:	e008      	b.n	8004a84 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a72:	f7fd fc6b 	bl	800234c <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d901      	bls.n	8004a84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e05c      	b.n	8004b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a84:	4b11      	ldr	r3, [pc, #68]	; (8004acc <HAL_RCC_OscConfig+0x470>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d0f0      	beq.n	8004a72 <HAL_RCC_OscConfig+0x416>
 8004a90:	e054      	b.n	8004b3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a92:	4b10      	ldr	r3, [pc, #64]	; (8004ad4 <HAL_RCC_OscConfig+0x478>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a98:	f7fd fc58 	bl	800234c <HAL_GetTick>
 8004a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aa0:	f7fd fc54 	bl	800234c <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e045      	b.n	8004b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ab2:	4b06      	ldr	r3, [pc, #24]	; (8004acc <HAL_RCC_OscConfig+0x470>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d1f0      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x444>
 8004abe:	e03d      	b.n	8004b3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d107      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e038      	b.n	8004b3e <HAL_RCC_OscConfig+0x4e2>
 8004acc:	40023800 	.word	0x40023800
 8004ad0:	40007000 	.word	0x40007000
 8004ad4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ad8:	4b1b      	ldr	r3, [pc, #108]	; (8004b48 <HAL_RCC_OscConfig+0x4ec>)
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d028      	beq.n	8004b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d121      	bne.n	8004b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d11a      	bne.n	8004b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b08:	4013      	ands	r3, r2
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d111      	bne.n	8004b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1e:	085b      	lsrs	r3, r3, #1
 8004b20:	3b01      	subs	r3, #1
 8004b22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d107      	bne.n	8004b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d001      	beq.n	8004b3c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e000      	b.n	8004b3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3718      	adds	r7, #24
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	40023800 	.word	0x40023800

08004b4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d101      	bne.n	8004b60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e0cc      	b.n	8004cfa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b60:	4b68      	ldr	r3, [pc, #416]	; (8004d04 <HAL_RCC_ClockConfig+0x1b8>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 030f 	and.w	r3, r3, #15
 8004b68:	683a      	ldr	r2, [r7, #0]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d90c      	bls.n	8004b88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b6e:	4b65      	ldr	r3, [pc, #404]	; (8004d04 <HAL_RCC_ClockConfig+0x1b8>)
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	b2d2      	uxtb	r2, r2
 8004b74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b76:	4b63      	ldr	r3, [pc, #396]	; (8004d04 <HAL_RCC_ClockConfig+0x1b8>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 030f 	and.w	r3, r3, #15
 8004b7e:	683a      	ldr	r2, [r7, #0]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d001      	beq.n	8004b88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e0b8      	b.n	8004cfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d020      	beq.n	8004bd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0304 	and.w	r3, r3, #4
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d005      	beq.n	8004bac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ba0:	4b59      	ldr	r3, [pc, #356]	; (8004d08 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	4a58      	ldr	r2, [pc, #352]	; (8004d08 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004baa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0308 	and.w	r3, r3, #8
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d005      	beq.n	8004bc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bb8:	4b53      	ldr	r3, [pc, #332]	; (8004d08 <HAL_RCC_ClockConfig+0x1bc>)
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	4a52      	ldr	r2, [pc, #328]	; (8004d08 <HAL_RCC_ClockConfig+0x1bc>)
 8004bbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004bc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bc4:	4b50      	ldr	r3, [pc, #320]	; (8004d08 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	494d      	ldr	r1, [pc, #308]	; (8004d08 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d044      	beq.n	8004c6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d107      	bne.n	8004bfa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bea:	4b47      	ldr	r3, [pc, #284]	; (8004d08 <HAL_RCC_ClockConfig+0x1bc>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d119      	bne.n	8004c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e07f      	b.n	8004cfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d003      	beq.n	8004c0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c06:	2b03      	cmp	r3, #3
 8004c08:	d107      	bne.n	8004c1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c0a:	4b3f      	ldr	r3, [pc, #252]	; (8004d08 <HAL_RCC_ClockConfig+0x1bc>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d109      	bne.n	8004c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e06f      	b.n	8004cfa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c1a:	4b3b      	ldr	r3, [pc, #236]	; (8004d08 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0302 	and.w	r3, r3, #2
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d101      	bne.n	8004c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e067      	b.n	8004cfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c2a:	4b37      	ldr	r3, [pc, #220]	; (8004d08 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f023 0203 	bic.w	r2, r3, #3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	4934      	ldr	r1, [pc, #208]	; (8004d08 <HAL_RCC_ClockConfig+0x1bc>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c3c:	f7fd fb86 	bl	800234c <HAL_GetTick>
 8004c40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c42:	e00a      	b.n	8004c5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c44:	f7fd fb82 	bl	800234c <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e04f      	b.n	8004cfa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c5a:	4b2b      	ldr	r3, [pc, #172]	; (8004d08 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f003 020c 	and.w	r2, r3, #12
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d1eb      	bne.n	8004c44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c6c:	4b25      	ldr	r3, [pc, #148]	; (8004d04 <HAL_RCC_ClockConfig+0x1b8>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 030f 	and.w	r3, r3, #15
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d20c      	bcs.n	8004c94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c7a:	4b22      	ldr	r3, [pc, #136]	; (8004d04 <HAL_RCC_ClockConfig+0x1b8>)
 8004c7c:	683a      	ldr	r2, [r7, #0]
 8004c7e:	b2d2      	uxtb	r2, r2
 8004c80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c82:	4b20      	ldr	r3, [pc, #128]	; (8004d04 <HAL_RCC_ClockConfig+0x1b8>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 030f 	and.w	r3, r3, #15
 8004c8a:	683a      	ldr	r2, [r7, #0]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d001      	beq.n	8004c94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e032      	b.n	8004cfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0304 	and.w	r3, r3, #4
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d008      	beq.n	8004cb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ca0:	4b19      	ldr	r3, [pc, #100]	; (8004d08 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	4916      	ldr	r1, [pc, #88]	; (8004d08 <HAL_RCC_ClockConfig+0x1bc>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0308 	and.w	r3, r3, #8
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d009      	beq.n	8004cd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cbe:	4b12      	ldr	r3, [pc, #72]	; (8004d08 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	00db      	lsls	r3, r3, #3
 8004ccc:	490e      	ldr	r1, [pc, #56]	; (8004d08 <HAL_RCC_ClockConfig+0x1bc>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004cd2:	f000 f821 	bl	8004d18 <HAL_RCC_GetSysClockFreq>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	4b0b      	ldr	r3, [pc, #44]	; (8004d08 <HAL_RCC_ClockConfig+0x1bc>)
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	091b      	lsrs	r3, r3, #4
 8004cde:	f003 030f 	and.w	r3, r3, #15
 8004ce2:	490a      	ldr	r1, [pc, #40]	; (8004d0c <HAL_RCC_ClockConfig+0x1c0>)
 8004ce4:	5ccb      	ldrb	r3, [r1, r3]
 8004ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8004cea:	4a09      	ldr	r2, [pc, #36]	; (8004d10 <HAL_RCC_ClockConfig+0x1c4>)
 8004cec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004cee:	4b09      	ldr	r3, [pc, #36]	; (8004d14 <HAL_RCC_ClockConfig+0x1c8>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7fd f9a4 	bl	8002040 <HAL_InitTick>

  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	40023c00 	.word	0x40023c00
 8004d08:	40023800 	.word	0x40023800
 8004d0c:	0800ac04 	.word	0x0800ac04
 8004d10:	20000068 	.word	0x20000068
 8004d14:	2000006c 	.word	0x2000006c

08004d18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d1c:	b094      	sub	sp, #80	; 0x50
 8004d1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d20:	2300      	movs	r3, #0
 8004d22:	647b      	str	r3, [r7, #68]	; 0x44
 8004d24:	2300      	movs	r3, #0
 8004d26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d28:	2300      	movs	r3, #0
 8004d2a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d30:	4b79      	ldr	r3, [pc, #484]	; (8004f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f003 030c 	and.w	r3, r3, #12
 8004d38:	2b08      	cmp	r3, #8
 8004d3a:	d00d      	beq.n	8004d58 <HAL_RCC_GetSysClockFreq+0x40>
 8004d3c:	2b08      	cmp	r3, #8
 8004d3e:	f200 80e1 	bhi.w	8004f04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d002      	beq.n	8004d4c <HAL_RCC_GetSysClockFreq+0x34>
 8004d46:	2b04      	cmp	r3, #4
 8004d48:	d003      	beq.n	8004d52 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d4a:	e0db      	b.n	8004f04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d4c:	4b73      	ldr	r3, [pc, #460]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x204>)
 8004d4e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004d50:	e0db      	b.n	8004f0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d52:	4b73      	ldr	r3, [pc, #460]	; (8004f20 <HAL_RCC_GetSysClockFreq+0x208>)
 8004d54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d56:	e0d8      	b.n	8004f0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d58:	4b6f      	ldr	r3, [pc, #444]	; (8004f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d60:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d62:	4b6d      	ldr	r3, [pc, #436]	; (8004f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d063      	beq.n	8004e36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d6e:	4b6a      	ldr	r3, [pc, #424]	; (8004f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	099b      	lsrs	r3, r3, #6
 8004d74:	2200      	movs	r2, #0
 8004d76:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d78:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d80:	633b      	str	r3, [r7, #48]	; 0x30
 8004d82:	2300      	movs	r3, #0
 8004d84:	637b      	str	r3, [r7, #52]	; 0x34
 8004d86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004d8a:	4622      	mov	r2, r4
 8004d8c:	462b      	mov	r3, r5
 8004d8e:	f04f 0000 	mov.w	r0, #0
 8004d92:	f04f 0100 	mov.w	r1, #0
 8004d96:	0159      	lsls	r1, r3, #5
 8004d98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d9c:	0150      	lsls	r0, r2, #5
 8004d9e:	4602      	mov	r2, r0
 8004da0:	460b      	mov	r3, r1
 8004da2:	4621      	mov	r1, r4
 8004da4:	1a51      	subs	r1, r2, r1
 8004da6:	6139      	str	r1, [r7, #16]
 8004da8:	4629      	mov	r1, r5
 8004daa:	eb63 0301 	sbc.w	r3, r3, r1
 8004dae:	617b      	str	r3, [r7, #20]
 8004db0:	f04f 0200 	mov.w	r2, #0
 8004db4:	f04f 0300 	mov.w	r3, #0
 8004db8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004dbc:	4659      	mov	r1, fp
 8004dbe:	018b      	lsls	r3, r1, #6
 8004dc0:	4651      	mov	r1, sl
 8004dc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004dc6:	4651      	mov	r1, sl
 8004dc8:	018a      	lsls	r2, r1, #6
 8004dca:	4651      	mov	r1, sl
 8004dcc:	ebb2 0801 	subs.w	r8, r2, r1
 8004dd0:	4659      	mov	r1, fp
 8004dd2:	eb63 0901 	sbc.w	r9, r3, r1
 8004dd6:	f04f 0200 	mov.w	r2, #0
 8004dda:	f04f 0300 	mov.w	r3, #0
 8004dde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004de2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004de6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dea:	4690      	mov	r8, r2
 8004dec:	4699      	mov	r9, r3
 8004dee:	4623      	mov	r3, r4
 8004df0:	eb18 0303 	adds.w	r3, r8, r3
 8004df4:	60bb      	str	r3, [r7, #8]
 8004df6:	462b      	mov	r3, r5
 8004df8:	eb49 0303 	adc.w	r3, r9, r3
 8004dfc:	60fb      	str	r3, [r7, #12]
 8004dfe:	f04f 0200 	mov.w	r2, #0
 8004e02:	f04f 0300 	mov.w	r3, #0
 8004e06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e0a:	4629      	mov	r1, r5
 8004e0c:	024b      	lsls	r3, r1, #9
 8004e0e:	4621      	mov	r1, r4
 8004e10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e14:	4621      	mov	r1, r4
 8004e16:	024a      	lsls	r2, r1, #9
 8004e18:	4610      	mov	r0, r2
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e1e:	2200      	movs	r2, #0
 8004e20:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e28:	f7fb fa32 	bl	8000290 <__aeabi_uldivmod>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	460b      	mov	r3, r1
 8004e30:	4613      	mov	r3, r2
 8004e32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e34:	e058      	b.n	8004ee8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e36:	4b38      	ldr	r3, [pc, #224]	; (8004f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	099b      	lsrs	r3, r3, #6
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	4618      	mov	r0, r3
 8004e40:	4611      	mov	r1, r2
 8004e42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e46:	623b      	str	r3, [r7, #32]
 8004e48:	2300      	movs	r3, #0
 8004e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e50:	4642      	mov	r2, r8
 8004e52:	464b      	mov	r3, r9
 8004e54:	f04f 0000 	mov.w	r0, #0
 8004e58:	f04f 0100 	mov.w	r1, #0
 8004e5c:	0159      	lsls	r1, r3, #5
 8004e5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e62:	0150      	lsls	r0, r2, #5
 8004e64:	4602      	mov	r2, r0
 8004e66:	460b      	mov	r3, r1
 8004e68:	4641      	mov	r1, r8
 8004e6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e6e:	4649      	mov	r1, r9
 8004e70:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e74:	f04f 0200 	mov.w	r2, #0
 8004e78:	f04f 0300 	mov.w	r3, #0
 8004e7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e88:	ebb2 040a 	subs.w	r4, r2, sl
 8004e8c:	eb63 050b 	sbc.w	r5, r3, fp
 8004e90:	f04f 0200 	mov.w	r2, #0
 8004e94:	f04f 0300 	mov.w	r3, #0
 8004e98:	00eb      	lsls	r3, r5, #3
 8004e9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e9e:	00e2      	lsls	r2, r4, #3
 8004ea0:	4614      	mov	r4, r2
 8004ea2:	461d      	mov	r5, r3
 8004ea4:	4643      	mov	r3, r8
 8004ea6:	18e3      	adds	r3, r4, r3
 8004ea8:	603b      	str	r3, [r7, #0]
 8004eaa:	464b      	mov	r3, r9
 8004eac:	eb45 0303 	adc.w	r3, r5, r3
 8004eb0:	607b      	str	r3, [r7, #4]
 8004eb2:	f04f 0200 	mov.w	r2, #0
 8004eb6:	f04f 0300 	mov.w	r3, #0
 8004eba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ebe:	4629      	mov	r1, r5
 8004ec0:	028b      	lsls	r3, r1, #10
 8004ec2:	4621      	mov	r1, r4
 8004ec4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ec8:	4621      	mov	r1, r4
 8004eca:	028a      	lsls	r2, r1, #10
 8004ecc:	4610      	mov	r0, r2
 8004ece:	4619      	mov	r1, r3
 8004ed0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	61bb      	str	r3, [r7, #24]
 8004ed6:	61fa      	str	r2, [r7, #28]
 8004ed8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004edc:	f7fb f9d8 	bl	8000290 <__aeabi_uldivmod>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ee8:	4b0b      	ldr	r3, [pc, #44]	; (8004f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	0c1b      	lsrs	r3, r3, #16
 8004eee:	f003 0303 	and.w	r3, r3, #3
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	005b      	lsls	r3, r3, #1
 8004ef6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004ef8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004efa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f02:	e002      	b.n	8004f0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f04:	4b05      	ldr	r3, [pc, #20]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x204>)
 8004f06:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3750      	adds	r7, #80	; 0x50
 8004f10:	46bd      	mov	sp, r7
 8004f12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f16:	bf00      	nop
 8004f18:	40023800 	.word	0x40023800
 8004f1c:	00f42400 	.word	0x00f42400
 8004f20:	007a1200 	.word	0x007a1200

08004f24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f24:	b480      	push	{r7}
 8004f26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f28:	4b03      	ldr	r3, [pc, #12]	; (8004f38 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	20000068 	.word	0x20000068

08004f3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f40:	f7ff fff0 	bl	8004f24 <HAL_RCC_GetHCLKFreq>
 8004f44:	4602      	mov	r2, r0
 8004f46:	4b05      	ldr	r3, [pc, #20]	; (8004f5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	0a9b      	lsrs	r3, r3, #10
 8004f4c:	f003 0307 	and.w	r3, r3, #7
 8004f50:	4903      	ldr	r1, [pc, #12]	; (8004f60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f52:	5ccb      	ldrb	r3, [r1, r3]
 8004f54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	40023800 	.word	0x40023800
 8004f60:	0800ac14 	.word	0x0800ac14

08004f64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f68:	f7ff ffdc 	bl	8004f24 <HAL_RCC_GetHCLKFreq>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	4b05      	ldr	r3, [pc, #20]	; (8004f84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	0b5b      	lsrs	r3, r3, #13
 8004f74:	f003 0307 	and.w	r3, r3, #7
 8004f78:	4903      	ldr	r1, [pc, #12]	; (8004f88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f7a:	5ccb      	ldrb	r3, [r1, r3]
 8004f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	40023800 	.word	0x40023800
 8004f88:	0800ac14 	.word	0x0800ac14

08004f8c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	220f      	movs	r2, #15
 8004f9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004f9c:	4b12      	ldr	r3, [pc, #72]	; (8004fe8 <HAL_RCC_GetClockConfig+0x5c>)
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f003 0203 	and.w	r2, r3, #3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004fa8:	4b0f      	ldr	r3, [pc, #60]	; (8004fe8 <HAL_RCC_GetClockConfig+0x5c>)
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004fb4:	4b0c      	ldr	r3, [pc, #48]	; (8004fe8 <HAL_RCC_GetClockConfig+0x5c>)
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004fc0:	4b09      	ldr	r3, [pc, #36]	; (8004fe8 <HAL_RCC_GetClockConfig+0x5c>)
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	08db      	lsrs	r3, r3, #3
 8004fc6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004fce:	4b07      	ldr	r3, [pc, #28]	; (8004fec <HAL_RCC_GetClockConfig+0x60>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 020f 	and.w	r2, r3, #15
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	601a      	str	r2, [r3, #0]
}
 8004fda:	bf00      	nop
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	40023800 	.word	0x40023800
 8004fec:	40023c00 	.word	0x40023c00

08004ff0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d101      	bne.n	8005002 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e041      	b.n	8005086 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d106      	bne.n	800501c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f7fc ff40 	bl	8001e9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2202      	movs	r2, #2
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	3304      	adds	r3, #4
 800502c:	4619      	mov	r1, r3
 800502e:	4610      	mov	r0, r2
 8005030:	f000 f9ce 	bl	80053d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3708      	adds	r7, #8
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
	...

08005090 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d001      	beq.n	80050a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e04e      	b.n	8005146 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2202      	movs	r2, #2
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68da      	ldr	r2, [r3, #12]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f042 0201 	orr.w	r2, r2, #1
 80050be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a23      	ldr	r2, [pc, #140]	; (8005154 <HAL_TIM_Base_Start_IT+0xc4>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d022      	beq.n	8005110 <HAL_TIM_Base_Start_IT+0x80>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d2:	d01d      	beq.n	8005110 <HAL_TIM_Base_Start_IT+0x80>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a1f      	ldr	r2, [pc, #124]	; (8005158 <HAL_TIM_Base_Start_IT+0xc8>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d018      	beq.n	8005110 <HAL_TIM_Base_Start_IT+0x80>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a1e      	ldr	r2, [pc, #120]	; (800515c <HAL_TIM_Base_Start_IT+0xcc>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d013      	beq.n	8005110 <HAL_TIM_Base_Start_IT+0x80>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a1c      	ldr	r2, [pc, #112]	; (8005160 <HAL_TIM_Base_Start_IT+0xd0>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d00e      	beq.n	8005110 <HAL_TIM_Base_Start_IT+0x80>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a1b      	ldr	r2, [pc, #108]	; (8005164 <HAL_TIM_Base_Start_IT+0xd4>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d009      	beq.n	8005110 <HAL_TIM_Base_Start_IT+0x80>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a19      	ldr	r2, [pc, #100]	; (8005168 <HAL_TIM_Base_Start_IT+0xd8>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d004      	beq.n	8005110 <HAL_TIM_Base_Start_IT+0x80>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a18      	ldr	r2, [pc, #96]	; (800516c <HAL_TIM_Base_Start_IT+0xdc>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d111      	bne.n	8005134 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f003 0307 	and.w	r3, r3, #7
 800511a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2b06      	cmp	r3, #6
 8005120:	d010      	beq.n	8005144 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f042 0201 	orr.w	r2, r2, #1
 8005130:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005132:	e007      	b.n	8005144 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f042 0201 	orr.w	r2, r2, #1
 8005142:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3714      	adds	r7, #20
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	40010000 	.word	0x40010000
 8005158:	40000400 	.word	0x40000400
 800515c:	40000800 	.word	0x40000800
 8005160:	40000c00 	.word	0x40000c00
 8005164:	40010400 	.word	0x40010400
 8005168:	40014000 	.word	0x40014000
 800516c:	40001800 	.word	0x40001800

08005170 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b02      	cmp	r3, #2
 8005184:	d122      	bne.n	80051cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	2b02      	cmp	r3, #2
 8005192:	d11b      	bne.n	80051cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f06f 0202 	mvn.w	r2, #2
 800519c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	f003 0303 	and.w	r3, r3, #3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d003      	beq.n	80051ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f8ee 	bl	8005394 <HAL_TIM_IC_CaptureCallback>
 80051b8:	e005      	b.n	80051c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 f8e0 	bl	8005380 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 f8f1 	bl	80053a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	f003 0304 	and.w	r3, r3, #4
 80051d6:	2b04      	cmp	r3, #4
 80051d8:	d122      	bne.n	8005220 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	f003 0304 	and.w	r3, r3, #4
 80051e4:	2b04      	cmp	r3, #4
 80051e6:	d11b      	bne.n	8005220 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f06f 0204 	mvn.w	r2, #4
 80051f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2202      	movs	r2, #2
 80051f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005202:	2b00      	cmp	r3, #0
 8005204:	d003      	beq.n	800520e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f8c4 	bl	8005394 <HAL_TIM_IC_CaptureCallback>
 800520c:	e005      	b.n	800521a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f8b6 	bl	8005380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 f8c7 	bl	80053a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	f003 0308 	and.w	r3, r3, #8
 800522a:	2b08      	cmp	r3, #8
 800522c:	d122      	bne.n	8005274 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	f003 0308 	and.w	r3, r3, #8
 8005238:	2b08      	cmp	r3, #8
 800523a:	d11b      	bne.n	8005274 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f06f 0208 	mvn.w	r2, #8
 8005244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2204      	movs	r2, #4
 800524a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	69db      	ldr	r3, [r3, #28]
 8005252:	f003 0303 	and.w	r3, r3, #3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 f89a 	bl	8005394 <HAL_TIM_IC_CaptureCallback>
 8005260:	e005      	b.n	800526e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f88c 	bl	8005380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 f89d 	bl	80053a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	f003 0310 	and.w	r3, r3, #16
 800527e:	2b10      	cmp	r3, #16
 8005280:	d122      	bne.n	80052c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f003 0310 	and.w	r3, r3, #16
 800528c:	2b10      	cmp	r3, #16
 800528e:	d11b      	bne.n	80052c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f06f 0210 	mvn.w	r2, #16
 8005298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2208      	movs	r2, #8
 800529e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	69db      	ldr	r3, [r3, #28]
 80052a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d003      	beq.n	80052b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 f870 	bl	8005394 <HAL_TIM_IC_CaptureCallback>
 80052b4:	e005      	b.n	80052c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f862 	bl	8005380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 f873 	bl	80053a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d10e      	bne.n	80052f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	f003 0301 	and.w	r3, r3, #1
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d107      	bne.n	80052f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f06f 0201 	mvn.w	r2, #1
 80052ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f7fc fac8 	bl	8001884 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052fe:	2b80      	cmp	r3, #128	; 0x80
 8005300:	d10e      	bne.n	8005320 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800530c:	2b80      	cmp	r3, #128	; 0x80
 800530e:	d107      	bne.n	8005320 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 f902 	bl	8005524 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800532a:	2b40      	cmp	r3, #64	; 0x40
 800532c:	d10e      	bne.n	800534c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005338:	2b40      	cmp	r3, #64	; 0x40
 800533a:	d107      	bne.n	800534c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f838 	bl	80053bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	f003 0320 	and.w	r3, r3, #32
 8005356:	2b20      	cmp	r3, #32
 8005358:	d10e      	bne.n	8005378 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	f003 0320 	and.w	r3, r3, #32
 8005364:	2b20      	cmp	r3, #32
 8005366:	d107      	bne.n	8005378 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f06f 0220 	mvn.w	r2, #32
 8005370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 f8cc 	bl	8005510 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005378:	bf00      	nop
 800537a:	3708      	adds	r7, #8
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a40      	ldr	r2, [pc, #256]	; (80054e4 <TIM_Base_SetConfig+0x114>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d013      	beq.n	8005410 <TIM_Base_SetConfig+0x40>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ee:	d00f      	beq.n	8005410 <TIM_Base_SetConfig+0x40>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a3d      	ldr	r2, [pc, #244]	; (80054e8 <TIM_Base_SetConfig+0x118>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d00b      	beq.n	8005410 <TIM_Base_SetConfig+0x40>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a3c      	ldr	r2, [pc, #240]	; (80054ec <TIM_Base_SetConfig+0x11c>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d007      	beq.n	8005410 <TIM_Base_SetConfig+0x40>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a3b      	ldr	r2, [pc, #236]	; (80054f0 <TIM_Base_SetConfig+0x120>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d003      	beq.n	8005410 <TIM_Base_SetConfig+0x40>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a3a      	ldr	r2, [pc, #232]	; (80054f4 <TIM_Base_SetConfig+0x124>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d108      	bne.n	8005422 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005416:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	4313      	orrs	r3, r2
 8005420:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a2f      	ldr	r2, [pc, #188]	; (80054e4 <TIM_Base_SetConfig+0x114>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d02b      	beq.n	8005482 <TIM_Base_SetConfig+0xb2>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005430:	d027      	beq.n	8005482 <TIM_Base_SetConfig+0xb2>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a2c      	ldr	r2, [pc, #176]	; (80054e8 <TIM_Base_SetConfig+0x118>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d023      	beq.n	8005482 <TIM_Base_SetConfig+0xb2>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a2b      	ldr	r2, [pc, #172]	; (80054ec <TIM_Base_SetConfig+0x11c>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d01f      	beq.n	8005482 <TIM_Base_SetConfig+0xb2>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a2a      	ldr	r2, [pc, #168]	; (80054f0 <TIM_Base_SetConfig+0x120>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d01b      	beq.n	8005482 <TIM_Base_SetConfig+0xb2>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a29      	ldr	r2, [pc, #164]	; (80054f4 <TIM_Base_SetConfig+0x124>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d017      	beq.n	8005482 <TIM_Base_SetConfig+0xb2>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a28      	ldr	r2, [pc, #160]	; (80054f8 <TIM_Base_SetConfig+0x128>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d013      	beq.n	8005482 <TIM_Base_SetConfig+0xb2>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a27      	ldr	r2, [pc, #156]	; (80054fc <TIM_Base_SetConfig+0x12c>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d00f      	beq.n	8005482 <TIM_Base_SetConfig+0xb2>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a26      	ldr	r2, [pc, #152]	; (8005500 <TIM_Base_SetConfig+0x130>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d00b      	beq.n	8005482 <TIM_Base_SetConfig+0xb2>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a25      	ldr	r2, [pc, #148]	; (8005504 <TIM_Base_SetConfig+0x134>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d007      	beq.n	8005482 <TIM_Base_SetConfig+0xb2>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a24      	ldr	r2, [pc, #144]	; (8005508 <TIM_Base_SetConfig+0x138>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d003      	beq.n	8005482 <TIM_Base_SetConfig+0xb2>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a23      	ldr	r2, [pc, #140]	; (800550c <TIM_Base_SetConfig+0x13c>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d108      	bne.n	8005494 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005488:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	4313      	orrs	r3, r2
 8005492:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	4313      	orrs	r3, r2
 80054a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	689a      	ldr	r2, [r3, #8]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a0a      	ldr	r2, [pc, #40]	; (80054e4 <TIM_Base_SetConfig+0x114>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d003      	beq.n	80054c8 <TIM_Base_SetConfig+0xf8>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a0c      	ldr	r2, [pc, #48]	; (80054f4 <TIM_Base_SetConfig+0x124>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d103      	bne.n	80054d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	691a      	ldr	r2, [r3, #16]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	615a      	str	r2, [r3, #20]
}
 80054d6:	bf00      	nop
 80054d8:	3714      	adds	r7, #20
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	40010000 	.word	0x40010000
 80054e8:	40000400 	.word	0x40000400
 80054ec:	40000800 	.word	0x40000800
 80054f0:	40000c00 	.word	0x40000c00
 80054f4:	40010400 	.word	0x40010400
 80054f8:	40014000 	.word	0x40014000
 80054fc:	40014400 	.word	0x40014400
 8005500:	40014800 	.word	0x40014800
 8005504:	40001800 	.word	0x40001800
 8005508:	40001c00 	.word	0x40001c00
 800550c:	40002000 	.word	0x40002000

08005510 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005518:	bf00      	nop
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d101      	bne.n	800554a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e03f      	b.n	80055ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b00      	cmp	r3, #0
 8005554:	d106      	bne.n	8005564 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f7fc fcc4 	bl	8001eec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2224      	movs	r2, #36	; 0x24
 8005568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68da      	ldr	r2, [r3, #12]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800557a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 fc7b 	bl	8005e78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	691a      	ldr	r2, [r3, #16]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005590:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	695a      	ldr	r2, [r3, #20]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68da      	ldr	r2, [r3, #12]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2220      	movs	r2, #32
 80055bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2220      	movs	r2, #32
 80055c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3708      	adds	r7, #8
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
	...

080055d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b0ba      	sub	sp, #232	; 0xe8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80055fa:	2300      	movs	r3, #0
 80055fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005600:	2300      	movs	r3, #0
 8005602:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800560a:	f003 030f 	and.w	r3, r3, #15
 800560e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005612:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005616:	2b00      	cmp	r3, #0
 8005618:	d10f      	bne.n	800563a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800561a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800561e:	f003 0320 	and.w	r3, r3, #32
 8005622:	2b00      	cmp	r3, #0
 8005624:	d009      	beq.n	800563a <HAL_UART_IRQHandler+0x66>
 8005626:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800562a:	f003 0320 	and.w	r3, r3, #32
 800562e:	2b00      	cmp	r3, #0
 8005630:	d003      	beq.n	800563a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 fb65 	bl	8005d02 <UART_Receive_IT>
      return;
 8005638:	e256      	b.n	8005ae8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800563a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800563e:	2b00      	cmp	r3, #0
 8005640:	f000 80de 	beq.w	8005800 <HAL_UART_IRQHandler+0x22c>
 8005644:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005648:	f003 0301 	and.w	r3, r3, #1
 800564c:	2b00      	cmp	r3, #0
 800564e:	d106      	bne.n	800565e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005654:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005658:	2b00      	cmp	r3, #0
 800565a:	f000 80d1 	beq.w	8005800 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800565e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00b      	beq.n	8005682 <HAL_UART_IRQHandler+0xae>
 800566a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800566e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005672:	2b00      	cmp	r3, #0
 8005674:	d005      	beq.n	8005682 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567a:	f043 0201 	orr.w	r2, r3, #1
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005686:	f003 0304 	and.w	r3, r3, #4
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00b      	beq.n	80056a6 <HAL_UART_IRQHandler+0xd2>
 800568e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005692:	f003 0301 	and.w	r3, r3, #1
 8005696:	2b00      	cmp	r3, #0
 8005698:	d005      	beq.n	80056a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569e:	f043 0202 	orr.w	r2, r3, #2
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056aa:	f003 0302 	and.w	r3, r3, #2
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d00b      	beq.n	80056ca <HAL_UART_IRQHandler+0xf6>
 80056b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056b6:	f003 0301 	and.w	r3, r3, #1
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d005      	beq.n	80056ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c2:	f043 0204 	orr.w	r2, r3, #4
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80056ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056ce:	f003 0308 	and.w	r3, r3, #8
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d011      	beq.n	80056fa <HAL_UART_IRQHandler+0x126>
 80056d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056da:	f003 0320 	and.w	r3, r3, #32
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d105      	bne.n	80056ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80056e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d005      	beq.n	80056fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f2:	f043 0208 	orr.w	r2, r3, #8
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f000 81ed 	beq.w	8005ade <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005708:	f003 0320 	and.w	r3, r3, #32
 800570c:	2b00      	cmp	r3, #0
 800570e:	d008      	beq.n	8005722 <HAL_UART_IRQHandler+0x14e>
 8005710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005714:	f003 0320 	and.w	r3, r3, #32
 8005718:	2b00      	cmp	r3, #0
 800571a:	d002      	beq.n	8005722 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 faf0 	bl	8005d02 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	695b      	ldr	r3, [r3, #20]
 8005728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800572c:	2b40      	cmp	r3, #64	; 0x40
 800572e:	bf0c      	ite	eq
 8005730:	2301      	moveq	r3, #1
 8005732:	2300      	movne	r3, #0
 8005734:	b2db      	uxtb	r3, r3
 8005736:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573e:	f003 0308 	and.w	r3, r3, #8
 8005742:	2b00      	cmp	r3, #0
 8005744:	d103      	bne.n	800574e <HAL_UART_IRQHandler+0x17a>
 8005746:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800574a:	2b00      	cmp	r3, #0
 800574c:	d04f      	beq.n	80057ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 f9f8 	bl	8005b44 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800575e:	2b40      	cmp	r3, #64	; 0x40
 8005760:	d141      	bne.n	80057e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	3314      	adds	r3, #20
 8005768:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005770:	e853 3f00 	ldrex	r3, [r3]
 8005774:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005778:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800577c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005780:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	3314      	adds	r3, #20
 800578a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800578e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005792:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005796:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800579a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800579e:	e841 2300 	strex	r3, r2, [r1]
 80057a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80057a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1d9      	bne.n	8005762 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d013      	beq.n	80057de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ba:	4a7d      	ldr	r2, [pc, #500]	; (80059b0 <HAL_UART_IRQHandler+0x3dc>)
 80057bc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7fd fc0c 	bl	8002fe0 <HAL_DMA_Abort_IT>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d016      	beq.n	80057fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80057d8:	4610      	mov	r0, r2
 80057da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057dc:	e00e      	b.n	80057fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f99a 	bl	8005b18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057e4:	e00a      	b.n	80057fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f996 	bl	8005b18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057ec:	e006      	b.n	80057fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f992 	bl	8005b18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80057fa:	e170      	b.n	8005ade <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057fc:	bf00      	nop
    return;
 80057fe:	e16e      	b.n	8005ade <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005804:	2b01      	cmp	r3, #1
 8005806:	f040 814a 	bne.w	8005a9e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800580a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800580e:	f003 0310 	and.w	r3, r3, #16
 8005812:	2b00      	cmp	r3, #0
 8005814:	f000 8143 	beq.w	8005a9e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800581c:	f003 0310 	and.w	r3, r3, #16
 8005820:	2b00      	cmp	r3, #0
 8005822:	f000 813c 	beq.w	8005a9e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005826:	2300      	movs	r3, #0
 8005828:	60bb      	str	r3, [r7, #8]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	60bb      	str	r3, [r7, #8]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	60bb      	str	r3, [r7, #8]
 800583a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005846:	2b40      	cmp	r3, #64	; 0x40
 8005848:	f040 80b4 	bne.w	80059b4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005858:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 8140 	beq.w	8005ae2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005866:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800586a:	429a      	cmp	r2, r3
 800586c:	f080 8139 	bcs.w	8005ae2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005876:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587c:	69db      	ldr	r3, [r3, #28]
 800587e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005882:	f000 8088 	beq.w	8005996 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	330c      	adds	r3, #12
 800588c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005890:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005894:	e853 3f00 	ldrex	r3, [r3]
 8005898:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800589c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	330c      	adds	r3, #12
 80058ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80058b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80058b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80058be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80058c2:	e841 2300 	strex	r3, r2, [r1]
 80058c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80058ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1d9      	bne.n	8005886 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	3314      	adds	r3, #20
 80058d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058dc:	e853 3f00 	ldrex	r3, [r3]
 80058e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80058e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058e4:	f023 0301 	bic.w	r3, r3, #1
 80058e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	3314      	adds	r3, #20
 80058f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80058f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80058fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80058fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005902:	e841 2300 	strex	r3, r2, [r1]
 8005906:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005908:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1e1      	bne.n	80058d2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	3314      	adds	r3, #20
 8005914:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005916:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005918:	e853 3f00 	ldrex	r3, [r3]
 800591c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800591e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005920:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005924:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	3314      	adds	r3, #20
 800592e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005932:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005934:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005936:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005938:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800593a:	e841 2300 	strex	r3, r2, [r1]
 800593e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005940:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1e3      	bne.n	800590e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2220      	movs	r2, #32
 800594a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	330c      	adds	r3, #12
 800595a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800595e:	e853 3f00 	ldrex	r3, [r3]
 8005962:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005964:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005966:	f023 0310 	bic.w	r3, r3, #16
 800596a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	330c      	adds	r3, #12
 8005974:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005978:	65ba      	str	r2, [r7, #88]	; 0x58
 800597a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800597e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005980:	e841 2300 	strex	r3, r2, [r1]
 8005984:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1e3      	bne.n	8005954 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005990:	4618      	mov	r0, r3
 8005992:	f7fd fab5 	bl	8002f00 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800599e:	b29b      	uxth	r3, r3
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	4619      	mov	r1, r3
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 f8c0 	bl	8005b2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059ac:	e099      	b.n	8005ae2 <HAL_UART_IRQHandler+0x50e>
 80059ae:	bf00      	nop
 80059b0:	08005c0b 	.word	0x08005c0b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059bc:	b29b      	uxth	r3, r3
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	f000 808b 	beq.w	8005ae6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80059d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f000 8086 	beq.w	8005ae6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	330c      	adds	r3, #12
 80059e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e4:	e853 3f00 	ldrex	r3, [r3]
 80059e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80059ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	330c      	adds	r3, #12
 80059fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80059fe:	647a      	str	r2, [r7, #68]	; 0x44
 8005a00:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a06:	e841 2300 	strex	r3, r2, [r1]
 8005a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1e3      	bne.n	80059da <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	3314      	adds	r3, #20
 8005a18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1c:	e853 3f00 	ldrex	r3, [r3]
 8005a20:	623b      	str	r3, [r7, #32]
   return(result);
 8005a22:	6a3b      	ldr	r3, [r7, #32]
 8005a24:	f023 0301 	bic.w	r3, r3, #1
 8005a28:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	3314      	adds	r3, #20
 8005a32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005a36:	633a      	str	r2, [r7, #48]	; 0x30
 8005a38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a3e:	e841 2300 	strex	r3, r2, [r1]
 8005a42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d1e3      	bne.n	8005a12 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2220      	movs	r2, #32
 8005a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	330c      	adds	r3, #12
 8005a5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	e853 3f00 	ldrex	r3, [r3]
 8005a66:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f023 0310 	bic.w	r3, r3, #16
 8005a6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	330c      	adds	r3, #12
 8005a78:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005a7c:	61fa      	str	r2, [r7, #28]
 8005a7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a80:	69b9      	ldr	r1, [r7, #24]
 8005a82:	69fa      	ldr	r2, [r7, #28]
 8005a84:	e841 2300 	strex	r3, r2, [r1]
 8005a88:	617b      	str	r3, [r7, #20]
   return(result);
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1e3      	bne.n	8005a58 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a94:	4619      	mov	r1, r3
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 f848 	bl	8005b2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a9c:	e023      	b.n	8005ae6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d009      	beq.n	8005abe <HAL_UART_IRQHandler+0x4ea>
 8005aaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d003      	beq.n	8005abe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f8bb 	bl	8005c32 <UART_Transmit_IT>
    return;
 8005abc:	e014      	b.n	8005ae8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00e      	beq.n	8005ae8 <HAL_UART_IRQHandler+0x514>
 8005aca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d008      	beq.n	8005ae8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 f8fb 	bl	8005cd2 <UART_EndTransmit_IT>
    return;
 8005adc:	e004      	b.n	8005ae8 <HAL_UART_IRQHandler+0x514>
    return;
 8005ade:	bf00      	nop
 8005ae0:	e002      	b.n	8005ae8 <HAL_UART_IRQHandler+0x514>
      return;
 8005ae2:	bf00      	nop
 8005ae4:	e000      	b.n	8005ae8 <HAL_UART_IRQHandler+0x514>
      return;
 8005ae6:	bf00      	nop
  }
}
 8005ae8:	37e8      	adds	r7, #232	; 0xe8
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop

08005af0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005af8:	bf00      	nop
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	460b      	mov	r3, r1
 8005b36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b095      	sub	sp, #84	; 0x54
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	330c      	adds	r3, #12
 8005b52:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b56:	e853 3f00 	ldrex	r3, [r3]
 8005b5a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	330c      	adds	r3, #12
 8005b6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b6c:	643a      	str	r2, [r7, #64]	; 0x40
 8005b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b74:	e841 2300 	strex	r3, r2, [r1]
 8005b78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d1e5      	bne.n	8005b4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	3314      	adds	r3, #20
 8005b86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b88:	6a3b      	ldr	r3, [r7, #32]
 8005b8a:	e853 3f00 	ldrex	r3, [r3]
 8005b8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	f023 0301 	bic.w	r3, r3, #1
 8005b96:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	3314      	adds	r3, #20
 8005b9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ba0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ba2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ba6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ba8:	e841 2300 	strex	r3, r2, [r1]
 8005bac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1e5      	bne.n	8005b80 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d119      	bne.n	8005bf0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	330c      	adds	r3, #12
 8005bc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	e853 3f00 	ldrex	r3, [r3]
 8005bca:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	f023 0310 	bic.w	r3, r3, #16
 8005bd2:	647b      	str	r3, [r7, #68]	; 0x44
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	330c      	adds	r3, #12
 8005bda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bdc:	61ba      	str	r2, [r7, #24]
 8005bde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be0:	6979      	ldr	r1, [r7, #20]
 8005be2:	69ba      	ldr	r2, [r7, #24]
 8005be4:	e841 2300 	strex	r3, r2, [r1]
 8005be8:	613b      	str	r3, [r7, #16]
   return(result);
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1e5      	bne.n	8005bbc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2220      	movs	r2, #32
 8005bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005bfe:	bf00      	nop
 8005c00:	3754      	adds	r7, #84	; 0x54
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr

08005c0a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b084      	sub	sp, #16
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c16:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	f7ff ff77 	bl	8005b18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c2a:	bf00      	nop
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005c32:	b480      	push	{r7}
 8005c34:	b085      	sub	sp, #20
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b21      	cmp	r3, #33	; 0x21
 8005c44:	d13e      	bne.n	8005cc4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c4e:	d114      	bne.n	8005c7a <UART_Transmit_IT+0x48>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d110      	bne.n	8005c7a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a1b      	ldr	r3, [r3, #32]
 8005c5c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	881b      	ldrh	r3, [r3, #0]
 8005c62:	461a      	mov	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c6c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	1c9a      	adds	r2, r3, #2
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	621a      	str	r2, [r3, #32]
 8005c78:	e008      	b.n	8005c8c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	1c59      	adds	r1, r3, #1
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	6211      	str	r1, [r2, #32]
 8005c84:	781a      	ldrb	r2, [r3, #0]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	3b01      	subs	r3, #1
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	4619      	mov	r1, r3
 8005c9a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d10f      	bne.n	8005cc0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68da      	ldr	r2, [r3, #12]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68da      	ldr	r2, [r3, #12]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cbe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	e000      	b.n	8005cc6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005cc4:	2302      	movs	r3, #2
  }
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3714      	adds	r7, #20
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr

08005cd2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b082      	sub	sp, #8
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68da      	ldr	r2, [r3, #12]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ce8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2220      	movs	r2, #32
 8005cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f7ff fefc 	bl	8005af0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3708      	adds	r7, #8
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b08c      	sub	sp, #48	; 0x30
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	2b22      	cmp	r3, #34	; 0x22
 8005d14:	f040 80ab 	bne.w	8005e6e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d20:	d117      	bne.n	8005d52 <UART_Receive_IT+0x50>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d113      	bne.n	8005d52 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d32:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d44:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d4a:	1c9a      	adds	r2, r3, #2
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	629a      	str	r2, [r3, #40]	; 0x28
 8005d50:	e026      	b.n	8005da0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d56:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d64:	d007      	beq.n	8005d76 <UART_Receive_IT+0x74>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d10a      	bne.n	8005d84 <UART_Receive_IT+0x82>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d106      	bne.n	8005d84 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	b2da      	uxtb	r2, r3
 8005d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d80:	701a      	strb	r2, [r3, #0]
 8005d82:	e008      	b.n	8005d96 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d90:	b2da      	uxtb	r2, r3
 8005d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d94:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9a:	1c5a      	adds	r2, r3, #1
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	3b01      	subs	r3, #1
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	4619      	mov	r1, r3
 8005dae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d15a      	bne.n	8005e6a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68da      	ldr	r2, [r3, #12]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f022 0220 	bic.w	r2, r2, #32
 8005dc2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68da      	ldr	r2, [r3, #12]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005dd2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	695a      	ldr	r2, [r3, #20]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f022 0201 	bic.w	r2, r2, #1
 8005de2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2220      	movs	r2, #32
 8005de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d135      	bne.n	8005e60 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	330c      	adds	r3, #12
 8005e00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	e853 3f00 	ldrex	r3, [r3]
 8005e08:	613b      	str	r3, [r7, #16]
   return(result);
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	f023 0310 	bic.w	r3, r3, #16
 8005e10:	627b      	str	r3, [r7, #36]	; 0x24
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	330c      	adds	r3, #12
 8005e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e1a:	623a      	str	r2, [r7, #32]
 8005e1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1e:	69f9      	ldr	r1, [r7, #28]
 8005e20:	6a3a      	ldr	r2, [r7, #32]
 8005e22:	e841 2300 	strex	r3, r2, [r1]
 8005e26:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1e5      	bne.n	8005dfa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 0310 	and.w	r3, r3, #16
 8005e38:	2b10      	cmp	r3, #16
 8005e3a:	d10a      	bne.n	8005e52 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	60fb      	str	r3, [r7, #12]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	60fb      	str	r3, [r7, #12]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	60fb      	str	r3, [r7, #12]
 8005e50:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e56:	4619      	mov	r1, r3
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f7ff fe67 	bl	8005b2c <HAL_UARTEx_RxEventCallback>
 8005e5e:	e002      	b.n	8005e66 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f7ff fe4f 	bl	8005b04 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e66:	2300      	movs	r3, #0
 8005e68:	e002      	b.n	8005e70 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	e000      	b.n	8005e70 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005e6e:	2302      	movs	r3, #2
  }
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3730      	adds	r7, #48	; 0x30
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e7c:	b0c0      	sub	sp, #256	; 0x100
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e94:	68d9      	ldr	r1, [r3, #12]
 8005e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	ea40 0301 	orr.w	r3, r0, r1
 8005ea0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ea6:	689a      	ldr	r2, [r3, #8]
 8005ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	431a      	orrs	r2, r3
 8005eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	431a      	orrs	r2, r3
 8005eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ebc:	69db      	ldr	r3, [r3, #28]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005ed0:	f021 010c 	bic.w	r1, r1, #12
 8005ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ede:	430b      	orrs	r3, r1
 8005ee0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	695b      	ldr	r3, [r3, #20]
 8005eea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ef2:	6999      	ldr	r1, [r3, #24]
 8005ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	ea40 0301 	orr.w	r3, r0, r1
 8005efe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	4b8f      	ldr	r3, [pc, #572]	; (8006144 <UART_SetConfig+0x2cc>)
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d005      	beq.n	8005f18 <UART_SetConfig+0xa0>
 8005f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	4b8d      	ldr	r3, [pc, #564]	; (8006148 <UART_SetConfig+0x2d0>)
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d104      	bne.n	8005f22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f18:	f7ff f824 	bl	8004f64 <HAL_RCC_GetPCLK2Freq>
 8005f1c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005f20:	e003      	b.n	8005f2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f22:	f7ff f80b 	bl	8004f3c <HAL_RCC_GetPCLK1Freq>
 8005f26:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f2e:	69db      	ldr	r3, [r3, #28]
 8005f30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f34:	f040 810c 	bne.w	8006150 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f42:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005f46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005f4a:	4622      	mov	r2, r4
 8005f4c:	462b      	mov	r3, r5
 8005f4e:	1891      	adds	r1, r2, r2
 8005f50:	65b9      	str	r1, [r7, #88]	; 0x58
 8005f52:	415b      	adcs	r3, r3
 8005f54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005f5a:	4621      	mov	r1, r4
 8005f5c:	eb12 0801 	adds.w	r8, r2, r1
 8005f60:	4629      	mov	r1, r5
 8005f62:	eb43 0901 	adc.w	r9, r3, r1
 8005f66:	f04f 0200 	mov.w	r2, #0
 8005f6a:	f04f 0300 	mov.w	r3, #0
 8005f6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f7a:	4690      	mov	r8, r2
 8005f7c:	4699      	mov	r9, r3
 8005f7e:	4623      	mov	r3, r4
 8005f80:	eb18 0303 	adds.w	r3, r8, r3
 8005f84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f88:	462b      	mov	r3, r5
 8005f8a:	eb49 0303 	adc.w	r3, r9, r3
 8005f8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f9e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005fa2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	18db      	adds	r3, r3, r3
 8005faa:	653b      	str	r3, [r7, #80]	; 0x50
 8005fac:	4613      	mov	r3, r2
 8005fae:	eb42 0303 	adc.w	r3, r2, r3
 8005fb2:	657b      	str	r3, [r7, #84]	; 0x54
 8005fb4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005fb8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005fbc:	f7fa f968 	bl	8000290 <__aeabi_uldivmod>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	4b61      	ldr	r3, [pc, #388]	; (800614c <UART_SetConfig+0x2d4>)
 8005fc6:	fba3 2302 	umull	r2, r3, r3, r2
 8005fca:	095b      	lsrs	r3, r3, #5
 8005fcc:	011c      	lsls	r4, r3, #4
 8005fce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005fd8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005fdc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005fe0:	4642      	mov	r2, r8
 8005fe2:	464b      	mov	r3, r9
 8005fe4:	1891      	adds	r1, r2, r2
 8005fe6:	64b9      	str	r1, [r7, #72]	; 0x48
 8005fe8:	415b      	adcs	r3, r3
 8005fea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005ff0:	4641      	mov	r1, r8
 8005ff2:	eb12 0a01 	adds.w	sl, r2, r1
 8005ff6:	4649      	mov	r1, r9
 8005ff8:	eb43 0b01 	adc.w	fp, r3, r1
 8005ffc:	f04f 0200 	mov.w	r2, #0
 8006000:	f04f 0300 	mov.w	r3, #0
 8006004:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006008:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800600c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006010:	4692      	mov	sl, r2
 8006012:	469b      	mov	fp, r3
 8006014:	4643      	mov	r3, r8
 8006016:	eb1a 0303 	adds.w	r3, sl, r3
 800601a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800601e:	464b      	mov	r3, r9
 8006020:	eb4b 0303 	adc.w	r3, fp, r3
 8006024:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006034:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006038:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800603c:	460b      	mov	r3, r1
 800603e:	18db      	adds	r3, r3, r3
 8006040:	643b      	str	r3, [r7, #64]	; 0x40
 8006042:	4613      	mov	r3, r2
 8006044:	eb42 0303 	adc.w	r3, r2, r3
 8006048:	647b      	str	r3, [r7, #68]	; 0x44
 800604a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800604e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006052:	f7fa f91d 	bl	8000290 <__aeabi_uldivmod>
 8006056:	4602      	mov	r2, r0
 8006058:	460b      	mov	r3, r1
 800605a:	4611      	mov	r1, r2
 800605c:	4b3b      	ldr	r3, [pc, #236]	; (800614c <UART_SetConfig+0x2d4>)
 800605e:	fba3 2301 	umull	r2, r3, r3, r1
 8006062:	095b      	lsrs	r3, r3, #5
 8006064:	2264      	movs	r2, #100	; 0x64
 8006066:	fb02 f303 	mul.w	r3, r2, r3
 800606a:	1acb      	subs	r3, r1, r3
 800606c:	00db      	lsls	r3, r3, #3
 800606e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006072:	4b36      	ldr	r3, [pc, #216]	; (800614c <UART_SetConfig+0x2d4>)
 8006074:	fba3 2302 	umull	r2, r3, r3, r2
 8006078:	095b      	lsrs	r3, r3, #5
 800607a:	005b      	lsls	r3, r3, #1
 800607c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006080:	441c      	add	r4, r3
 8006082:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006086:	2200      	movs	r2, #0
 8006088:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800608c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006090:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006094:	4642      	mov	r2, r8
 8006096:	464b      	mov	r3, r9
 8006098:	1891      	adds	r1, r2, r2
 800609a:	63b9      	str	r1, [r7, #56]	; 0x38
 800609c:	415b      	adcs	r3, r3
 800609e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80060a4:	4641      	mov	r1, r8
 80060a6:	1851      	adds	r1, r2, r1
 80060a8:	6339      	str	r1, [r7, #48]	; 0x30
 80060aa:	4649      	mov	r1, r9
 80060ac:	414b      	adcs	r3, r1
 80060ae:	637b      	str	r3, [r7, #52]	; 0x34
 80060b0:	f04f 0200 	mov.w	r2, #0
 80060b4:	f04f 0300 	mov.w	r3, #0
 80060b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80060bc:	4659      	mov	r1, fp
 80060be:	00cb      	lsls	r3, r1, #3
 80060c0:	4651      	mov	r1, sl
 80060c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060c6:	4651      	mov	r1, sl
 80060c8:	00ca      	lsls	r2, r1, #3
 80060ca:	4610      	mov	r0, r2
 80060cc:	4619      	mov	r1, r3
 80060ce:	4603      	mov	r3, r0
 80060d0:	4642      	mov	r2, r8
 80060d2:	189b      	adds	r3, r3, r2
 80060d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80060d8:	464b      	mov	r3, r9
 80060da:	460a      	mov	r2, r1
 80060dc:	eb42 0303 	adc.w	r3, r2, r3
 80060e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80060e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80060f0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80060f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80060f8:	460b      	mov	r3, r1
 80060fa:	18db      	adds	r3, r3, r3
 80060fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80060fe:	4613      	mov	r3, r2
 8006100:	eb42 0303 	adc.w	r3, r2, r3
 8006104:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006106:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800610a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800610e:	f7fa f8bf 	bl	8000290 <__aeabi_uldivmod>
 8006112:	4602      	mov	r2, r0
 8006114:	460b      	mov	r3, r1
 8006116:	4b0d      	ldr	r3, [pc, #52]	; (800614c <UART_SetConfig+0x2d4>)
 8006118:	fba3 1302 	umull	r1, r3, r3, r2
 800611c:	095b      	lsrs	r3, r3, #5
 800611e:	2164      	movs	r1, #100	; 0x64
 8006120:	fb01 f303 	mul.w	r3, r1, r3
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	00db      	lsls	r3, r3, #3
 8006128:	3332      	adds	r3, #50	; 0x32
 800612a:	4a08      	ldr	r2, [pc, #32]	; (800614c <UART_SetConfig+0x2d4>)
 800612c:	fba2 2303 	umull	r2, r3, r2, r3
 8006130:	095b      	lsrs	r3, r3, #5
 8006132:	f003 0207 	and.w	r2, r3, #7
 8006136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4422      	add	r2, r4
 800613e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006140:	e105      	b.n	800634e <UART_SetConfig+0x4d6>
 8006142:	bf00      	nop
 8006144:	40011000 	.word	0x40011000
 8006148:	40011400 	.word	0x40011400
 800614c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006150:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006154:	2200      	movs	r2, #0
 8006156:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800615a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800615e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006162:	4642      	mov	r2, r8
 8006164:	464b      	mov	r3, r9
 8006166:	1891      	adds	r1, r2, r2
 8006168:	6239      	str	r1, [r7, #32]
 800616a:	415b      	adcs	r3, r3
 800616c:	627b      	str	r3, [r7, #36]	; 0x24
 800616e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006172:	4641      	mov	r1, r8
 8006174:	1854      	adds	r4, r2, r1
 8006176:	4649      	mov	r1, r9
 8006178:	eb43 0501 	adc.w	r5, r3, r1
 800617c:	f04f 0200 	mov.w	r2, #0
 8006180:	f04f 0300 	mov.w	r3, #0
 8006184:	00eb      	lsls	r3, r5, #3
 8006186:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800618a:	00e2      	lsls	r2, r4, #3
 800618c:	4614      	mov	r4, r2
 800618e:	461d      	mov	r5, r3
 8006190:	4643      	mov	r3, r8
 8006192:	18e3      	adds	r3, r4, r3
 8006194:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006198:	464b      	mov	r3, r9
 800619a:	eb45 0303 	adc.w	r3, r5, r3
 800619e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80061a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80061ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80061b2:	f04f 0200 	mov.w	r2, #0
 80061b6:	f04f 0300 	mov.w	r3, #0
 80061ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80061be:	4629      	mov	r1, r5
 80061c0:	008b      	lsls	r3, r1, #2
 80061c2:	4621      	mov	r1, r4
 80061c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061c8:	4621      	mov	r1, r4
 80061ca:	008a      	lsls	r2, r1, #2
 80061cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80061d0:	f7fa f85e 	bl	8000290 <__aeabi_uldivmod>
 80061d4:	4602      	mov	r2, r0
 80061d6:	460b      	mov	r3, r1
 80061d8:	4b60      	ldr	r3, [pc, #384]	; (800635c <UART_SetConfig+0x4e4>)
 80061da:	fba3 2302 	umull	r2, r3, r3, r2
 80061de:	095b      	lsrs	r3, r3, #5
 80061e0:	011c      	lsls	r4, r3, #4
 80061e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061e6:	2200      	movs	r2, #0
 80061e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80061ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80061f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80061f4:	4642      	mov	r2, r8
 80061f6:	464b      	mov	r3, r9
 80061f8:	1891      	adds	r1, r2, r2
 80061fa:	61b9      	str	r1, [r7, #24]
 80061fc:	415b      	adcs	r3, r3
 80061fe:	61fb      	str	r3, [r7, #28]
 8006200:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006204:	4641      	mov	r1, r8
 8006206:	1851      	adds	r1, r2, r1
 8006208:	6139      	str	r1, [r7, #16]
 800620a:	4649      	mov	r1, r9
 800620c:	414b      	adcs	r3, r1
 800620e:	617b      	str	r3, [r7, #20]
 8006210:	f04f 0200 	mov.w	r2, #0
 8006214:	f04f 0300 	mov.w	r3, #0
 8006218:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800621c:	4659      	mov	r1, fp
 800621e:	00cb      	lsls	r3, r1, #3
 8006220:	4651      	mov	r1, sl
 8006222:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006226:	4651      	mov	r1, sl
 8006228:	00ca      	lsls	r2, r1, #3
 800622a:	4610      	mov	r0, r2
 800622c:	4619      	mov	r1, r3
 800622e:	4603      	mov	r3, r0
 8006230:	4642      	mov	r2, r8
 8006232:	189b      	adds	r3, r3, r2
 8006234:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006238:	464b      	mov	r3, r9
 800623a:	460a      	mov	r2, r1
 800623c:	eb42 0303 	adc.w	r3, r2, r3
 8006240:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	67bb      	str	r3, [r7, #120]	; 0x78
 800624e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006250:	f04f 0200 	mov.w	r2, #0
 8006254:	f04f 0300 	mov.w	r3, #0
 8006258:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800625c:	4649      	mov	r1, r9
 800625e:	008b      	lsls	r3, r1, #2
 8006260:	4641      	mov	r1, r8
 8006262:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006266:	4641      	mov	r1, r8
 8006268:	008a      	lsls	r2, r1, #2
 800626a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800626e:	f7fa f80f 	bl	8000290 <__aeabi_uldivmod>
 8006272:	4602      	mov	r2, r0
 8006274:	460b      	mov	r3, r1
 8006276:	4b39      	ldr	r3, [pc, #228]	; (800635c <UART_SetConfig+0x4e4>)
 8006278:	fba3 1302 	umull	r1, r3, r3, r2
 800627c:	095b      	lsrs	r3, r3, #5
 800627e:	2164      	movs	r1, #100	; 0x64
 8006280:	fb01 f303 	mul.w	r3, r1, r3
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	011b      	lsls	r3, r3, #4
 8006288:	3332      	adds	r3, #50	; 0x32
 800628a:	4a34      	ldr	r2, [pc, #208]	; (800635c <UART_SetConfig+0x4e4>)
 800628c:	fba2 2303 	umull	r2, r3, r2, r3
 8006290:	095b      	lsrs	r3, r3, #5
 8006292:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006296:	441c      	add	r4, r3
 8006298:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800629c:	2200      	movs	r2, #0
 800629e:	673b      	str	r3, [r7, #112]	; 0x70
 80062a0:	677a      	str	r2, [r7, #116]	; 0x74
 80062a2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80062a6:	4642      	mov	r2, r8
 80062a8:	464b      	mov	r3, r9
 80062aa:	1891      	adds	r1, r2, r2
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	415b      	adcs	r3, r3
 80062b0:	60fb      	str	r3, [r7, #12]
 80062b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062b6:	4641      	mov	r1, r8
 80062b8:	1851      	adds	r1, r2, r1
 80062ba:	6039      	str	r1, [r7, #0]
 80062bc:	4649      	mov	r1, r9
 80062be:	414b      	adcs	r3, r1
 80062c0:	607b      	str	r3, [r7, #4]
 80062c2:	f04f 0200 	mov.w	r2, #0
 80062c6:	f04f 0300 	mov.w	r3, #0
 80062ca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80062ce:	4659      	mov	r1, fp
 80062d0:	00cb      	lsls	r3, r1, #3
 80062d2:	4651      	mov	r1, sl
 80062d4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062d8:	4651      	mov	r1, sl
 80062da:	00ca      	lsls	r2, r1, #3
 80062dc:	4610      	mov	r0, r2
 80062de:	4619      	mov	r1, r3
 80062e0:	4603      	mov	r3, r0
 80062e2:	4642      	mov	r2, r8
 80062e4:	189b      	adds	r3, r3, r2
 80062e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80062e8:	464b      	mov	r3, r9
 80062ea:	460a      	mov	r2, r1
 80062ec:	eb42 0303 	adc.w	r3, r2, r3
 80062f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80062f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	663b      	str	r3, [r7, #96]	; 0x60
 80062fc:	667a      	str	r2, [r7, #100]	; 0x64
 80062fe:	f04f 0200 	mov.w	r2, #0
 8006302:	f04f 0300 	mov.w	r3, #0
 8006306:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800630a:	4649      	mov	r1, r9
 800630c:	008b      	lsls	r3, r1, #2
 800630e:	4641      	mov	r1, r8
 8006310:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006314:	4641      	mov	r1, r8
 8006316:	008a      	lsls	r2, r1, #2
 8006318:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800631c:	f7f9 ffb8 	bl	8000290 <__aeabi_uldivmod>
 8006320:	4602      	mov	r2, r0
 8006322:	460b      	mov	r3, r1
 8006324:	4b0d      	ldr	r3, [pc, #52]	; (800635c <UART_SetConfig+0x4e4>)
 8006326:	fba3 1302 	umull	r1, r3, r3, r2
 800632a:	095b      	lsrs	r3, r3, #5
 800632c:	2164      	movs	r1, #100	; 0x64
 800632e:	fb01 f303 	mul.w	r3, r1, r3
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	011b      	lsls	r3, r3, #4
 8006336:	3332      	adds	r3, #50	; 0x32
 8006338:	4a08      	ldr	r2, [pc, #32]	; (800635c <UART_SetConfig+0x4e4>)
 800633a:	fba2 2303 	umull	r2, r3, r2, r3
 800633e:	095b      	lsrs	r3, r3, #5
 8006340:	f003 020f 	and.w	r2, r3, #15
 8006344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4422      	add	r2, r4
 800634c:	609a      	str	r2, [r3, #8]
}
 800634e:	bf00      	nop
 8006350:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006354:	46bd      	mov	sp, r7
 8006356:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800635a:	bf00      	nop
 800635c:	51eb851f 	.word	0x51eb851f

08006360 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006360:	b084      	sub	sp, #16
 8006362:	b580      	push	{r7, lr}
 8006364:	b084      	sub	sp, #16
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
 800636a:	f107 001c 	add.w	r0, r7, #28
 800636e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006374:	2b01      	cmp	r3, #1
 8006376:	d122      	bne.n	80063be <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800637c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800638c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80063a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d105      	bne.n	80063b2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 faa2 	bl	80068fc <USB_CoreReset>
 80063b8:	4603      	mov	r3, r0
 80063ba:	73fb      	strb	r3, [r7, #15]
 80063bc:	e01a      	b.n	80063f4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 fa96 	bl	80068fc <USB_CoreReset>
 80063d0:	4603      	mov	r3, r0
 80063d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80063d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d106      	bne.n	80063e8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	639a      	str	r2, [r3, #56]	; 0x38
 80063e6:	e005      	b.n	80063f4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80063f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d10b      	bne.n	8006412 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	f043 0206 	orr.w	r2, r3, #6
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	f043 0220 	orr.w	r2, r3, #32
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006412:	7bfb      	ldrb	r3, [r7, #15]
}
 8006414:	4618      	mov	r0, r3
 8006416:	3710      	adds	r7, #16
 8006418:	46bd      	mov	sp, r7
 800641a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800641e:	b004      	add	sp, #16
 8006420:	4770      	bx	lr

08006422 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006422:	b480      	push	{r7}
 8006424:	b083      	sub	sp, #12
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f023 0201 	bic.w	r2, r3, #1
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	460b      	mov	r3, r1
 800644e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006450:	2300      	movs	r3, #0
 8006452:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006460:	78fb      	ldrb	r3, [r7, #3]
 8006462:	2b01      	cmp	r3, #1
 8006464:	d115      	bne.n	8006492 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006472:	2001      	movs	r0, #1
 8006474:	f7fb ff76 	bl	8002364 <HAL_Delay>
      ms++;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	3301      	adds	r3, #1
 800647c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 fa2e 	bl	80068e0 <USB_GetMode>
 8006484:	4603      	mov	r3, r0
 8006486:	2b01      	cmp	r3, #1
 8006488:	d01e      	beq.n	80064c8 <USB_SetCurrentMode+0x84>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2b31      	cmp	r3, #49	; 0x31
 800648e:	d9f0      	bls.n	8006472 <USB_SetCurrentMode+0x2e>
 8006490:	e01a      	b.n	80064c8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006492:	78fb      	ldrb	r3, [r7, #3]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d115      	bne.n	80064c4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80064a4:	2001      	movs	r0, #1
 80064a6:	f7fb ff5d 	bl	8002364 <HAL_Delay>
      ms++;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	3301      	adds	r3, #1
 80064ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 fa15 	bl	80068e0 <USB_GetMode>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d005      	beq.n	80064c8 <USB_SetCurrentMode+0x84>
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2b31      	cmp	r3, #49	; 0x31
 80064c0:	d9f0      	bls.n	80064a4 <USB_SetCurrentMode+0x60>
 80064c2:	e001      	b.n	80064c8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e005      	b.n	80064d4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2b32      	cmp	r3, #50	; 0x32
 80064cc:	d101      	bne.n	80064d2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e000      	b.n	80064d4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064dc:	b084      	sub	sp, #16
 80064de:	b580      	push	{r7, lr}
 80064e0:	b086      	sub	sp, #24
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
 80064e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80064ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80064ee:	2300      	movs	r3, #0
 80064f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80064f6:	2300      	movs	r3, #0
 80064f8:	613b      	str	r3, [r7, #16]
 80064fa:	e009      	b.n	8006510 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	3340      	adds	r3, #64	; 0x40
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	4413      	add	r3, r2
 8006506:	2200      	movs	r2, #0
 8006508:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	3301      	adds	r3, #1
 800650e:	613b      	str	r3, [r7, #16]
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	2b0e      	cmp	r3, #14
 8006514:	d9f2      	bls.n	80064fc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006518:	2b00      	cmp	r3, #0
 800651a:	d11c      	bne.n	8006556 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800652a:	f043 0302 	orr.w	r3, r3, #2
 800652e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006534:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006540:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800654c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	639a      	str	r2, [r3, #56]	; 0x38
 8006554:	e00b      	b.n	800656e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800655a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006566:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006574:	461a      	mov	r2, r3
 8006576:	2300      	movs	r3, #0
 8006578:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006580:	4619      	mov	r1, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006588:	461a      	mov	r2, r3
 800658a:	680b      	ldr	r3, [r1, #0]
 800658c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800658e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006590:	2b01      	cmp	r3, #1
 8006592:	d10c      	bne.n	80065ae <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006596:	2b00      	cmp	r3, #0
 8006598:	d104      	bne.n	80065a4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800659a:	2100      	movs	r1, #0
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 f965 	bl	800686c <USB_SetDevSpeed>
 80065a2:	e008      	b.n	80065b6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80065a4:	2101      	movs	r1, #1
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 f960 	bl	800686c <USB_SetDevSpeed>
 80065ac:	e003      	b.n	80065b6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80065ae:	2103      	movs	r1, #3
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f95b 	bl	800686c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80065b6:	2110      	movs	r1, #16
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 f8f3 	bl	80067a4 <USB_FlushTxFifo>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d001      	beq.n	80065c8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 f91f 	bl	800680c <USB_FlushRxFifo>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d001      	beq.n	80065d8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065de:	461a      	mov	r2, r3
 80065e0:	2300      	movs	r3, #0
 80065e2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ea:	461a      	mov	r2, r3
 80065ec:	2300      	movs	r3, #0
 80065ee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065f6:	461a      	mov	r2, r3
 80065f8:	2300      	movs	r3, #0
 80065fa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065fc:	2300      	movs	r3, #0
 80065fe:	613b      	str	r3, [r7, #16]
 8006600:	e043      	b.n	800668a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	015a      	lsls	r2, r3, #5
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	4413      	add	r3, r2
 800660a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006614:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006618:	d118      	bne.n	800664c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d10a      	bne.n	8006636 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	015a      	lsls	r2, r3, #5
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	4413      	add	r3, r2
 8006628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800662c:	461a      	mov	r2, r3
 800662e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006632:	6013      	str	r3, [r2, #0]
 8006634:	e013      	b.n	800665e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	015a      	lsls	r2, r3, #5
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	4413      	add	r3, r2
 800663e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006642:	461a      	mov	r2, r3
 8006644:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006648:	6013      	str	r3, [r2, #0]
 800664a:	e008      	b.n	800665e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	015a      	lsls	r2, r3, #5
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	4413      	add	r3, r2
 8006654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006658:	461a      	mov	r2, r3
 800665a:	2300      	movs	r3, #0
 800665c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	015a      	lsls	r2, r3, #5
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	4413      	add	r3, r2
 8006666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800666a:	461a      	mov	r2, r3
 800666c:	2300      	movs	r3, #0
 800666e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	015a      	lsls	r2, r3, #5
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	4413      	add	r3, r2
 8006678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800667c:	461a      	mov	r2, r3
 800667e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006682:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	3301      	adds	r3, #1
 8006688:	613b      	str	r3, [r7, #16]
 800668a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668c:	693a      	ldr	r2, [r7, #16]
 800668e:	429a      	cmp	r2, r3
 8006690:	d3b7      	bcc.n	8006602 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006692:	2300      	movs	r3, #0
 8006694:	613b      	str	r3, [r7, #16]
 8006696:	e043      	b.n	8006720 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	015a      	lsls	r2, r3, #5
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	4413      	add	r3, r2
 80066a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066ae:	d118      	bne.n	80066e2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d10a      	bne.n	80066cc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	015a      	lsls	r2, r3, #5
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	4413      	add	r3, r2
 80066be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066c2:	461a      	mov	r2, r3
 80066c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80066c8:	6013      	str	r3, [r2, #0]
 80066ca:	e013      	b.n	80066f4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	015a      	lsls	r2, r3, #5
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	4413      	add	r3, r2
 80066d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d8:	461a      	mov	r2, r3
 80066da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80066de:	6013      	str	r3, [r2, #0]
 80066e0:	e008      	b.n	80066f4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	015a      	lsls	r2, r3, #5
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	4413      	add	r3, r2
 80066ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ee:	461a      	mov	r2, r3
 80066f0:	2300      	movs	r3, #0
 80066f2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	015a      	lsls	r2, r3, #5
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	4413      	add	r3, r2
 80066fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006700:	461a      	mov	r2, r3
 8006702:	2300      	movs	r3, #0
 8006704:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	015a      	lsls	r2, r3, #5
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	4413      	add	r3, r2
 800670e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006712:	461a      	mov	r2, r3
 8006714:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006718:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	3301      	adds	r3, #1
 800671e:	613b      	str	r3, [r7, #16]
 8006720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006722:	693a      	ldr	r2, [r7, #16]
 8006724:	429a      	cmp	r2, r3
 8006726:	d3b7      	bcc.n	8006698 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006736:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800673a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006748:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800674a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674c:	2b00      	cmp	r3, #0
 800674e:	d105      	bne.n	800675c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	f043 0210 	orr.w	r2, r3, #16
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	699a      	ldr	r2, [r3, #24]
 8006760:	4b0f      	ldr	r3, [pc, #60]	; (80067a0 <USB_DevInit+0x2c4>)
 8006762:	4313      	orrs	r3, r2
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800676a:	2b00      	cmp	r3, #0
 800676c:	d005      	beq.n	800677a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	699b      	ldr	r3, [r3, #24]
 8006772:	f043 0208 	orr.w	r2, r3, #8
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800677a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800677c:	2b01      	cmp	r3, #1
 800677e:	d107      	bne.n	8006790 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	699b      	ldr	r3, [r3, #24]
 8006784:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006788:	f043 0304 	orr.w	r3, r3, #4
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006790:	7dfb      	ldrb	r3, [r7, #23]
}
 8006792:	4618      	mov	r0, r3
 8006794:	3718      	adds	r7, #24
 8006796:	46bd      	mov	sp, r7
 8006798:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800679c:	b004      	add	sp, #16
 800679e:	4770      	bx	lr
 80067a0:	803c3800 	.word	0x803c3800

080067a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b085      	sub	sp, #20
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80067ae:	2300      	movs	r3, #0
 80067b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	3301      	adds	r3, #1
 80067b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	4a13      	ldr	r2, [pc, #76]	; (8006808 <USB_FlushTxFifo+0x64>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d901      	bls.n	80067c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e01b      	b.n	80067fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	691b      	ldr	r3, [r3, #16]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	daf2      	bge.n	80067b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80067cc:	2300      	movs	r3, #0
 80067ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	019b      	lsls	r3, r3, #6
 80067d4:	f043 0220 	orr.w	r2, r3, #32
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	3301      	adds	r3, #1
 80067e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	4a08      	ldr	r2, [pc, #32]	; (8006808 <USB_FlushTxFifo+0x64>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d901      	bls.n	80067ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80067ea:	2303      	movs	r3, #3
 80067ec:	e006      	b.n	80067fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	f003 0320 	and.w	r3, r3, #32
 80067f6:	2b20      	cmp	r3, #32
 80067f8:	d0f0      	beq.n	80067dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3714      	adds	r7, #20
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr
 8006808:	00030d40 	.word	0x00030d40

0800680c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006814:	2300      	movs	r3, #0
 8006816:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	3301      	adds	r3, #1
 800681c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	4a11      	ldr	r2, [pc, #68]	; (8006868 <USB_FlushRxFifo+0x5c>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d901      	bls.n	800682a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006826:	2303      	movs	r3, #3
 8006828:	e018      	b.n	800685c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	2b00      	cmp	r3, #0
 8006830:	daf2      	bge.n	8006818 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006832:	2300      	movs	r3, #0
 8006834:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2210      	movs	r2, #16
 800683a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	3301      	adds	r3, #1
 8006840:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	4a08      	ldr	r2, [pc, #32]	; (8006868 <USB_FlushRxFifo+0x5c>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d901      	bls.n	800684e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800684a:	2303      	movs	r3, #3
 800684c:	e006      	b.n	800685c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	f003 0310 	and.w	r3, r3, #16
 8006856:	2b10      	cmp	r3, #16
 8006858:	d0f0      	beq.n	800683c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800685a:	2300      	movs	r3, #0
}
 800685c:	4618      	mov	r0, r3
 800685e:	3714      	adds	r7, #20
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr
 8006868:	00030d40 	.word	0x00030d40

0800686c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	460b      	mov	r3, r1
 8006876:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	78fb      	ldrb	r3, [r7, #3]
 8006886:	68f9      	ldr	r1, [r7, #12]
 8006888:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800688c:	4313      	orrs	r3, r2
 800688e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3714      	adds	r7, #20
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr

0800689e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800689e:	b480      	push	{r7}
 80068a0:	b085      	sub	sp, #20
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80068b8:	f023 0303 	bic.w	r3, r3, #3
 80068bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068cc:	f043 0302 	orr.w	r3, r3, #2
 80068d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80068d2:	2300      	movs	r3, #0
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3714      	adds	r7, #20
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	695b      	ldr	r3, [r3, #20]
 80068ec:	f003 0301 	and.w	r3, r3, #1
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b085      	sub	sp, #20
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006904:	2300      	movs	r3, #0
 8006906:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	3301      	adds	r3, #1
 800690c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	4a13      	ldr	r2, [pc, #76]	; (8006960 <USB_CoreReset+0x64>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d901      	bls.n	800691a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006916:	2303      	movs	r3, #3
 8006918:	e01b      	b.n	8006952 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	2b00      	cmp	r3, #0
 8006920:	daf2      	bge.n	8006908 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006922:	2300      	movs	r3, #0
 8006924:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	f043 0201 	orr.w	r2, r3, #1
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	3301      	adds	r3, #1
 8006936:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	4a09      	ldr	r2, [pc, #36]	; (8006960 <USB_CoreReset+0x64>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d901      	bls.n	8006944 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006940:	2303      	movs	r3, #3
 8006942:	e006      	b.n	8006952 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	f003 0301 	and.w	r3, r3, #1
 800694c:	2b01      	cmp	r3, #1
 800694e:	d0f0      	beq.n	8006932 <USB_CoreReset+0x36>

  return HAL_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	3714      	adds	r7, #20
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	00030d40 	.word	0x00030d40

08006964 <__NVIC_SetPriority>:
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	4603      	mov	r3, r0
 800696c:	6039      	str	r1, [r7, #0]
 800696e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006974:	2b00      	cmp	r3, #0
 8006976:	db0a      	blt.n	800698e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	b2da      	uxtb	r2, r3
 800697c:	490c      	ldr	r1, [pc, #48]	; (80069b0 <__NVIC_SetPriority+0x4c>)
 800697e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006982:	0112      	lsls	r2, r2, #4
 8006984:	b2d2      	uxtb	r2, r2
 8006986:	440b      	add	r3, r1
 8006988:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800698c:	e00a      	b.n	80069a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	b2da      	uxtb	r2, r3
 8006992:	4908      	ldr	r1, [pc, #32]	; (80069b4 <__NVIC_SetPriority+0x50>)
 8006994:	79fb      	ldrb	r3, [r7, #7]
 8006996:	f003 030f 	and.w	r3, r3, #15
 800699a:	3b04      	subs	r3, #4
 800699c:	0112      	lsls	r2, r2, #4
 800699e:	b2d2      	uxtb	r2, r2
 80069a0:	440b      	add	r3, r1
 80069a2:	761a      	strb	r2, [r3, #24]
}
 80069a4:	bf00      	nop
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr
 80069b0:	e000e100 	.word	0xe000e100
 80069b4:	e000ed00 	.word	0xe000ed00

080069b8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80069b8:	b580      	push	{r7, lr}
 80069ba:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80069bc:	4b05      	ldr	r3, [pc, #20]	; (80069d4 <SysTick_Handler+0x1c>)
 80069be:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80069c0:	f002 fa58 	bl	8008e74 <xTaskGetSchedulerState>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d001      	beq.n	80069ce <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80069ca:	f003 f875 	bl	8009ab8 <xPortSysTickHandler>
  }
}
 80069ce:	bf00      	nop
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	e000e010 	.word	0xe000e010

080069d8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80069d8:	b580      	push	{r7, lr}
 80069da:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80069dc:	2100      	movs	r1, #0
 80069de:	f06f 0004 	mvn.w	r0, #4
 80069e2:	f7ff ffbf 	bl	8006964 <__NVIC_SetPriority>
#endif
}
 80069e6:	bf00      	nop
 80069e8:	bd80      	pop	{r7, pc}
	...

080069ec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069f2:	f3ef 8305 	mrs	r3, IPSR
 80069f6:	603b      	str	r3, [r7, #0]
  return(result);
 80069f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d003      	beq.n	8006a06 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80069fe:	f06f 0305 	mvn.w	r3, #5
 8006a02:	607b      	str	r3, [r7, #4]
 8006a04:	e00c      	b.n	8006a20 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006a06:	4b0a      	ldr	r3, [pc, #40]	; (8006a30 <osKernelInitialize+0x44>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d105      	bne.n	8006a1a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006a0e:	4b08      	ldr	r3, [pc, #32]	; (8006a30 <osKernelInitialize+0x44>)
 8006a10:	2201      	movs	r2, #1
 8006a12:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006a14:	2300      	movs	r3, #0
 8006a16:	607b      	str	r3, [r7, #4]
 8006a18:	e002      	b.n	8006a20 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a1e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006a20:	687b      	ldr	r3, [r7, #4]
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	370c      	adds	r7, #12
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr
 8006a2e:	bf00      	nop
 8006a30:	200009f8 	.word	0x200009f8

08006a34 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b082      	sub	sp, #8
 8006a38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a3a:	f3ef 8305 	mrs	r3, IPSR
 8006a3e:	603b      	str	r3, [r7, #0]
  return(result);
 8006a40:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d003      	beq.n	8006a4e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006a46:	f06f 0305 	mvn.w	r3, #5
 8006a4a:	607b      	str	r3, [r7, #4]
 8006a4c:	e010      	b.n	8006a70 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006a4e:	4b0b      	ldr	r3, [pc, #44]	; (8006a7c <osKernelStart+0x48>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d109      	bne.n	8006a6a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006a56:	f7ff ffbf 	bl	80069d8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006a5a:	4b08      	ldr	r3, [pc, #32]	; (8006a7c <osKernelStart+0x48>)
 8006a5c:	2202      	movs	r2, #2
 8006a5e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006a60:	f001 fd0e 	bl	8008480 <vTaskStartScheduler>
      stat = osOK;
 8006a64:	2300      	movs	r3, #0
 8006a66:	607b      	str	r3, [r7, #4]
 8006a68:	e002      	b.n	8006a70 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a6e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006a70:	687b      	ldr	r3, [r7, #4]
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3708      	adds	r7, #8
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	200009f8 	.word	0x200009f8

08006a80 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b08e      	sub	sp, #56	; 0x38
 8006a84:	af04      	add	r7, sp, #16
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a90:	f3ef 8305 	mrs	r3, IPSR
 8006a94:	617b      	str	r3, [r7, #20]
  return(result);
 8006a96:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d17e      	bne.n	8006b9a <osThreadNew+0x11a>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d07b      	beq.n	8006b9a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006aa2:	2380      	movs	r3, #128	; 0x80
 8006aa4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006aa6:	2318      	movs	r3, #24
 8006aa8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006aae:	f04f 33ff 	mov.w	r3, #4294967295
 8006ab2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d045      	beq.n	8006b46 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d002      	beq.n	8006ac8 <osThreadNew+0x48>
        name = attr->name;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	699b      	ldr	r3, [r3, #24]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d002      	beq.n	8006ad6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	699b      	ldr	r3, [r3, #24]
 8006ad4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d008      	beq.n	8006aee <osThreadNew+0x6e>
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	2b38      	cmp	r3, #56	; 0x38
 8006ae0:	d805      	bhi.n	8006aee <osThreadNew+0x6e>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	f003 0301 	and.w	r3, r3, #1
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d001      	beq.n	8006af2 <osThreadNew+0x72>
        return (NULL);
 8006aee:	2300      	movs	r3, #0
 8006af0:	e054      	b.n	8006b9c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	695b      	ldr	r3, [r3, #20]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d003      	beq.n	8006b02 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	089b      	lsrs	r3, r3, #2
 8006b00:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00e      	beq.n	8006b28 <osThreadNew+0xa8>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	2bbb      	cmp	r3, #187	; 0xbb
 8006b10:	d90a      	bls.n	8006b28 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d006      	beq.n	8006b28 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	695b      	ldr	r3, [r3, #20]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d002      	beq.n	8006b28 <osThreadNew+0xa8>
        mem = 1;
 8006b22:	2301      	movs	r3, #1
 8006b24:	61bb      	str	r3, [r7, #24]
 8006b26:	e010      	b.n	8006b4a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d10c      	bne.n	8006b4a <osThreadNew+0xca>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d108      	bne.n	8006b4a <osThreadNew+0xca>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d104      	bne.n	8006b4a <osThreadNew+0xca>
          mem = 0;
 8006b40:	2300      	movs	r3, #0
 8006b42:	61bb      	str	r3, [r7, #24]
 8006b44:	e001      	b.n	8006b4a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006b46:	2300      	movs	r3, #0
 8006b48:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d110      	bne.n	8006b72 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006b58:	9202      	str	r2, [sp, #8]
 8006b5a:	9301      	str	r3, [sp, #4]
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	9300      	str	r3, [sp, #0]
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	6a3a      	ldr	r2, [r7, #32]
 8006b64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	f001 fa9e 	bl	80080a8 <xTaskCreateStatic>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	613b      	str	r3, [r7, #16]
 8006b70:	e013      	b.n	8006b9a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d110      	bne.n	8006b9a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006b78:	6a3b      	ldr	r3, [r7, #32]
 8006b7a:	b29a      	uxth	r2, r3
 8006b7c:	f107 0310 	add.w	r3, r7, #16
 8006b80:	9301      	str	r3, [sp, #4]
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	9300      	str	r3, [sp, #0]
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f001 fae9 	bl	8008162 <xTaskCreate>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d001      	beq.n	8006b9a <osThreadNew+0x11a>
            hTask = NULL;
 8006b96:	2300      	movs	r3, #0
 8006b98:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006b9a:	693b      	ldr	r3, [r7, #16]
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3728      	adds	r7, #40	; 0x28
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bac:	f3ef 8305 	mrs	r3, IPSR
 8006bb0:	60bb      	str	r3, [r7, #8]
  return(result);
 8006bb2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d003      	beq.n	8006bc0 <osDelay+0x1c>
    stat = osErrorISR;
 8006bb8:	f06f 0305 	mvn.w	r3, #5
 8006bbc:	60fb      	str	r3, [r7, #12]
 8006bbe:	e007      	b.n	8006bd0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d002      	beq.n	8006bd0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f001 fc24 	bl	8008418 <vTaskDelay>
    }
  }

  return (stat);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b086      	sub	sp, #24
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8006be2:	2300      	movs	r3, #0
 8006be4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006be6:	f3ef 8305 	mrs	r3, IPSR
 8006bea:	60fb      	str	r3, [r7, #12]
  return(result);
 8006bec:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d12d      	bne.n	8006c4e <osEventFlagsNew+0x74>
    mem = -1;
 8006bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8006bf6:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d015      	beq.n	8006c2a <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d006      	beq.n	8006c14 <osEventFlagsNew+0x3a>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	2b1f      	cmp	r3, #31
 8006c0c:	d902      	bls.n	8006c14 <osEventFlagsNew+0x3a>
        mem = 1;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	613b      	str	r3, [r7, #16]
 8006c12:	e00c      	b.n	8006c2e <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d108      	bne.n	8006c2e <osEventFlagsNew+0x54>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d104      	bne.n	8006c2e <osEventFlagsNew+0x54>
          mem = 0;
 8006c24:	2300      	movs	r3, #0
 8006c26:	613b      	str	r3, [r7, #16]
 8006c28:	e001      	b.n	8006c2e <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d106      	bne.n	8006c42 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f000 f9a3 	bl	8006f84 <xEventGroupCreateStatic>
 8006c3e:	6178      	str	r0, [r7, #20]
 8006c40:	e005      	b.n	8006c4e <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d102      	bne.n	8006c4e <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8006c48:	f000 f9d3 	bl	8006ff2 <xEventGroupCreate>
 8006c4c:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8006c4e:	697b      	ldr	r3, [r7, #20]
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3718      	adds	r7, #24
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b086      	sub	sp, #24
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d004      	beq.n	8006c76 <osEventFlagsSet+0x1e>
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d003      	beq.n	8006c7e <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8006c76:	f06f 0303 	mvn.w	r3, #3
 8006c7a:	617b      	str	r3, [r7, #20]
 8006c7c:	e028      	b.n	8006cd0 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c7e:	f3ef 8305 	mrs	r3, IPSR
 8006c82:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c84:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d01d      	beq.n	8006cc6 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8006c8e:	f107 0308 	add.w	r3, r7, #8
 8006c92:	461a      	mov	r2, r3
 8006c94:	6839      	ldr	r1, [r7, #0]
 8006c96:	6938      	ldr	r0, [r7, #16]
 8006c98:	f000 fbcc 	bl	8007434 <xEventGroupSetBitsFromISR>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d103      	bne.n	8006caa <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8006ca2:	f06f 0302 	mvn.w	r3, #2
 8006ca6:	617b      	str	r3, [r7, #20]
 8006ca8:	e012      	b.n	8006cd0 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d00d      	beq.n	8006cd0 <osEventFlagsSet+0x78>
 8006cb4:	4b09      	ldr	r3, [pc, #36]	; (8006cdc <osEventFlagsSet+0x84>)
 8006cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cba:	601a      	str	r2, [r3, #0]
 8006cbc:	f3bf 8f4f 	dsb	sy
 8006cc0:	f3bf 8f6f 	isb	sy
 8006cc4:	e004      	b.n	8006cd0 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8006cc6:	6839      	ldr	r1, [r7, #0]
 8006cc8:	6938      	ldr	r0, [r7, #16]
 8006cca:	f000 faeb 	bl	80072a4 <xEventGroupSetBits>
 8006cce:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8006cd0:	697b      	ldr	r3, [r7, #20]
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3718      	adds	r7, #24
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	e000ed04 	.word	0xe000ed04

08006ce0 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b086      	sub	sp, #24
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d004      	beq.n	8006cfe <osEventFlagsClear+0x1e>
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d003      	beq.n	8006d06 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8006cfe:	f06f 0303 	mvn.w	r3, #3
 8006d02:	617b      	str	r3, [r7, #20]
 8006d04:	e019      	b.n	8006d3a <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d06:	f3ef 8305 	mrs	r3, IPSR
 8006d0a:	60fb      	str	r3, [r7, #12]
  return(result);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d00e      	beq.n	8006d30 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8006d12:	6938      	ldr	r0, [r7, #16]
 8006d14:	f000 faa2 	bl	800725c <xEventGroupGetBitsFromISR>
 8006d18:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8006d1a:	6839      	ldr	r1, [r7, #0]
 8006d1c:	6938      	ldr	r0, [r7, #16]
 8006d1e:	f000 fa89 	bl	8007234 <xEventGroupClearBitsFromISR>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d108      	bne.n	8006d3a <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 8006d28:	f06f 0302 	mvn.w	r3, #2
 8006d2c:	617b      	str	r3, [r7, #20]
 8006d2e:	e004      	b.n	8006d3a <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8006d30:	6839      	ldr	r1, [r7, #0]
 8006d32:	6938      	ldr	r0, [r7, #16]
 8006d34:	f000 fa46 	bl	80071c4 <xEventGroupClearBits>
 8006d38:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8006d3a:	697b      	ldr	r3, [r7, #20]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3718      	adds	r7, #24
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b08c      	sub	sp, #48	; 0x30
 8006d48:	af02      	add	r7, sp, #8
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	607a      	str	r2, [r7, #4]
 8006d50:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d004      	beq.n	8006d66 <osEventFlagsWait+0x22>
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d003      	beq.n	8006d6e <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8006d66:	f06f 0303 	mvn.w	r3, #3
 8006d6a:	61fb      	str	r3, [r7, #28]
 8006d6c:	e04b      	b.n	8006e06 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d6e:	f3ef 8305 	mrs	r3, IPSR
 8006d72:	617b      	str	r3, [r7, #20]
  return(result);
 8006d74:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d003      	beq.n	8006d82 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8006d7a:	f06f 0305 	mvn.w	r3, #5
 8006d7e:	61fb      	str	r3, [r7, #28]
 8006d80:	e041      	b.n	8006e06 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f003 0301 	and.w	r3, r3, #1
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d002      	beq.n	8006d92 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8006d90:	e001      	b.n	8006d96 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8006d92:	2300      	movs	r3, #0
 8006d94:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f003 0302 	and.w	r3, r3, #2
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d002      	beq.n	8006da6 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8006da0:	2300      	movs	r3, #0
 8006da2:	623b      	str	r3, [r7, #32]
 8006da4:	e001      	b.n	8006daa <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8006da6:	2301      	movs	r3, #1
 8006da8:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	9300      	str	r3, [sp, #0]
 8006dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db0:	6a3a      	ldr	r2, [r7, #32]
 8006db2:	68b9      	ldr	r1, [r7, #8]
 8006db4:	69b8      	ldr	r0, [r7, #24]
 8006db6:	f000 f937 	bl	8007028 <xEventGroupWaitBits>
 8006dba:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f003 0301 	and.w	r3, r3, #1
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d010      	beq.n	8006de8 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8006dc6:	68ba      	ldr	r2, [r7, #8]
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	4013      	ands	r3, r2
 8006dcc:	68ba      	ldr	r2, [r7, #8]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d019      	beq.n	8006e06 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d003      	beq.n	8006de0 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8006dd8:	f06f 0301 	mvn.w	r3, #1
 8006ddc:	61fb      	str	r3, [r7, #28]
 8006dde:	e012      	b.n	8006e06 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8006de0:	f06f 0302 	mvn.w	r3, #2
 8006de4:	61fb      	str	r3, [r7, #28]
 8006de6:	e00e      	b.n	8006e06 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8006de8:	68ba      	ldr	r2, [r7, #8]
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	4013      	ands	r3, r2
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d109      	bne.n	8006e06 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d003      	beq.n	8006e00 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8006df8:	f06f 0301 	mvn.w	r3, #1
 8006dfc:	61fb      	str	r3, [r7, #28]
 8006dfe:	e002      	b.n	8006e06 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8006e00:	f06f 0302 	mvn.w	r3, #2
 8006e04:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8006e06:	69fb      	ldr	r3, [r7, #28]
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3728      	adds	r7, #40	; 0x28
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b088      	sub	sp, #32
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e1c:	f3ef 8305 	mrs	r3, IPSR
 8006e20:	60bb      	str	r3, [r7, #8]
  return(result);
 8006e22:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d174      	bne.n	8006f12 <osMutexNew+0x102>
    if (attr != NULL) {
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d003      	beq.n	8006e36 <osMutexNew+0x26>
      type = attr->attr_bits;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	61bb      	str	r3, [r7, #24]
 8006e34:	e001      	b.n	8006e3a <osMutexNew+0x2a>
    } else {
      type = 0U;
 8006e36:	2300      	movs	r3, #0
 8006e38:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	f003 0301 	and.w	r3, r3, #1
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d002      	beq.n	8006e4a <osMutexNew+0x3a>
      rmtx = 1U;
 8006e44:	2301      	movs	r3, #1
 8006e46:	617b      	str	r3, [r7, #20]
 8006e48:	e001      	b.n	8006e4e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	f003 0308 	and.w	r3, r3, #8
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d15c      	bne.n	8006f12 <osMutexNew+0x102>
      mem = -1;
 8006e58:	f04f 33ff 	mov.w	r3, #4294967295
 8006e5c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d015      	beq.n	8006e90 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d006      	beq.n	8006e7a <osMutexNew+0x6a>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	2b4f      	cmp	r3, #79	; 0x4f
 8006e72:	d902      	bls.n	8006e7a <osMutexNew+0x6a>
          mem = 1;
 8006e74:	2301      	movs	r3, #1
 8006e76:	613b      	str	r3, [r7, #16]
 8006e78:	e00c      	b.n	8006e94 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d108      	bne.n	8006e94 <osMutexNew+0x84>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d104      	bne.n	8006e94 <osMutexNew+0x84>
            mem = 0;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	613b      	str	r3, [r7, #16]
 8006e8e:	e001      	b.n	8006e94 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8006e90:	2300      	movs	r3, #0
 8006e92:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d112      	bne.n	8006ec0 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d007      	beq.n	8006eb0 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	2004      	movs	r0, #4
 8006ea8:	f000 fcfb 	bl	80078a2 <xQueueCreateMutexStatic>
 8006eac:	61f8      	str	r0, [r7, #28]
 8006eae:	e016      	b.n	8006ede <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	2001      	movs	r0, #1
 8006eb8:	f000 fcf3 	bl	80078a2 <xQueueCreateMutexStatic>
 8006ebc:	61f8      	str	r0, [r7, #28]
 8006ebe:	e00e      	b.n	8006ede <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d10b      	bne.n	8006ede <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d004      	beq.n	8006ed6 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8006ecc:	2004      	movs	r0, #4
 8006ece:	f000 fcd0 	bl	8007872 <xQueueCreateMutex>
 8006ed2:	61f8      	str	r0, [r7, #28]
 8006ed4:	e003      	b.n	8006ede <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8006ed6:	2001      	movs	r0, #1
 8006ed8:	f000 fccb 	bl	8007872 <xQueueCreateMutex>
 8006edc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d00c      	beq.n	8006efe <osMutexNew+0xee>
        if (attr != NULL) {
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d003      	beq.n	8006ef2 <osMutexNew+0xe2>
          name = attr->name;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	60fb      	str	r3, [r7, #12]
 8006ef0:	e001      	b.n	8006ef6 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8006ef6:	68f9      	ldr	r1, [r7, #12]
 8006ef8:	69f8      	ldr	r0, [r7, #28]
 8006efa:	f001 f877 	bl	8007fec <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d006      	beq.n	8006f12 <osMutexNew+0x102>
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d003      	beq.n	8006f12 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	f043 0301 	orr.w	r3, r3, #1
 8006f10:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006f12:	69fb      	ldr	r3, [r7, #28]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3720      	adds	r7, #32
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006f1c:	b480      	push	{r7}
 8006f1e:	b085      	sub	sp, #20
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	4a07      	ldr	r2, [pc, #28]	; (8006f48 <vApplicationGetIdleTaskMemory+0x2c>)
 8006f2c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	4a06      	ldr	r2, [pc, #24]	; (8006f4c <vApplicationGetIdleTaskMemory+0x30>)
 8006f32:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2280      	movs	r2, #128	; 0x80
 8006f38:	601a      	str	r2, [r3, #0]
}
 8006f3a:	bf00      	nop
 8006f3c:	3714      	adds	r7, #20
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr
 8006f46:	bf00      	nop
 8006f48:	200009fc 	.word	0x200009fc
 8006f4c:	20000ab8 	.word	0x20000ab8

08006f50 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006f50:	b480      	push	{r7}
 8006f52:	b085      	sub	sp, #20
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	4a07      	ldr	r2, [pc, #28]	; (8006f7c <vApplicationGetTimerTaskMemory+0x2c>)
 8006f60:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	4a06      	ldr	r2, [pc, #24]	; (8006f80 <vApplicationGetTimerTaskMemory+0x30>)
 8006f66:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f6e:	601a      	str	r2, [r3, #0]
}
 8006f70:	bf00      	nop
 8006f72:	3714      	adds	r7, #20
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr
 8006f7c:	20000cb8 	.word	0x20000cb8
 8006f80:	20000d74 	.word	0x20000d74

08006f84 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b086      	sub	sp, #24
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d10a      	bne.n	8006fa8 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f96:	f383 8811 	msr	BASEPRI, r3
 8006f9a:	f3bf 8f6f 	isb	sy
 8006f9e:	f3bf 8f4f 	dsb	sy
 8006fa2:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006fa4:	bf00      	nop
 8006fa6:	e7fe      	b.n	8006fa6 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8006fa8:	2320      	movs	r3, #32
 8006faa:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	2b20      	cmp	r3, #32
 8006fb0:	d00a      	beq.n	8006fc8 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8006fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb6:	f383 8811 	msr	BASEPRI, r3
 8006fba:	f3bf 8f6f 	isb	sy
 8006fbe:	f3bf 8f4f 	dsb	sy
 8006fc2:	60fb      	str	r3, [r7, #12]
}
 8006fc4:	bf00      	nop
 8006fc6:	e7fe      	b.n	8006fc6 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00a      	beq.n	8006fe8 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	3304      	adds	r3, #4
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f000 fa3d 	bl	800745c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8006fe8:	697b      	ldr	r3, [r7, #20]
	}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3718      	adds	r7, #24
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b082      	sub	sp, #8
 8006ff6:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8006ff8:	2020      	movs	r0, #32
 8006ffa:	f002 fded 	bl	8009bd8 <pvPortMalloc>
 8006ffe:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00a      	beq.n	800701c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	3304      	adds	r3, #4
 8007010:	4618      	mov	r0, r3
 8007012:	f000 fa23 	bl	800745c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800701c:	687b      	ldr	r3, [r7, #4]
	}
 800701e:	4618      	mov	r0, r3
 8007020:	3708      	adds	r7, #8
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
	...

08007028 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b090      	sub	sp, #64	; 0x40
 800702c:	af00      	add	r7, sp, #0
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	607a      	str	r2, [r7, #4]
 8007034:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800703a:	2300      	movs	r3, #0
 800703c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800703e:	2300      	movs	r3, #0
 8007040:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d10a      	bne.n	800705e <xEventGroupWaitBits+0x36>
	__asm volatile
 8007048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800704c:	f383 8811 	msr	BASEPRI, r3
 8007050:	f3bf 8f6f 	isb	sy
 8007054:	f3bf 8f4f 	dsb	sy
 8007058:	623b      	str	r3, [r7, #32]
}
 800705a:	bf00      	nop
 800705c:	e7fe      	b.n	800705c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00a      	beq.n	800707e <xEventGroupWaitBits+0x56>
	__asm volatile
 8007068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800706c:	f383 8811 	msr	BASEPRI, r3
 8007070:	f3bf 8f6f 	isb	sy
 8007074:	f3bf 8f4f 	dsb	sy
 8007078:	61fb      	str	r3, [r7, #28]
}
 800707a:	bf00      	nop
 800707c:	e7fe      	b.n	800707c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d10a      	bne.n	800709a <xEventGroupWaitBits+0x72>
	__asm volatile
 8007084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007088:	f383 8811 	msr	BASEPRI, r3
 800708c:	f3bf 8f6f 	isb	sy
 8007090:	f3bf 8f4f 	dsb	sy
 8007094:	61bb      	str	r3, [r7, #24]
}
 8007096:	bf00      	nop
 8007098:	e7fe      	b.n	8007098 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800709a:	f001 feeb 	bl	8008e74 <xTaskGetSchedulerState>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d102      	bne.n	80070aa <xEventGroupWaitBits+0x82>
 80070a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d101      	bne.n	80070ae <xEventGroupWaitBits+0x86>
 80070aa:	2301      	movs	r3, #1
 80070ac:	e000      	b.n	80070b0 <xEventGroupWaitBits+0x88>
 80070ae:	2300      	movs	r3, #0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d10a      	bne.n	80070ca <xEventGroupWaitBits+0xa2>
	__asm volatile
 80070b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b8:	f383 8811 	msr	BASEPRI, r3
 80070bc:	f3bf 8f6f 	isb	sy
 80070c0:	f3bf 8f4f 	dsb	sy
 80070c4:	617b      	str	r3, [r7, #20]
}
 80070c6:	bf00      	nop
 80070c8:	e7fe      	b.n	80070c8 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80070ca:	f001 fa49 	bl	8008560 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80070ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80070d4:	683a      	ldr	r2, [r7, #0]
 80070d6:	68b9      	ldr	r1, [r7, #8]
 80070d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070da:	f000 f988 	bl	80073ee <prvTestWaitCondition>
 80070de:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80070e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00e      	beq.n	8007104 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80070e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80070ea:	2300      	movs	r3, #0
 80070ec:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d028      	beq.n	8007146 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80070f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	43db      	mvns	r3, r3
 80070fc:	401a      	ands	r2, r3
 80070fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007100:	601a      	str	r2, [r3, #0]
 8007102:	e020      	b.n	8007146 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8007104:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007106:	2b00      	cmp	r3, #0
 8007108:	d104      	bne.n	8007114 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800710a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800710c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800710e:	2301      	movs	r3, #1
 8007110:	633b      	str	r3, [r7, #48]	; 0x30
 8007112:	e018      	b.n	8007146 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d003      	beq.n	8007122 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800711a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800711c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007120:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d003      	beq.n	8007130 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8007128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800712a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800712e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8007130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007132:	1d18      	adds	r0, r3, #4
 8007134:	68ba      	ldr	r2, [r7, #8]
 8007136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007138:	4313      	orrs	r3, r2
 800713a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800713c:	4619      	mov	r1, r3
 800713e:	f001 fc0d 	bl	800895c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8007142:	2300      	movs	r3, #0
 8007144:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8007146:	f001 fa19 	bl	800857c <xTaskResumeAll>
 800714a:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800714c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800714e:	2b00      	cmp	r3, #0
 8007150:	d031      	beq.n	80071b6 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8007152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007154:	2b00      	cmp	r3, #0
 8007156:	d107      	bne.n	8007168 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8007158:	4b19      	ldr	r3, [pc, #100]	; (80071c0 <xEventGroupWaitBits+0x198>)
 800715a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800715e:	601a      	str	r2, [r3, #0]
 8007160:	f3bf 8f4f 	dsb	sy
 8007164:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8007168:	f001 ff10 	bl	8008f8c <uxTaskResetEventItemValue>
 800716c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800716e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007174:	2b00      	cmp	r3, #0
 8007176:	d11a      	bne.n	80071ae <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8007178:	f002 fc0c 	bl	8009994 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800717c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8007182:	683a      	ldr	r2, [r7, #0]
 8007184:	68b9      	ldr	r1, [r7, #8]
 8007186:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007188:	f000 f931 	bl	80073ee <prvTestWaitCondition>
 800718c:	4603      	mov	r3, r0
 800718e:	2b00      	cmp	r3, #0
 8007190:	d009      	beq.n	80071a6 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d006      	beq.n	80071a6 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8007198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	43db      	mvns	r3, r3
 80071a0:	401a      	ands	r2, r3
 80071a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071a4:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80071a6:	2301      	movs	r3, #1
 80071a8:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80071aa:	f002 fc23 	bl	80099f4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80071ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80071b4:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80071b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3740      	adds	r7, #64	; 0x40
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}
 80071c0:	e000ed04 	.word	0xe000ed04

080071c4 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b086      	sub	sp, #24
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d10a      	bne.n	80071ee <xEventGroupClearBits+0x2a>
	__asm volatile
 80071d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071dc:	f383 8811 	msr	BASEPRI, r3
 80071e0:	f3bf 8f6f 	isb	sy
 80071e4:	f3bf 8f4f 	dsb	sy
 80071e8:	60fb      	str	r3, [r7, #12]
}
 80071ea:	bf00      	nop
 80071ec:	e7fe      	b.n	80071ec <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d00a      	beq.n	800720e <xEventGroupClearBits+0x4a>
	__asm volatile
 80071f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fc:	f383 8811 	msr	BASEPRI, r3
 8007200:	f3bf 8f6f 	isb	sy
 8007204:	f3bf 8f4f 	dsb	sy
 8007208:	60bb      	str	r3, [r7, #8]
}
 800720a:	bf00      	nop
 800720c:	e7fe      	b.n	800720c <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 800720e:	f002 fbc1 	bl	8009994 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	43db      	mvns	r3, r3
 8007220:	401a      	ands	r2, r3
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8007226:	f002 fbe5 	bl	80099f4 <vPortExitCritical>

	return uxReturn;
 800722a:	693b      	ldr	r3, [r7, #16]
}
 800722c:	4618      	mov	r0, r3
 800722e:	3718      	adds	r7, #24
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800723e:	2300      	movs	r3, #0
 8007240:	683a      	ldr	r2, [r7, #0]
 8007242:	6879      	ldr	r1, [r7, #4]
 8007244:	4804      	ldr	r0, [pc, #16]	; (8007258 <xEventGroupClearBitsFromISR+0x24>)
 8007246:	f002 fa5b 	bl	8009700 <xTimerPendFunctionCallFromISR>
 800724a:	60f8      	str	r0, [r7, #12]

		return xReturn;
 800724c:	68fb      	ldr	r3, [r7, #12]
	}
 800724e:	4618      	mov	r0, r3
 8007250:	3710      	adds	r7, #16
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	080073d5 	.word	0x080073d5

0800725c <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 800725c:	b480      	push	{r7}
 800725e:	b089      	sub	sp, #36	; 0x24
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007268:	f3ef 8211 	mrs	r2, BASEPRI
 800726c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007270:	f383 8811 	msr	BASEPRI, r3
 8007274:	f3bf 8f6f 	isb	sy
 8007278:	f3bf 8f4f 	dsb	sy
 800727c:	60fa      	str	r2, [r7, #12]
 800727e:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007280:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007282:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	617b      	str	r3, [r7, #20]
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007294:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8007296:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8007298:	4618      	mov	r0, r3
 800729a:	3724      	adds	r7, #36	; 0x24
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b08e      	sub	sp, #56	; 0x38
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80072ae:	2300      	movs	r3, #0
 80072b0:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80072b6:	2300      	movs	r3, #0
 80072b8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d10a      	bne.n	80072d6 <xEventGroupSetBits+0x32>
	__asm volatile
 80072c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c4:	f383 8811 	msr	BASEPRI, r3
 80072c8:	f3bf 8f6f 	isb	sy
 80072cc:	f3bf 8f4f 	dsb	sy
 80072d0:	613b      	str	r3, [r7, #16]
}
 80072d2:	bf00      	nop
 80072d4:	e7fe      	b.n	80072d4 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d00a      	beq.n	80072f6 <xEventGroupSetBits+0x52>
	__asm volatile
 80072e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e4:	f383 8811 	msr	BASEPRI, r3
 80072e8:	f3bf 8f6f 	isb	sy
 80072ec:	f3bf 8f4f 	dsb	sy
 80072f0:	60fb      	str	r3, [r7, #12]
}
 80072f2:	bf00      	nop
 80072f4:	e7fe      	b.n	80072f4 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80072f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f8:	3304      	adds	r3, #4
 80072fa:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fe:	3308      	adds	r3, #8
 8007300:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8007302:	f001 f92d 	bl	8008560 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8007306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800730c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	431a      	orrs	r2, r3
 8007314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007316:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8007318:	e03c      	b.n	8007394 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800731a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8007320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8007326:	2300      	movs	r3, #0
 8007328:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800732a:	69bb      	ldr	r3, [r7, #24]
 800732c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007330:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007338:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007340:	2b00      	cmp	r3, #0
 8007342:	d108      	bne.n	8007356 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8007344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	69bb      	ldr	r3, [r7, #24]
 800734a:	4013      	ands	r3, r2
 800734c:	2b00      	cmp	r3, #0
 800734e:	d00b      	beq.n	8007368 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8007350:	2301      	movs	r3, #1
 8007352:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007354:	e008      	b.n	8007368 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8007356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	4013      	ands	r3, r2
 800735e:	69ba      	ldr	r2, [r7, #24]
 8007360:	429a      	cmp	r2, r3
 8007362:	d101      	bne.n	8007368 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8007364:	2301      	movs	r3, #1
 8007366:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8007368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800736a:	2b00      	cmp	r3, #0
 800736c:	d010      	beq.n	8007390 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007374:	2b00      	cmp	r3, #0
 8007376:	d003      	beq.n	8007380 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8007378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	4313      	orrs	r3, r2
 800737e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8007380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007388:	4619      	mov	r1, r3
 800738a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800738c:	f001 fbb2 	bl	8008af4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8007394:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007396:	6a3b      	ldr	r3, [r7, #32]
 8007398:	429a      	cmp	r2, r3
 800739a:	d1be      	bne.n	800731a <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800739c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a2:	43db      	mvns	r3, r3
 80073a4:	401a      	ands	r2, r3
 80073a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a8:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80073aa:	f001 f8e7 	bl	800857c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80073ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b0:	681b      	ldr	r3, [r3, #0]
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3738      	adds	r7, #56	; 0x38
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b082      	sub	sp, #8
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
 80073c2:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80073c4:	6839      	ldr	r1, [r7, #0]
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f7ff ff6c 	bl	80072a4 <xEventGroupSetBits>
}
 80073cc:	bf00      	nop
 80073ce:	3708      	adds	r7, #8
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80073de:	6839      	ldr	r1, [r7, #0]
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f7ff feef 	bl	80071c4 <xEventGroupClearBits>
}
 80073e6:	bf00      	nop
 80073e8:	3708      	adds	r7, #8
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80073ee:	b480      	push	{r7}
 80073f0:	b087      	sub	sp, #28
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	60f8      	str	r0, [r7, #12]
 80073f6:	60b9      	str	r1, [r7, #8]
 80073f8:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80073fa:	2300      	movs	r3, #0
 80073fc:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d107      	bne.n	8007414 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	4013      	ands	r3, r2
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00a      	beq.n	8007424 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800740e:	2301      	movs	r3, #1
 8007410:	617b      	str	r3, [r7, #20]
 8007412:	e007      	b.n	8007424 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	4013      	ands	r3, r2
 800741a:	68ba      	ldr	r2, [r7, #8]
 800741c:	429a      	cmp	r2, r3
 800741e:	d101      	bne.n	8007424 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8007420:	2301      	movs	r3, #1
 8007422:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8007424:	697b      	ldr	r3, [r7, #20]
}
 8007426:	4618      	mov	r0, r3
 8007428:	371c      	adds	r7, #28
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr
	...

08007434 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007434:	b580      	push	{r7, lr}
 8007436:	b086      	sub	sp, #24
 8007438:	af00      	add	r7, sp, #0
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	60b9      	str	r1, [r7, #8]
 800743e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	68ba      	ldr	r2, [r7, #8]
 8007444:	68f9      	ldr	r1, [r7, #12]
 8007446:	4804      	ldr	r0, [pc, #16]	; (8007458 <xEventGroupSetBitsFromISR+0x24>)
 8007448:	f002 f95a 	bl	8009700 <xTimerPendFunctionCallFromISR>
 800744c:	6178      	str	r0, [r7, #20]

		return xReturn;
 800744e:	697b      	ldr	r3, [r7, #20]
	}
 8007450:	4618      	mov	r0, r3
 8007452:	3718      	adds	r7, #24
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}
 8007458:	080073bb 	.word	0x080073bb

0800745c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f103 0208 	add.w	r2, r3, #8
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f04f 32ff 	mov.w	r2, #4294967295
 8007474:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f103 0208 	add.w	r2, r3, #8
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f103 0208 	add.w	r2, r3, #8
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007490:	bf00      	nop
 8007492:	370c      	adds	r7, #12
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800749c:	b480      	push	{r7}
 800749e:	b083      	sub	sp, #12
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80074aa:	bf00      	nop
 80074ac:	370c      	adds	r7, #12
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr

080074b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80074b6:	b480      	push	{r7}
 80074b8:	b085      	sub	sp, #20
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
 80074be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	68fa      	ldr	r2, [r7, #12]
 80074ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	689a      	ldr	r2, [r3, #8]
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	683a      	ldr	r2, [r7, #0]
 80074da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	683a      	ldr	r2, [r7, #0]
 80074e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	1c5a      	adds	r2, r3, #1
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	601a      	str	r2, [r3, #0]
}
 80074f2:	bf00      	nop
 80074f4:	3714      	adds	r7, #20
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr

080074fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80074fe:	b480      	push	{r7}
 8007500:	b085      	sub	sp, #20
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
 8007506:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007514:	d103      	bne.n	800751e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	60fb      	str	r3, [r7, #12]
 800751c:	e00c      	b.n	8007538 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	3308      	adds	r3, #8
 8007522:	60fb      	str	r3, [r7, #12]
 8007524:	e002      	b.n	800752c <vListInsert+0x2e>
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	60fb      	str	r3, [r7, #12]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	68ba      	ldr	r2, [r7, #8]
 8007534:	429a      	cmp	r2, r3
 8007536:	d2f6      	bcs.n	8007526 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	685a      	ldr	r2, [r3, #4]
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	683a      	ldr	r2, [r7, #0]
 8007546:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	68fa      	ldr	r2, [r7, #12]
 800754c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	683a      	ldr	r2, [r7, #0]
 8007552:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	1c5a      	adds	r2, r3, #1
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	601a      	str	r2, [r3, #0]
}
 8007564:	bf00      	nop
 8007566:	3714      	adds	r7, #20
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007570:	b480      	push	{r7}
 8007572:	b085      	sub	sp, #20
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	691b      	ldr	r3, [r3, #16]
 800757c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	6892      	ldr	r2, [r2, #8]
 8007586:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	6852      	ldr	r2, [r2, #4]
 8007590:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	429a      	cmp	r2, r3
 800759a:	d103      	bne.n	80075a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	689a      	ldr	r2, [r3, #8]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	1e5a      	subs	r2, r3, #1
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3714      	adds	r7, #20
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d10a      	bne.n	80075ee <xQueueGenericReset+0x2a>
	__asm volatile
 80075d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075dc:	f383 8811 	msr	BASEPRI, r3
 80075e0:	f3bf 8f6f 	isb	sy
 80075e4:	f3bf 8f4f 	dsb	sy
 80075e8:	60bb      	str	r3, [r7, #8]
}
 80075ea:	bf00      	nop
 80075ec:	e7fe      	b.n	80075ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80075ee:	f002 f9d1 	bl	8009994 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075fa:	68f9      	ldr	r1, [r7, #12]
 80075fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80075fe:	fb01 f303 	mul.w	r3, r1, r3
 8007602:	441a      	add	r2, r3
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2200      	movs	r2, #0
 800760c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800761e:	3b01      	subs	r3, #1
 8007620:	68f9      	ldr	r1, [r7, #12]
 8007622:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007624:	fb01 f303 	mul.w	r3, r1, r3
 8007628:	441a      	add	r2, r3
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	22ff      	movs	r2, #255	; 0xff
 8007632:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	22ff      	movs	r2, #255	; 0xff
 800763a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d114      	bne.n	800766e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	691b      	ldr	r3, [r3, #16]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d01a      	beq.n	8007682 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	3310      	adds	r3, #16
 8007650:	4618      	mov	r0, r3
 8007652:	f001 f9eb 	bl	8008a2c <xTaskRemoveFromEventList>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d012      	beq.n	8007682 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800765c:	4b0c      	ldr	r3, [pc, #48]	; (8007690 <xQueueGenericReset+0xcc>)
 800765e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007662:	601a      	str	r2, [r3, #0]
 8007664:	f3bf 8f4f 	dsb	sy
 8007668:	f3bf 8f6f 	isb	sy
 800766c:	e009      	b.n	8007682 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	3310      	adds	r3, #16
 8007672:	4618      	mov	r0, r3
 8007674:	f7ff fef2 	bl	800745c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	3324      	adds	r3, #36	; 0x24
 800767c:	4618      	mov	r0, r3
 800767e:	f7ff feed 	bl	800745c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007682:	f002 f9b7 	bl	80099f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007686:	2301      	movs	r3, #1
}
 8007688:	4618      	mov	r0, r3
 800768a:	3710      	adds	r7, #16
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}
 8007690:	e000ed04 	.word	0xe000ed04

08007694 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007694:	b580      	push	{r7, lr}
 8007696:	b08e      	sub	sp, #56	; 0x38
 8007698:	af02      	add	r7, sp, #8
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	607a      	str	r2, [r7, #4]
 80076a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d10a      	bne.n	80076be <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80076a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ac:	f383 8811 	msr	BASEPRI, r3
 80076b0:	f3bf 8f6f 	isb	sy
 80076b4:	f3bf 8f4f 	dsb	sy
 80076b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80076ba:	bf00      	nop
 80076bc:	e7fe      	b.n	80076bc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d10a      	bne.n	80076da <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80076c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c8:	f383 8811 	msr	BASEPRI, r3
 80076cc:	f3bf 8f6f 	isb	sy
 80076d0:	f3bf 8f4f 	dsb	sy
 80076d4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80076d6:	bf00      	nop
 80076d8:	e7fe      	b.n	80076d8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d002      	beq.n	80076e6 <xQueueGenericCreateStatic+0x52>
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d001      	beq.n	80076ea <xQueueGenericCreateStatic+0x56>
 80076e6:	2301      	movs	r3, #1
 80076e8:	e000      	b.n	80076ec <xQueueGenericCreateStatic+0x58>
 80076ea:	2300      	movs	r3, #0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d10a      	bne.n	8007706 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80076f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f4:	f383 8811 	msr	BASEPRI, r3
 80076f8:	f3bf 8f6f 	isb	sy
 80076fc:	f3bf 8f4f 	dsb	sy
 8007700:	623b      	str	r3, [r7, #32]
}
 8007702:	bf00      	nop
 8007704:	e7fe      	b.n	8007704 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d102      	bne.n	8007712 <xQueueGenericCreateStatic+0x7e>
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d101      	bne.n	8007716 <xQueueGenericCreateStatic+0x82>
 8007712:	2301      	movs	r3, #1
 8007714:	e000      	b.n	8007718 <xQueueGenericCreateStatic+0x84>
 8007716:	2300      	movs	r3, #0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d10a      	bne.n	8007732 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800771c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007720:	f383 8811 	msr	BASEPRI, r3
 8007724:	f3bf 8f6f 	isb	sy
 8007728:	f3bf 8f4f 	dsb	sy
 800772c:	61fb      	str	r3, [r7, #28]
}
 800772e:	bf00      	nop
 8007730:	e7fe      	b.n	8007730 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007732:	2350      	movs	r3, #80	; 0x50
 8007734:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	2b50      	cmp	r3, #80	; 0x50
 800773a:	d00a      	beq.n	8007752 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800773c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007740:	f383 8811 	msr	BASEPRI, r3
 8007744:	f3bf 8f6f 	isb	sy
 8007748:	f3bf 8f4f 	dsb	sy
 800774c:	61bb      	str	r3, [r7, #24]
}
 800774e:	bf00      	nop
 8007750:	e7fe      	b.n	8007750 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007752:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00d      	beq.n	800777a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800775e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007760:	2201      	movs	r2, #1
 8007762:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007766:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800776a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800776c:	9300      	str	r3, [sp, #0]
 800776e:	4613      	mov	r3, r2
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	68b9      	ldr	r1, [r7, #8]
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	f000 f83f 	bl	80077f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800777a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800777c:	4618      	mov	r0, r3
 800777e:	3730      	adds	r7, #48	; 0x30
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007784:	b580      	push	{r7, lr}
 8007786:	b08a      	sub	sp, #40	; 0x28
 8007788:	af02      	add	r7, sp, #8
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	4613      	mov	r3, r2
 8007790:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d10a      	bne.n	80077ae <xQueueGenericCreate+0x2a>
	__asm volatile
 8007798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800779c:	f383 8811 	msr	BASEPRI, r3
 80077a0:	f3bf 8f6f 	isb	sy
 80077a4:	f3bf 8f4f 	dsb	sy
 80077a8:	613b      	str	r3, [r7, #16]
}
 80077aa:	bf00      	nop
 80077ac:	e7fe      	b.n	80077ac <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	68ba      	ldr	r2, [r7, #8]
 80077b2:	fb02 f303 	mul.w	r3, r2, r3
 80077b6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80077b8:	69fb      	ldr	r3, [r7, #28]
 80077ba:	3350      	adds	r3, #80	; 0x50
 80077bc:	4618      	mov	r0, r3
 80077be:	f002 fa0b 	bl	8009bd8 <pvPortMalloc>
 80077c2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80077c4:	69bb      	ldr	r3, [r7, #24]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d011      	beq.n	80077ee <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	3350      	adds	r3, #80	; 0x50
 80077d2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80077d4:	69bb      	ldr	r3, [r7, #24]
 80077d6:	2200      	movs	r2, #0
 80077d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80077dc:	79fa      	ldrb	r2, [r7, #7]
 80077de:	69bb      	ldr	r3, [r7, #24]
 80077e0:	9300      	str	r3, [sp, #0]
 80077e2:	4613      	mov	r3, r2
 80077e4:	697a      	ldr	r2, [r7, #20]
 80077e6:	68b9      	ldr	r1, [r7, #8]
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	f000 f805 	bl	80077f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80077ee:	69bb      	ldr	r3, [r7, #24]
	}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3720      	adds	r7, #32
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	60b9      	str	r1, [r7, #8]
 8007802:	607a      	str	r2, [r7, #4]
 8007804:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d103      	bne.n	8007814 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	69ba      	ldr	r2, [r7, #24]
 8007810:	601a      	str	r2, [r3, #0]
 8007812:	e002      	b.n	800781a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800781a:	69bb      	ldr	r3, [r7, #24]
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007820:	69bb      	ldr	r3, [r7, #24]
 8007822:	68ba      	ldr	r2, [r7, #8]
 8007824:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007826:	2101      	movs	r1, #1
 8007828:	69b8      	ldr	r0, [r7, #24]
 800782a:	f7ff fecb 	bl	80075c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800782e:	69bb      	ldr	r3, [r7, #24]
 8007830:	78fa      	ldrb	r2, [r7, #3]
 8007832:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007836:	bf00      	nop
 8007838:	3710      	adds	r7, #16
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}

0800783e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800783e:	b580      	push	{r7, lr}
 8007840:	b082      	sub	sp, #8
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00e      	beq.n	800786a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800785e:	2300      	movs	r3, #0
 8007860:	2200      	movs	r2, #0
 8007862:	2100      	movs	r1, #0
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 f837 	bl	80078d8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800786a:	bf00      	nop
 800786c:	3708      	adds	r7, #8
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}

08007872 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007872:	b580      	push	{r7, lr}
 8007874:	b086      	sub	sp, #24
 8007876:	af00      	add	r7, sp, #0
 8007878:	4603      	mov	r3, r0
 800787a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800787c:	2301      	movs	r3, #1
 800787e:	617b      	str	r3, [r7, #20]
 8007880:	2300      	movs	r3, #0
 8007882:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007884:	79fb      	ldrb	r3, [r7, #7]
 8007886:	461a      	mov	r2, r3
 8007888:	6939      	ldr	r1, [r7, #16]
 800788a:	6978      	ldr	r0, [r7, #20]
 800788c:	f7ff ff7a 	bl	8007784 <xQueueGenericCreate>
 8007890:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007892:	68f8      	ldr	r0, [r7, #12]
 8007894:	f7ff ffd3 	bl	800783e <prvInitialiseMutex>

		return xNewQueue;
 8007898:	68fb      	ldr	r3, [r7, #12]
	}
 800789a:	4618      	mov	r0, r3
 800789c:	3718      	adds	r7, #24
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b088      	sub	sp, #32
 80078a6:	af02      	add	r7, sp, #8
 80078a8:	4603      	mov	r3, r0
 80078aa:	6039      	str	r1, [r7, #0]
 80078ac:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80078ae:	2301      	movs	r3, #1
 80078b0:	617b      	str	r3, [r7, #20]
 80078b2:	2300      	movs	r3, #0
 80078b4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80078b6:	79fb      	ldrb	r3, [r7, #7]
 80078b8:	9300      	str	r3, [sp, #0]
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	2200      	movs	r2, #0
 80078be:	6939      	ldr	r1, [r7, #16]
 80078c0:	6978      	ldr	r0, [r7, #20]
 80078c2:	f7ff fee7 	bl	8007694 <xQueueGenericCreateStatic>
 80078c6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80078c8:	68f8      	ldr	r0, [r7, #12]
 80078ca:	f7ff ffb8 	bl	800783e <prvInitialiseMutex>

		return xNewQueue;
 80078ce:	68fb      	ldr	r3, [r7, #12]
	}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3718      	adds	r7, #24
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b08e      	sub	sp, #56	; 0x38
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]
 80078e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80078e6:	2300      	movs	r3, #0
 80078e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80078ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d10a      	bne.n	800790a <xQueueGenericSend+0x32>
	__asm volatile
 80078f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f8:	f383 8811 	msr	BASEPRI, r3
 80078fc:	f3bf 8f6f 	isb	sy
 8007900:	f3bf 8f4f 	dsb	sy
 8007904:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007906:	bf00      	nop
 8007908:	e7fe      	b.n	8007908 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d103      	bne.n	8007918 <xQueueGenericSend+0x40>
 8007910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007914:	2b00      	cmp	r3, #0
 8007916:	d101      	bne.n	800791c <xQueueGenericSend+0x44>
 8007918:	2301      	movs	r3, #1
 800791a:	e000      	b.n	800791e <xQueueGenericSend+0x46>
 800791c:	2300      	movs	r3, #0
 800791e:	2b00      	cmp	r3, #0
 8007920:	d10a      	bne.n	8007938 <xQueueGenericSend+0x60>
	__asm volatile
 8007922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007926:	f383 8811 	msr	BASEPRI, r3
 800792a:	f3bf 8f6f 	isb	sy
 800792e:	f3bf 8f4f 	dsb	sy
 8007932:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007934:	bf00      	nop
 8007936:	e7fe      	b.n	8007936 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	2b02      	cmp	r3, #2
 800793c:	d103      	bne.n	8007946 <xQueueGenericSend+0x6e>
 800793e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007942:	2b01      	cmp	r3, #1
 8007944:	d101      	bne.n	800794a <xQueueGenericSend+0x72>
 8007946:	2301      	movs	r3, #1
 8007948:	e000      	b.n	800794c <xQueueGenericSend+0x74>
 800794a:	2300      	movs	r3, #0
 800794c:	2b00      	cmp	r3, #0
 800794e:	d10a      	bne.n	8007966 <xQueueGenericSend+0x8e>
	__asm volatile
 8007950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007954:	f383 8811 	msr	BASEPRI, r3
 8007958:	f3bf 8f6f 	isb	sy
 800795c:	f3bf 8f4f 	dsb	sy
 8007960:	623b      	str	r3, [r7, #32]
}
 8007962:	bf00      	nop
 8007964:	e7fe      	b.n	8007964 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007966:	f001 fa85 	bl	8008e74 <xTaskGetSchedulerState>
 800796a:	4603      	mov	r3, r0
 800796c:	2b00      	cmp	r3, #0
 800796e:	d102      	bne.n	8007976 <xQueueGenericSend+0x9e>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d101      	bne.n	800797a <xQueueGenericSend+0xa2>
 8007976:	2301      	movs	r3, #1
 8007978:	e000      	b.n	800797c <xQueueGenericSend+0xa4>
 800797a:	2300      	movs	r3, #0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d10a      	bne.n	8007996 <xQueueGenericSend+0xbe>
	__asm volatile
 8007980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007984:	f383 8811 	msr	BASEPRI, r3
 8007988:	f3bf 8f6f 	isb	sy
 800798c:	f3bf 8f4f 	dsb	sy
 8007990:	61fb      	str	r3, [r7, #28]
}
 8007992:	bf00      	nop
 8007994:	e7fe      	b.n	8007994 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007996:	f001 fffd 	bl	8009994 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800799a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800799e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d302      	bcc.n	80079ac <xQueueGenericSend+0xd4>
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	d129      	bne.n	8007a00 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80079ac:	683a      	ldr	r2, [r7, #0]
 80079ae:	68b9      	ldr	r1, [r7, #8]
 80079b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079b2:	f000 fa0b 	bl	8007dcc <prvCopyDataToQueue>
 80079b6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80079b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d010      	beq.n	80079e2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c2:	3324      	adds	r3, #36	; 0x24
 80079c4:	4618      	mov	r0, r3
 80079c6:	f001 f831 	bl	8008a2c <xTaskRemoveFromEventList>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d013      	beq.n	80079f8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80079d0:	4b3f      	ldr	r3, [pc, #252]	; (8007ad0 <xQueueGenericSend+0x1f8>)
 80079d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079d6:	601a      	str	r2, [r3, #0]
 80079d8:	f3bf 8f4f 	dsb	sy
 80079dc:	f3bf 8f6f 	isb	sy
 80079e0:	e00a      	b.n	80079f8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80079e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d007      	beq.n	80079f8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80079e8:	4b39      	ldr	r3, [pc, #228]	; (8007ad0 <xQueueGenericSend+0x1f8>)
 80079ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079ee:	601a      	str	r2, [r3, #0]
 80079f0:	f3bf 8f4f 	dsb	sy
 80079f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80079f8:	f001 fffc 	bl	80099f4 <vPortExitCritical>
				return pdPASS;
 80079fc:	2301      	movs	r3, #1
 80079fe:	e063      	b.n	8007ac8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d103      	bne.n	8007a0e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007a06:	f001 fff5 	bl	80099f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	e05c      	b.n	8007ac8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d106      	bne.n	8007a22 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a14:	f107 0314 	add.w	r3, r7, #20
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f001 f8cd 	bl	8008bb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a22:	f001 ffe7 	bl	80099f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a26:	f000 fd9b 	bl	8008560 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a2a:	f001 ffb3 	bl	8009994 <vPortEnterCritical>
 8007a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a34:	b25b      	sxtb	r3, r3
 8007a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a3a:	d103      	bne.n	8007a44 <xQueueGenericSend+0x16c>
 8007a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a4a:	b25b      	sxtb	r3, r3
 8007a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a50:	d103      	bne.n	8007a5a <xQueueGenericSend+0x182>
 8007a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a54:	2200      	movs	r2, #0
 8007a56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a5a:	f001 ffcb 	bl	80099f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a5e:	1d3a      	adds	r2, r7, #4
 8007a60:	f107 0314 	add.w	r3, r7, #20
 8007a64:	4611      	mov	r1, r2
 8007a66:	4618      	mov	r0, r3
 8007a68:	f001 f8bc 	bl	8008be4 <xTaskCheckForTimeOut>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d124      	bne.n	8007abc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007a72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a74:	f000 faa2 	bl	8007fbc <prvIsQueueFull>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d018      	beq.n	8007ab0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a80:	3310      	adds	r3, #16
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	4611      	mov	r1, r2
 8007a86:	4618      	mov	r0, r3
 8007a88:	f000 ff44 	bl	8008914 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007a8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a8e:	f000 fa2d 	bl	8007eec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007a92:	f000 fd73 	bl	800857c <xTaskResumeAll>
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f47f af7c 	bne.w	8007996 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007a9e:	4b0c      	ldr	r3, [pc, #48]	; (8007ad0 <xQueueGenericSend+0x1f8>)
 8007aa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aa4:	601a      	str	r2, [r3, #0]
 8007aa6:	f3bf 8f4f 	dsb	sy
 8007aaa:	f3bf 8f6f 	isb	sy
 8007aae:	e772      	b.n	8007996 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007ab0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ab2:	f000 fa1b 	bl	8007eec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ab6:	f000 fd61 	bl	800857c <xTaskResumeAll>
 8007aba:	e76c      	b.n	8007996 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007abc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007abe:	f000 fa15 	bl	8007eec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ac2:	f000 fd5b 	bl	800857c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007ac6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3738      	adds	r7, #56	; 0x38
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	e000ed04 	.word	0xe000ed04

08007ad4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b090      	sub	sp, #64	; 0x40
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	607a      	str	r2, [r7, #4]
 8007ae0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d10a      	bne.n	8007b02 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af0:	f383 8811 	msr	BASEPRI, r3
 8007af4:	f3bf 8f6f 	isb	sy
 8007af8:	f3bf 8f4f 	dsb	sy
 8007afc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007afe:	bf00      	nop
 8007b00:	e7fe      	b.n	8007b00 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d103      	bne.n	8007b10 <xQueueGenericSendFromISR+0x3c>
 8007b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d101      	bne.n	8007b14 <xQueueGenericSendFromISR+0x40>
 8007b10:	2301      	movs	r3, #1
 8007b12:	e000      	b.n	8007b16 <xQueueGenericSendFromISR+0x42>
 8007b14:	2300      	movs	r3, #0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d10a      	bne.n	8007b30 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1e:	f383 8811 	msr	BASEPRI, r3
 8007b22:	f3bf 8f6f 	isb	sy
 8007b26:	f3bf 8f4f 	dsb	sy
 8007b2a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007b2c:	bf00      	nop
 8007b2e:	e7fe      	b.n	8007b2e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	d103      	bne.n	8007b3e <xQueueGenericSendFromISR+0x6a>
 8007b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d101      	bne.n	8007b42 <xQueueGenericSendFromISR+0x6e>
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e000      	b.n	8007b44 <xQueueGenericSendFromISR+0x70>
 8007b42:	2300      	movs	r3, #0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d10a      	bne.n	8007b5e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b4c:	f383 8811 	msr	BASEPRI, r3
 8007b50:	f3bf 8f6f 	isb	sy
 8007b54:	f3bf 8f4f 	dsb	sy
 8007b58:	623b      	str	r3, [r7, #32]
}
 8007b5a:	bf00      	nop
 8007b5c:	e7fe      	b.n	8007b5c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007b5e:	f001 fffb 	bl	8009b58 <vPortValidateInterruptPriority>
	__asm volatile
 8007b62:	f3ef 8211 	mrs	r2, BASEPRI
 8007b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6a:	f383 8811 	msr	BASEPRI, r3
 8007b6e:	f3bf 8f6f 	isb	sy
 8007b72:	f3bf 8f4f 	dsb	sy
 8007b76:	61fa      	str	r2, [r7, #28]
 8007b78:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8007b7a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007b7c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d302      	bcc.n	8007b90 <xQueueGenericSendFromISR+0xbc>
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	2b02      	cmp	r3, #2
 8007b8e:	d12f      	bne.n	8007bf0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ba0:	683a      	ldr	r2, [r7, #0]
 8007ba2:	68b9      	ldr	r1, [r7, #8]
 8007ba4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ba6:	f000 f911 	bl	8007dcc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007baa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bb2:	d112      	bne.n	8007bda <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d016      	beq.n	8007bea <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bbe:	3324      	adds	r3, #36	; 0x24
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f000 ff33 	bl	8008a2c <xTaskRemoveFromEventList>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00e      	beq.n	8007bea <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00b      	beq.n	8007bea <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	601a      	str	r2, [r3, #0]
 8007bd8:	e007      	b.n	8007bea <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007bda:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007bde:	3301      	adds	r3, #1
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	b25a      	sxtb	r2, r3
 8007be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007bea:	2301      	movs	r3, #1
 8007bec:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007bee:	e001      	b.n	8007bf4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bf6:	617b      	str	r3, [r7, #20]
	__asm volatile
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	f383 8811 	msr	BASEPRI, r3
}
 8007bfe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3740      	adds	r7, #64	; 0x40
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
	...

08007c0c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b08c      	sub	sp, #48	; 0x30
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	60f8      	str	r0, [r7, #12]
 8007c14:	60b9      	str	r1, [r7, #8]
 8007c16:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d10a      	bne.n	8007c3c <xQueueReceive+0x30>
	__asm volatile
 8007c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c2a:	f383 8811 	msr	BASEPRI, r3
 8007c2e:	f3bf 8f6f 	isb	sy
 8007c32:	f3bf 8f4f 	dsb	sy
 8007c36:	623b      	str	r3, [r7, #32]
}
 8007c38:	bf00      	nop
 8007c3a:	e7fe      	b.n	8007c3a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d103      	bne.n	8007c4a <xQueueReceive+0x3e>
 8007c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d101      	bne.n	8007c4e <xQueueReceive+0x42>
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e000      	b.n	8007c50 <xQueueReceive+0x44>
 8007c4e:	2300      	movs	r3, #0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d10a      	bne.n	8007c6a <xQueueReceive+0x5e>
	__asm volatile
 8007c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c58:	f383 8811 	msr	BASEPRI, r3
 8007c5c:	f3bf 8f6f 	isb	sy
 8007c60:	f3bf 8f4f 	dsb	sy
 8007c64:	61fb      	str	r3, [r7, #28]
}
 8007c66:	bf00      	nop
 8007c68:	e7fe      	b.n	8007c68 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c6a:	f001 f903 	bl	8008e74 <xTaskGetSchedulerState>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d102      	bne.n	8007c7a <xQueueReceive+0x6e>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d101      	bne.n	8007c7e <xQueueReceive+0x72>
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e000      	b.n	8007c80 <xQueueReceive+0x74>
 8007c7e:	2300      	movs	r3, #0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d10a      	bne.n	8007c9a <xQueueReceive+0x8e>
	__asm volatile
 8007c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c88:	f383 8811 	msr	BASEPRI, r3
 8007c8c:	f3bf 8f6f 	isb	sy
 8007c90:	f3bf 8f4f 	dsb	sy
 8007c94:	61bb      	str	r3, [r7, #24]
}
 8007c96:	bf00      	nop
 8007c98:	e7fe      	b.n	8007c98 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c9a:	f001 fe7b 	bl	8009994 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d01f      	beq.n	8007cea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007caa:	68b9      	ldr	r1, [r7, #8]
 8007cac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cae:	f000 f8f7 	bl	8007ea0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb4:	1e5a      	subs	r2, r3, #1
 8007cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cbc:	691b      	ldr	r3, [r3, #16]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d00f      	beq.n	8007ce2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc4:	3310      	adds	r3, #16
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f000 feb0 	bl	8008a2c <xTaskRemoveFromEventList>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d007      	beq.n	8007ce2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007cd2:	4b3d      	ldr	r3, [pc, #244]	; (8007dc8 <xQueueReceive+0x1bc>)
 8007cd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cd8:	601a      	str	r2, [r3, #0]
 8007cda:	f3bf 8f4f 	dsb	sy
 8007cde:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007ce2:	f001 fe87 	bl	80099f4 <vPortExitCritical>
				return pdPASS;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	e069      	b.n	8007dbe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d103      	bne.n	8007cf8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007cf0:	f001 fe80 	bl	80099f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	e062      	b.n	8007dbe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d106      	bne.n	8007d0c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007cfe:	f107 0310 	add.w	r3, r7, #16
 8007d02:	4618      	mov	r0, r3
 8007d04:	f000 ff58 	bl	8008bb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d0c:	f001 fe72 	bl	80099f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d10:	f000 fc26 	bl	8008560 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d14:	f001 fe3e 	bl	8009994 <vPortEnterCritical>
 8007d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d1e:	b25b      	sxtb	r3, r3
 8007d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d24:	d103      	bne.n	8007d2e <xQueueReceive+0x122>
 8007d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d34:	b25b      	sxtb	r3, r3
 8007d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d3a:	d103      	bne.n	8007d44 <xQueueReceive+0x138>
 8007d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d44:	f001 fe56 	bl	80099f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d48:	1d3a      	adds	r2, r7, #4
 8007d4a:	f107 0310 	add.w	r3, r7, #16
 8007d4e:	4611      	mov	r1, r2
 8007d50:	4618      	mov	r0, r3
 8007d52:	f000 ff47 	bl	8008be4 <xTaskCheckForTimeOut>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d123      	bne.n	8007da4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d5e:	f000 f917 	bl	8007f90 <prvIsQueueEmpty>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d017      	beq.n	8007d98 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6a:	3324      	adds	r3, #36	; 0x24
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	4611      	mov	r1, r2
 8007d70:	4618      	mov	r0, r3
 8007d72:	f000 fdcf 	bl	8008914 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007d76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d78:	f000 f8b8 	bl	8007eec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007d7c:	f000 fbfe 	bl	800857c <xTaskResumeAll>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d189      	bne.n	8007c9a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007d86:	4b10      	ldr	r3, [pc, #64]	; (8007dc8 <xQueueReceive+0x1bc>)
 8007d88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d8c:	601a      	str	r2, [r3, #0]
 8007d8e:	f3bf 8f4f 	dsb	sy
 8007d92:	f3bf 8f6f 	isb	sy
 8007d96:	e780      	b.n	8007c9a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007d98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d9a:	f000 f8a7 	bl	8007eec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d9e:	f000 fbed 	bl	800857c <xTaskResumeAll>
 8007da2:	e77a      	b.n	8007c9a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007da4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007da6:	f000 f8a1 	bl	8007eec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007daa:	f000 fbe7 	bl	800857c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007dae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007db0:	f000 f8ee 	bl	8007f90 <prvIsQueueEmpty>
 8007db4:	4603      	mov	r3, r0
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	f43f af6f 	beq.w	8007c9a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007dbc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3730      	adds	r7, #48	; 0x30
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop
 8007dc8:	e000ed04 	.word	0xe000ed04

08007dcc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b086      	sub	sp, #24
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	60b9      	str	r1, [r7, #8]
 8007dd6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d10d      	bne.n	8007e06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d14d      	bne.n	8007e8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	4618      	mov	r0, r3
 8007df8:	f001 f85a 	bl	8008eb0 <xTaskPriorityDisinherit>
 8007dfc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2200      	movs	r2, #0
 8007e02:	609a      	str	r2, [r3, #8]
 8007e04:	e043      	b.n	8007e8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d119      	bne.n	8007e40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6858      	ldr	r0, [r3, #4]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e14:	461a      	mov	r2, r3
 8007e16:	68b9      	ldr	r1, [r7, #8]
 8007e18:	f002 f8f4 	bl	800a004 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	685a      	ldr	r2, [r3, #4]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e24:	441a      	add	r2, r3
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	685a      	ldr	r2, [r3, #4]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d32b      	bcc.n	8007e8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	605a      	str	r2, [r3, #4]
 8007e3e:	e026      	b.n	8007e8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	68d8      	ldr	r0, [r3, #12]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e48:	461a      	mov	r2, r3
 8007e4a:	68b9      	ldr	r1, [r7, #8]
 8007e4c:	f002 f8da 	bl	800a004 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	68da      	ldr	r2, [r3, #12]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e58:	425b      	negs	r3, r3
 8007e5a:	441a      	add	r2, r3
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	68da      	ldr	r2, [r3, #12]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d207      	bcs.n	8007e7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	689a      	ldr	r2, [r3, #8]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e74:	425b      	negs	r3, r3
 8007e76:	441a      	add	r2, r3
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2b02      	cmp	r3, #2
 8007e80:	d105      	bne.n	8007e8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d002      	beq.n	8007e8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	3b01      	subs	r3, #1
 8007e8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	1c5a      	adds	r2, r3, #1
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007e96:	697b      	ldr	r3, [r7, #20]
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3718      	adds	r7, #24
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d018      	beq.n	8007ee4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	68da      	ldr	r2, [r3, #12]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eba:	441a      	add	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	68da      	ldr	r2, [r3, #12]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d303      	bcc.n	8007ed4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	68d9      	ldr	r1, [r3, #12]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007edc:	461a      	mov	r2, r3
 8007ede:	6838      	ldr	r0, [r7, #0]
 8007ee0:	f002 f890 	bl	800a004 <memcpy>
	}
}
 8007ee4:	bf00      	nop
 8007ee6:	3708      	adds	r7, #8
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007ef4:	f001 fd4e 	bl	8009994 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007efe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f00:	e011      	b.n	8007f26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d012      	beq.n	8007f30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	3324      	adds	r3, #36	; 0x24
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f000 fd8c 	bl	8008a2c <xTaskRemoveFromEventList>
 8007f14:	4603      	mov	r3, r0
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d001      	beq.n	8007f1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007f1a:	f000 fec5 	bl	8008ca8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007f1e:	7bfb      	ldrb	r3, [r7, #15]
 8007f20:	3b01      	subs	r3, #1
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	dce9      	bgt.n	8007f02 <prvUnlockQueue+0x16>
 8007f2e:	e000      	b.n	8007f32 <prvUnlockQueue+0x46>
					break;
 8007f30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	22ff      	movs	r2, #255	; 0xff
 8007f36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007f3a:	f001 fd5b 	bl	80099f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007f3e:	f001 fd29 	bl	8009994 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f4a:	e011      	b.n	8007f70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	691b      	ldr	r3, [r3, #16]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d012      	beq.n	8007f7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	3310      	adds	r3, #16
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f000 fd67 	bl	8008a2c <xTaskRemoveFromEventList>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d001      	beq.n	8007f68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007f64:	f000 fea0 	bl	8008ca8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007f68:	7bbb      	ldrb	r3, [r7, #14]
 8007f6a:	3b01      	subs	r3, #1
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	dce9      	bgt.n	8007f4c <prvUnlockQueue+0x60>
 8007f78:	e000      	b.n	8007f7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007f7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	22ff      	movs	r2, #255	; 0xff
 8007f80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007f84:	f001 fd36 	bl	80099f4 <vPortExitCritical>
}
 8007f88:	bf00      	nop
 8007f8a:	3710      	adds	r7, #16
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f98:	f001 fcfc 	bl	8009994 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d102      	bne.n	8007faa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	60fb      	str	r3, [r7, #12]
 8007fa8:	e001      	b.n	8007fae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007faa:	2300      	movs	r3, #0
 8007fac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007fae:	f001 fd21 	bl	80099f4 <vPortExitCritical>

	return xReturn;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3710      	adds	r7, #16
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007fc4:	f001 fce6 	bl	8009994 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d102      	bne.n	8007fda <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	60fb      	str	r3, [r7, #12]
 8007fd8:	e001      	b.n	8007fde <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007fde:	f001 fd09 	bl	80099f4 <vPortExitCritical>

	return xReturn;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3710      	adds	r7, #16
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007fec:	b480      	push	{r7}
 8007fee:	b085      	sub	sp, #20
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	60fb      	str	r3, [r7, #12]
 8007ffa:	e014      	b.n	8008026 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007ffc:	4a0f      	ldr	r2, [pc, #60]	; (800803c <vQueueAddToRegistry+0x50>)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d10b      	bne.n	8008020 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008008:	490c      	ldr	r1, [pc, #48]	; (800803c <vQueueAddToRegistry+0x50>)
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	683a      	ldr	r2, [r7, #0]
 800800e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008012:	4a0a      	ldr	r2, [pc, #40]	; (800803c <vQueueAddToRegistry+0x50>)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	00db      	lsls	r3, r3, #3
 8008018:	4413      	add	r3, r2
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800801e:	e006      	b.n	800802e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	3301      	adds	r3, #1
 8008024:	60fb      	str	r3, [r7, #12]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2b07      	cmp	r3, #7
 800802a:	d9e7      	bls.n	8007ffc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800802c:	bf00      	nop
 800802e:	bf00      	nop
 8008030:	3714      	adds	r7, #20
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr
 800803a:	bf00      	nop
 800803c:	20001174 	.word	0x20001174

08008040 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008040:	b580      	push	{r7, lr}
 8008042:	b086      	sub	sp, #24
 8008044:	af00      	add	r7, sp, #0
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008050:	f001 fca0 	bl	8009994 <vPortEnterCritical>
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800805a:	b25b      	sxtb	r3, r3
 800805c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008060:	d103      	bne.n	800806a <vQueueWaitForMessageRestricted+0x2a>
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	2200      	movs	r2, #0
 8008066:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008070:	b25b      	sxtb	r3, r3
 8008072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008076:	d103      	bne.n	8008080 <vQueueWaitForMessageRestricted+0x40>
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	2200      	movs	r2, #0
 800807c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008080:	f001 fcb8 	bl	80099f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008088:	2b00      	cmp	r3, #0
 800808a:	d106      	bne.n	800809a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	3324      	adds	r3, #36	; 0x24
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	68b9      	ldr	r1, [r7, #8]
 8008094:	4618      	mov	r0, r3
 8008096:	f000 fc9d 	bl	80089d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800809a:	6978      	ldr	r0, [r7, #20]
 800809c:	f7ff ff26 	bl	8007eec <prvUnlockQueue>
	}
 80080a0:	bf00      	nop
 80080a2:	3718      	adds	r7, #24
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b08e      	sub	sp, #56	; 0x38
 80080ac:	af04      	add	r7, sp, #16
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	607a      	str	r2, [r7, #4]
 80080b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80080b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d10a      	bne.n	80080d2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80080bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c0:	f383 8811 	msr	BASEPRI, r3
 80080c4:	f3bf 8f6f 	isb	sy
 80080c8:	f3bf 8f4f 	dsb	sy
 80080cc:	623b      	str	r3, [r7, #32]
}
 80080ce:	bf00      	nop
 80080d0:	e7fe      	b.n	80080d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80080d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d10a      	bne.n	80080ee <xTaskCreateStatic+0x46>
	__asm volatile
 80080d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080dc:	f383 8811 	msr	BASEPRI, r3
 80080e0:	f3bf 8f6f 	isb	sy
 80080e4:	f3bf 8f4f 	dsb	sy
 80080e8:	61fb      	str	r3, [r7, #28]
}
 80080ea:	bf00      	nop
 80080ec:	e7fe      	b.n	80080ec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80080ee:	23bc      	movs	r3, #188	; 0xbc
 80080f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	2bbc      	cmp	r3, #188	; 0xbc
 80080f6:	d00a      	beq.n	800810e <xTaskCreateStatic+0x66>
	__asm volatile
 80080f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080fc:	f383 8811 	msr	BASEPRI, r3
 8008100:	f3bf 8f6f 	isb	sy
 8008104:	f3bf 8f4f 	dsb	sy
 8008108:	61bb      	str	r3, [r7, #24]
}
 800810a:	bf00      	nop
 800810c:	e7fe      	b.n	800810c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800810e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008112:	2b00      	cmp	r3, #0
 8008114:	d01e      	beq.n	8008154 <xTaskCreateStatic+0xac>
 8008116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008118:	2b00      	cmp	r3, #0
 800811a:	d01b      	beq.n	8008154 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800811c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800811e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008122:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008124:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008128:	2202      	movs	r2, #2
 800812a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800812e:	2300      	movs	r3, #0
 8008130:	9303      	str	r3, [sp, #12]
 8008132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008134:	9302      	str	r3, [sp, #8]
 8008136:	f107 0314 	add.w	r3, r7, #20
 800813a:	9301      	str	r3, [sp, #4]
 800813c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813e:	9300      	str	r3, [sp, #0]
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	68b9      	ldr	r1, [r7, #8]
 8008146:	68f8      	ldr	r0, [r7, #12]
 8008148:	f000 f850 	bl	80081ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800814c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800814e:	f000 f8f3 	bl	8008338 <prvAddNewTaskToReadyList>
 8008152:	e001      	b.n	8008158 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008154:	2300      	movs	r3, #0
 8008156:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008158:	697b      	ldr	r3, [r7, #20]
	}
 800815a:	4618      	mov	r0, r3
 800815c:	3728      	adds	r7, #40	; 0x28
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}

08008162 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008162:	b580      	push	{r7, lr}
 8008164:	b08c      	sub	sp, #48	; 0x30
 8008166:	af04      	add	r7, sp, #16
 8008168:	60f8      	str	r0, [r7, #12]
 800816a:	60b9      	str	r1, [r7, #8]
 800816c:	603b      	str	r3, [r7, #0]
 800816e:	4613      	mov	r3, r2
 8008170:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008172:	88fb      	ldrh	r3, [r7, #6]
 8008174:	009b      	lsls	r3, r3, #2
 8008176:	4618      	mov	r0, r3
 8008178:	f001 fd2e 	bl	8009bd8 <pvPortMalloc>
 800817c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d00e      	beq.n	80081a2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008184:	20bc      	movs	r0, #188	; 0xbc
 8008186:	f001 fd27 	bl	8009bd8 <pvPortMalloc>
 800818a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d003      	beq.n	800819a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008192:	69fb      	ldr	r3, [r7, #28]
 8008194:	697a      	ldr	r2, [r7, #20]
 8008196:	631a      	str	r2, [r3, #48]	; 0x30
 8008198:	e005      	b.n	80081a6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800819a:	6978      	ldr	r0, [r7, #20]
 800819c:	f001 fde8 	bl	8009d70 <vPortFree>
 80081a0:	e001      	b.n	80081a6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80081a2:	2300      	movs	r3, #0
 80081a4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80081a6:	69fb      	ldr	r3, [r7, #28]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d017      	beq.n	80081dc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80081ac:	69fb      	ldr	r3, [r7, #28]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80081b4:	88fa      	ldrh	r2, [r7, #6]
 80081b6:	2300      	movs	r3, #0
 80081b8:	9303      	str	r3, [sp, #12]
 80081ba:	69fb      	ldr	r3, [r7, #28]
 80081bc:	9302      	str	r3, [sp, #8]
 80081be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081c0:	9301      	str	r3, [sp, #4]
 80081c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c4:	9300      	str	r3, [sp, #0]
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	68b9      	ldr	r1, [r7, #8]
 80081ca:	68f8      	ldr	r0, [r7, #12]
 80081cc:	f000 f80e 	bl	80081ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80081d0:	69f8      	ldr	r0, [r7, #28]
 80081d2:	f000 f8b1 	bl	8008338 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80081d6:	2301      	movs	r3, #1
 80081d8:	61bb      	str	r3, [r7, #24]
 80081da:	e002      	b.n	80081e2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80081dc:	f04f 33ff 	mov.w	r3, #4294967295
 80081e0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80081e2:	69bb      	ldr	r3, [r7, #24]
	}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3720      	adds	r7, #32
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b088      	sub	sp, #32
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	607a      	str	r2, [r7, #4]
 80081f8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80081fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	461a      	mov	r2, r3
 8008204:	21a5      	movs	r1, #165	; 0xa5
 8008206:	f001 ff0b 	bl	800a020 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800820a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008214:	3b01      	subs	r3, #1
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	4413      	add	r3, r2
 800821a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800821c:	69bb      	ldr	r3, [r7, #24]
 800821e:	f023 0307 	bic.w	r3, r3, #7
 8008222:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008224:	69bb      	ldr	r3, [r7, #24]
 8008226:	f003 0307 	and.w	r3, r3, #7
 800822a:	2b00      	cmp	r3, #0
 800822c:	d00a      	beq.n	8008244 <prvInitialiseNewTask+0x58>
	__asm volatile
 800822e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008232:	f383 8811 	msr	BASEPRI, r3
 8008236:	f3bf 8f6f 	isb	sy
 800823a:	f3bf 8f4f 	dsb	sy
 800823e:	617b      	str	r3, [r7, #20]
}
 8008240:	bf00      	nop
 8008242:	e7fe      	b.n	8008242 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d01f      	beq.n	800828a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800824a:	2300      	movs	r3, #0
 800824c:	61fb      	str	r3, [r7, #28]
 800824e:	e012      	b.n	8008276 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008250:	68ba      	ldr	r2, [r7, #8]
 8008252:	69fb      	ldr	r3, [r7, #28]
 8008254:	4413      	add	r3, r2
 8008256:	7819      	ldrb	r1, [r3, #0]
 8008258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	4413      	add	r3, r2
 800825e:	3334      	adds	r3, #52	; 0x34
 8008260:	460a      	mov	r2, r1
 8008262:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008264:	68ba      	ldr	r2, [r7, #8]
 8008266:	69fb      	ldr	r3, [r7, #28]
 8008268:	4413      	add	r3, r2
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d006      	beq.n	800827e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	3301      	adds	r3, #1
 8008274:	61fb      	str	r3, [r7, #28]
 8008276:	69fb      	ldr	r3, [r7, #28]
 8008278:	2b0f      	cmp	r3, #15
 800827a:	d9e9      	bls.n	8008250 <prvInitialiseNewTask+0x64>
 800827c:	e000      	b.n	8008280 <prvInitialiseNewTask+0x94>
			{
				break;
 800827e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008282:	2200      	movs	r2, #0
 8008284:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008288:	e003      	b.n	8008292 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800828a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828c:	2200      	movs	r2, #0
 800828e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008294:	2b37      	cmp	r3, #55	; 0x37
 8008296:	d901      	bls.n	800829c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008298:	2337      	movs	r3, #55	; 0x37
 800829a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800829c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800829e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082a0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80082a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082a6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80082a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082aa:	2200      	movs	r2, #0
 80082ac:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80082ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b0:	3304      	adds	r3, #4
 80082b2:	4618      	mov	r0, r3
 80082b4:	f7ff f8f2 	bl	800749c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80082b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ba:	3318      	adds	r3, #24
 80082bc:	4618      	mov	r0, r3
 80082be:	f7ff f8ed 	bl	800749c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80082c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80082ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80082d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082d6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80082d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082da:	2200      	movs	r2, #0
 80082dc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80082e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e2:	2200      	movs	r2, #0
 80082e4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80082e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ea:	3354      	adds	r3, #84	; 0x54
 80082ec:	2260      	movs	r2, #96	; 0x60
 80082ee:	2100      	movs	r1, #0
 80082f0:	4618      	mov	r0, r3
 80082f2:	f001 fe95 	bl	800a020 <memset>
 80082f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f8:	4a0c      	ldr	r2, [pc, #48]	; (800832c <prvInitialiseNewTask+0x140>)
 80082fa:	659a      	str	r2, [r3, #88]	; 0x58
 80082fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082fe:	4a0c      	ldr	r2, [pc, #48]	; (8008330 <prvInitialiseNewTask+0x144>)
 8008300:	65da      	str	r2, [r3, #92]	; 0x5c
 8008302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008304:	4a0b      	ldr	r2, [pc, #44]	; (8008334 <prvInitialiseNewTask+0x148>)
 8008306:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008308:	683a      	ldr	r2, [r7, #0]
 800830a:	68f9      	ldr	r1, [r7, #12]
 800830c:	69b8      	ldr	r0, [r7, #24]
 800830e:	f001 fa17 	bl	8009740 <pxPortInitialiseStack>
 8008312:	4602      	mov	r2, r0
 8008314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008316:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800831a:	2b00      	cmp	r3, #0
 800831c:	d002      	beq.n	8008324 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800831e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008322:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008324:	bf00      	nop
 8008326:	3720      	adds	r7, #32
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}
 800832c:	0800ac3c 	.word	0x0800ac3c
 8008330:	0800ac5c 	.word	0x0800ac5c
 8008334:	0800ac1c 	.word	0x0800ac1c

08008338 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008340:	f001 fb28 	bl	8009994 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008344:	4b2d      	ldr	r3, [pc, #180]	; (80083fc <prvAddNewTaskToReadyList+0xc4>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	3301      	adds	r3, #1
 800834a:	4a2c      	ldr	r2, [pc, #176]	; (80083fc <prvAddNewTaskToReadyList+0xc4>)
 800834c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800834e:	4b2c      	ldr	r3, [pc, #176]	; (8008400 <prvAddNewTaskToReadyList+0xc8>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d109      	bne.n	800836a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008356:	4a2a      	ldr	r2, [pc, #168]	; (8008400 <prvAddNewTaskToReadyList+0xc8>)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800835c:	4b27      	ldr	r3, [pc, #156]	; (80083fc <prvAddNewTaskToReadyList+0xc4>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2b01      	cmp	r3, #1
 8008362:	d110      	bne.n	8008386 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008364:	f000 fcc4 	bl	8008cf0 <prvInitialiseTaskLists>
 8008368:	e00d      	b.n	8008386 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800836a:	4b26      	ldr	r3, [pc, #152]	; (8008404 <prvAddNewTaskToReadyList+0xcc>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d109      	bne.n	8008386 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008372:	4b23      	ldr	r3, [pc, #140]	; (8008400 <prvAddNewTaskToReadyList+0xc8>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800837c:	429a      	cmp	r2, r3
 800837e:	d802      	bhi.n	8008386 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008380:	4a1f      	ldr	r2, [pc, #124]	; (8008400 <prvAddNewTaskToReadyList+0xc8>)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008386:	4b20      	ldr	r3, [pc, #128]	; (8008408 <prvAddNewTaskToReadyList+0xd0>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	3301      	adds	r3, #1
 800838c:	4a1e      	ldr	r2, [pc, #120]	; (8008408 <prvAddNewTaskToReadyList+0xd0>)
 800838e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008390:	4b1d      	ldr	r3, [pc, #116]	; (8008408 <prvAddNewTaskToReadyList+0xd0>)
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800839c:	4b1b      	ldr	r3, [pc, #108]	; (800840c <prvAddNewTaskToReadyList+0xd4>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d903      	bls.n	80083ac <prvAddNewTaskToReadyList+0x74>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a8:	4a18      	ldr	r2, [pc, #96]	; (800840c <prvAddNewTaskToReadyList+0xd4>)
 80083aa:	6013      	str	r3, [r2, #0]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083b0:	4613      	mov	r3, r2
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	4413      	add	r3, r2
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	4a15      	ldr	r2, [pc, #84]	; (8008410 <prvAddNewTaskToReadyList+0xd8>)
 80083ba:	441a      	add	r2, r3
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	3304      	adds	r3, #4
 80083c0:	4619      	mov	r1, r3
 80083c2:	4610      	mov	r0, r2
 80083c4:	f7ff f877 	bl	80074b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80083c8:	f001 fb14 	bl	80099f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80083cc:	4b0d      	ldr	r3, [pc, #52]	; (8008404 <prvAddNewTaskToReadyList+0xcc>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d00e      	beq.n	80083f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80083d4:	4b0a      	ldr	r3, [pc, #40]	; (8008400 <prvAddNewTaskToReadyList+0xc8>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083de:	429a      	cmp	r2, r3
 80083e0:	d207      	bcs.n	80083f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80083e2:	4b0c      	ldr	r3, [pc, #48]	; (8008414 <prvAddNewTaskToReadyList+0xdc>)
 80083e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083e8:	601a      	str	r2, [r3, #0]
 80083ea:	f3bf 8f4f 	dsb	sy
 80083ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083f2:	bf00      	nop
 80083f4:	3708      	adds	r7, #8
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	bf00      	nop
 80083fc:	20001688 	.word	0x20001688
 8008400:	200011b4 	.word	0x200011b4
 8008404:	20001694 	.word	0x20001694
 8008408:	200016a4 	.word	0x200016a4
 800840c:	20001690 	.word	0x20001690
 8008410:	200011b8 	.word	0x200011b8
 8008414:	e000ed04 	.word	0xe000ed04

08008418 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008420:	2300      	movs	r3, #0
 8008422:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d017      	beq.n	800845a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800842a:	4b13      	ldr	r3, [pc, #76]	; (8008478 <vTaskDelay+0x60>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d00a      	beq.n	8008448 <vTaskDelay+0x30>
	__asm volatile
 8008432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008436:	f383 8811 	msr	BASEPRI, r3
 800843a:	f3bf 8f6f 	isb	sy
 800843e:	f3bf 8f4f 	dsb	sy
 8008442:	60bb      	str	r3, [r7, #8]
}
 8008444:	bf00      	nop
 8008446:	e7fe      	b.n	8008446 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008448:	f000 f88a 	bl	8008560 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800844c:	2100      	movs	r1, #0
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 fdb4 	bl	8008fbc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008454:	f000 f892 	bl	800857c <xTaskResumeAll>
 8008458:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d107      	bne.n	8008470 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008460:	4b06      	ldr	r3, [pc, #24]	; (800847c <vTaskDelay+0x64>)
 8008462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008466:	601a      	str	r2, [r3, #0]
 8008468:	f3bf 8f4f 	dsb	sy
 800846c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008470:	bf00      	nop
 8008472:	3710      	adds	r7, #16
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}
 8008478:	200016b0 	.word	0x200016b0
 800847c:	e000ed04 	.word	0xe000ed04

08008480 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b08a      	sub	sp, #40	; 0x28
 8008484:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008486:	2300      	movs	r3, #0
 8008488:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800848a:	2300      	movs	r3, #0
 800848c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800848e:	463a      	mov	r2, r7
 8008490:	1d39      	adds	r1, r7, #4
 8008492:	f107 0308 	add.w	r3, r7, #8
 8008496:	4618      	mov	r0, r3
 8008498:	f7fe fd40 	bl	8006f1c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800849c:	6839      	ldr	r1, [r7, #0]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	68ba      	ldr	r2, [r7, #8]
 80084a2:	9202      	str	r2, [sp, #8]
 80084a4:	9301      	str	r3, [sp, #4]
 80084a6:	2300      	movs	r3, #0
 80084a8:	9300      	str	r3, [sp, #0]
 80084aa:	2300      	movs	r3, #0
 80084ac:	460a      	mov	r2, r1
 80084ae:	4924      	ldr	r1, [pc, #144]	; (8008540 <vTaskStartScheduler+0xc0>)
 80084b0:	4824      	ldr	r0, [pc, #144]	; (8008544 <vTaskStartScheduler+0xc4>)
 80084b2:	f7ff fdf9 	bl	80080a8 <xTaskCreateStatic>
 80084b6:	4603      	mov	r3, r0
 80084b8:	4a23      	ldr	r2, [pc, #140]	; (8008548 <vTaskStartScheduler+0xc8>)
 80084ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80084bc:	4b22      	ldr	r3, [pc, #136]	; (8008548 <vTaskStartScheduler+0xc8>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d002      	beq.n	80084ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80084c4:	2301      	movs	r3, #1
 80084c6:	617b      	str	r3, [r7, #20]
 80084c8:	e001      	b.n	80084ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80084ca:	2300      	movs	r3, #0
 80084cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d102      	bne.n	80084da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80084d4:	f000 fdc6 	bl	8009064 <xTimerCreateTimerTask>
 80084d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d11b      	bne.n	8008518 <vTaskStartScheduler+0x98>
	__asm volatile
 80084e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e4:	f383 8811 	msr	BASEPRI, r3
 80084e8:	f3bf 8f6f 	isb	sy
 80084ec:	f3bf 8f4f 	dsb	sy
 80084f0:	613b      	str	r3, [r7, #16]
}
 80084f2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80084f4:	4b15      	ldr	r3, [pc, #84]	; (800854c <vTaskStartScheduler+0xcc>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	3354      	adds	r3, #84	; 0x54
 80084fa:	4a15      	ldr	r2, [pc, #84]	; (8008550 <vTaskStartScheduler+0xd0>)
 80084fc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80084fe:	4b15      	ldr	r3, [pc, #84]	; (8008554 <vTaskStartScheduler+0xd4>)
 8008500:	f04f 32ff 	mov.w	r2, #4294967295
 8008504:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008506:	4b14      	ldr	r3, [pc, #80]	; (8008558 <vTaskStartScheduler+0xd8>)
 8008508:	2201      	movs	r2, #1
 800850a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800850c:	4b13      	ldr	r3, [pc, #76]	; (800855c <vTaskStartScheduler+0xdc>)
 800850e:	2200      	movs	r2, #0
 8008510:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008512:	f001 f99d 	bl	8009850 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008516:	e00e      	b.n	8008536 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800851e:	d10a      	bne.n	8008536 <vTaskStartScheduler+0xb6>
	__asm volatile
 8008520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008524:	f383 8811 	msr	BASEPRI, r3
 8008528:	f3bf 8f6f 	isb	sy
 800852c:	f3bf 8f4f 	dsb	sy
 8008530:	60fb      	str	r3, [r7, #12]
}
 8008532:	bf00      	nop
 8008534:	e7fe      	b.n	8008534 <vTaskStartScheduler+0xb4>
}
 8008536:	bf00      	nop
 8008538:	3718      	adds	r7, #24
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
 800853e:	bf00      	nop
 8008540:	0800aa88 	.word	0x0800aa88
 8008544:	08008cc1 	.word	0x08008cc1
 8008548:	200016ac 	.word	0x200016ac
 800854c:	200011b4 	.word	0x200011b4
 8008550:	20000078 	.word	0x20000078
 8008554:	200016a8 	.word	0x200016a8
 8008558:	20001694 	.word	0x20001694
 800855c:	2000168c 	.word	0x2000168c

08008560 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008560:	b480      	push	{r7}
 8008562:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008564:	4b04      	ldr	r3, [pc, #16]	; (8008578 <vTaskSuspendAll+0x18>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	3301      	adds	r3, #1
 800856a:	4a03      	ldr	r2, [pc, #12]	; (8008578 <vTaskSuspendAll+0x18>)
 800856c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800856e:	bf00      	nop
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr
 8008578:	200016b0 	.word	0x200016b0

0800857c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008582:	2300      	movs	r3, #0
 8008584:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008586:	2300      	movs	r3, #0
 8008588:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800858a:	4b42      	ldr	r3, [pc, #264]	; (8008694 <xTaskResumeAll+0x118>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d10a      	bne.n	80085a8 <xTaskResumeAll+0x2c>
	__asm volatile
 8008592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008596:	f383 8811 	msr	BASEPRI, r3
 800859a:	f3bf 8f6f 	isb	sy
 800859e:	f3bf 8f4f 	dsb	sy
 80085a2:	603b      	str	r3, [r7, #0]
}
 80085a4:	bf00      	nop
 80085a6:	e7fe      	b.n	80085a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80085a8:	f001 f9f4 	bl	8009994 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80085ac:	4b39      	ldr	r3, [pc, #228]	; (8008694 <xTaskResumeAll+0x118>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	3b01      	subs	r3, #1
 80085b2:	4a38      	ldr	r2, [pc, #224]	; (8008694 <xTaskResumeAll+0x118>)
 80085b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085b6:	4b37      	ldr	r3, [pc, #220]	; (8008694 <xTaskResumeAll+0x118>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d162      	bne.n	8008684 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80085be:	4b36      	ldr	r3, [pc, #216]	; (8008698 <xTaskResumeAll+0x11c>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d05e      	beq.n	8008684 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80085c6:	e02f      	b.n	8008628 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085c8:	4b34      	ldr	r3, [pc, #208]	; (800869c <xTaskResumeAll+0x120>)
 80085ca:	68db      	ldr	r3, [r3, #12]
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	3318      	adds	r3, #24
 80085d4:	4618      	mov	r0, r3
 80085d6:	f7fe ffcb 	bl	8007570 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	3304      	adds	r3, #4
 80085de:	4618      	mov	r0, r3
 80085e0:	f7fe ffc6 	bl	8007570 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085e8:	4b2d      	ldr	r3, [pc, #180]	; (80086a0 <xTaskResumeAll+0x124>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d903      	bls.n	80085f8 <xTaskResumeAll+0x7c>
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f4:	4a2a      	ldr	r2, [pc, #168]	; (80086a0 <xTaskResumeAll+0x124>)
 80085f6:	6013      	str	r3, [r2, #0]
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085fc:	4613      	mov	r3, r2
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	4413      	add	r3, r2
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	4a27      	ldr	r2, [pc, #156]	; (80086a4 <xTaskResumeAll+0x128>)
 8008606:	441a      	add	r2, r3
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	3304      	adds	r3, #4
 800860c:	4619      	mov	r1, r3
 800860e:	4610      	mov	r0, r2
 8008610:	f7fe ff51 	bl	80074b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008618:	4b23      	ldr	r3, [pc, #140]	; (80086a8 <xTaskResumeAll+0x12c>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800861e:	429a      	cmp	r2, r3
 8008620:	d302      	bcc.n	8008628 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008622:	4b22      	ldr	r3, [pc, #136]	; (80086ac <xTaskResumeAll+0x130>)
 8008624:	2201      	movs	r2, #1
 8008626:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008628:	4b1c      	ldr	r3, [pc, #112]	; (800869c <xTaskResumeAll+0x120>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d1cb      	bne.n	80085c8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d001      	beq.n	800863a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008636:	f000 fbfd 	bl	8008e34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800863a:	4b1d      	ldr	r3, [pc, #116]	; (80086b0 <xTaskResumeAll+0x134>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d010      	beq.n	8008668 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008646:	f000 f847 	bl	80086d8 <xTaskIncrementTick>
 800864a:	4603      	mov	r3, r0
 800864c:	2b00      	cmp	r3, #0
 800864e:	d002      	beq.n	8008656 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008650:	4b16      	ldr	r3, [pc, #88]	; (80086ac <xTaskResumeAll+0x130>)
 8008652:	2201      	movs	r2, #1
 8008654:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	3b01      	subs	r3, #1
 800865a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d1f1      	bne.n	8008646 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008662:	4b13      	ldr	r3, [pc, #76]	; (80086b0 <xTaskResumeAll+0x134>)
 8008664:	2200      	movs	r2, #0
 8008666:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008668:	4b10      	ldr	r3, [pc, #64]	; (80086ac <xTaskResumeAll+0x130>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d009      	beq.n	8008684 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008670:	2301      	movs	r3, #1
 8008672:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008674:	4b0f      	ldr	r3, [pc, #60]	; (80086b4 <xTaskResumeAll+0x138>)
 8008676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800867a:	601a      	str	r2, [r3, #0]
 800867c:	f3bf 8f4f 	dsb	sy
 8008680:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008684:	f001 f9b6 	bl	80099f4 <vPortExitCritical>

	return xAlreadyYielded;
 8008688:	68bb      	ldr	r3, [r7, #8]
}
 800868a:	4618      	mov	r0, r3
 800868c:	3710      	adds	r7, #16
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
 8008692:	bf00      	nop
 8008694:	200016b0 	.word	0x200016b0
 8008698:	20001688 	.word	0x20001688
 800869c:	20001648 	.word	0x20001648
 80086a0:	20001690 	.word	0x20001690
 80086a4:	200011b8 	.word	0x200011b8
 80086a8:	200011b4 	.word	0x200011b4
 80086ac:	2000169c 	.word	0x2000169c
 80086b0:	20001698 	.word	0x20001698
 80086b4:	e000ed04 	.word	0xe000ed04

080086b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80086b8:	b480      	push	{r7}
 80086ba:	b083      	sub	sp, #12
 80086bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80086be:	4b05      	ldr	r3, [pc, #20]	; (80086d4 <xTaskGetTickCount+0x1c>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80086c4:	687b      	ldr	r3, [r7, #4]
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	370c      	adds	r7, #12
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr
 80086d2:	bf00      	nop
 80086d4:	2000168c 	.word	0x2000168c

080086d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b086      	sub	sp, #24
 80086dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80086de:	2300      	movs	r3, #0
 80086e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086e2:	4b4f      	ldr	r3, [pc, #316]	; (8008820 <xTaskIncrementTick+0x148>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	f040 808f 	bne.w	800880a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80086ec:	4b4d      	ldr	r3, [pc, #308]	; (8008824 <xTaskIncrementTick+0x14c>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	3301      	adds	r3, #1
 80086f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80086f4:	4a4b      	ldr	r2, [pc, #300]	; (8008824 <xTaskIncrementTick+0x14c>)
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d120      	bne.n	8008742 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008700:	4b49      	ldr	r3, [pc, #292]	; (8008828 <xTaskIncrementTick+0x150>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d00a      	beq.n	8008720 <xTaskIncrementTick+0x48>
	__asm volatile
 800870a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800870e:	f383 8811 	msr	BASEPRI, r3
 8008712:	f3bf 8f6f 	isb	sy
 8008716:	f3bf 8f4f 	dsb	sy
 800871a:	603b      	str	r3, [r7, #0]
}
 800871c:	bf00      	nop
 800871e:	e7fe      	b.n	800871e <xTaskIncrementTick+0x46>
 8008720:	4b41      	ldr	r3, [pc, #260]	; (8008828 <xTaskIncrementTick+0x150>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	60fb      	str	r3, [r7, #12]
 8008726:	4b41      	ldr	r3, [pc, #260]	; (800882c <xTaskIncrementTick+0x154>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a3f      	ldr	r2, [pc, #252]	; (8008828 <xTaskIncrementTick+0x150>)
 800872c:	6013      	str	r3, [r2, #0]
 800872e:	4a3f      	ldr	r2, [pc, #252]	; (800882c <xTaskIncrementTick+0x154>)
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	6013      	str	r3, [r2, #0]
 8008734:	4b3e      	ldr	r3, [pc, #248]	; (8008830 <xTaskIncrementTick+0x158>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	3301      	adds	r3, #1
 800873a:	4a3d      	ldr	r2, [pc, #244]	; (8008830 <xTaskIncrementTick+0x158>)
 800873c:	6013      	str	r3, [r2, #0]
 800873e:	f000 fb79 	bl	8008e34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008742:	4b3c      	ldr	r3, [pc, #240]	; (8008834 <xTaskIncrementTick+0x15c>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	693a      	ldr	r2, [r7, #16]
 8008748:	429a      	cmp	r2, r3
 800874a:	d349      	bcc.n	80087e0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800874c:	4b36      	ldr	r3, [pc, #216]	; (8008828 <xTaskIncrementTick+0x150>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d104      	bne.n	8008760 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008756:	4b37      	ldr	r3, [pc, #220]	; (8008834 <xTaskIncrementTick+0x15c>)
 8008758:	f04f 32ff 	mov.w	r2, #4294967295
 800875c:	601a      	str	r2, [r3, #0]
					break;
 800875e:	e03f      	b.n	80087e0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008760:	4b31      	ldr	r3, [pc, #196]	; (8008828 <xTaskIncrementTick+0x150>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	68db      	ldr	r3, [r3, #12]
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008770:	693a      	ldr	r2, [r7, #16]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	429a      	cmp	r2, r3
 8008776:	d203      	bcs.n	8008780 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008778:	4a2e      	ldr	r2, [pc, #184]	; (8008834 <xTaskIncrementTick+0x15c>)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800877e:	e02f      	b.n	80087e0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	3304      	adds	r3, #4
 8008784:	4618      	mov	r0, r3
 8008786:	f7fe fef3 	bl	8007570 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800878e:	2b00      	cmp	r3, #0
 8008790:	d004      	beq.n	800879c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	3318      	adds	r3, #24
 8008796:	4618      	mov	r0, r3
 8008798:	f7fe feea 	bl	8007570 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087a0:	4b25      	ldr	r3, [pc, #148]	; (8008838 <xTaskIncrementTick+0x160>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d903      	bls.n	80087b0 <xTaskIncrementTick+0xd8>
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ac:	4a22      	ldr	r2, [pc, #136]	; (8008838 <xTaskIncrementTick+0x160>)
 80087ae:	6013      	str	r3, [r2, #0]
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087b4:	4613      	mov	r3, r2
 80087b6:	009b      	lsls	r3, r3, #2
 80087b8:	4413      	add	r3, r2
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	4a1f      	ldr	r2, [pc, #124]	; (800883c <xTaskIncrementTick+0x164>)
 80087be:	441a      	add	r2, r3
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	3304      	adds	r3, #4
 80087c4:	4619      	mov	r1, r3
 80087c6:	4610      	mov	r0, r2
 80087c8:	f7fe fe75 	bl	80074b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087d0:	4b1b      	ldr	r3, [pc, #108]	; (8008840 <xTaskIncrementTick+0x168>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d3b8      	bcc.n	800874c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80087da:	2301      	movs	r3, #1
 80087dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087de:	e7b5      	b.n	800874c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80087e0:	4b17      	ldr	r3, [pc, #92]	; (8008840 <xTaskIncrementTick+0x168>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087e6:	4915      	ldr	r1, [pc, #84]	; (800883c <xTaskIncrementTick+0x164>)
 80087e8:	4613      	mov	r3, r2
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	4413      	add	r3, r2
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	440b      	add	r3, r1
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d901      	bls.n	80087fc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80087f8:	2301      	movs	r3, #1
 80087fa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80087fc:	4b11      	ldr	r3, [pc, #68]	; (8008844 <xTaskIncrementTick+0x16c>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d007      	beq.n	8008814 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008804:	2301      	movs	r3, #1
 8008806:	617b      	str	r3, [r7, #20]
 8008808:	e004      	b.n	8008814 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800880a:	4b0f      	ldr	r3, [pc, #60]	; (8008848 <xTaskIncrementTick+0x170>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	3301      	adds	r3, #1
 8008810:	4a0d      	ldr	r2, [pc, #52]	; (8008848 <xTaskIncrementTick+0x170>)
 8008812:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008814:	697b      	ldr	r3, [r7, #20]
}
 8008816:	4618      	mov	r0, r3
 8008818:	3718      	adds	r7, #24
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	200016b0 	.word	0x200016b0
 8008824:	2000168c 	.word	0x2000168c
 8008828:	20001640 	.word	0x20001640
 800882c:	20001644 	.word	0x20001644
 8008830:	200016a0 	.word	0x200016a0
 8008834:	200016a8 	.word	0x200016a8
 8008838:	20001690 	.word	0x20001690
 800883c:	200011b8 	.word	0x200011b8
 8008840:	200011b4 	.word	0x200011b4
 8008844:	2000169c 	.word	0x2000169c
 8008848:	20001698 	.word	0x20001698

0800884c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800884c:	b480      	push	{r7}
 800884e:	b085      	sub	sp, #20
 8008850:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008852:	4b2a      	ldr	r3, [pc, #168]	; (80088fc <vTaskSwitchContext+0xb0>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d003      	beq.n	8008862 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800885a:	4b29      	ldr	r3, [pc, #164]	; (8008900 <vTaskSwitchContext+0xb4>)
 800885c:	2201      	movs	r2, #1
 800885e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008860:	e046      	b.n	80088f0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008862:	4b27      	ldr	r3, [pc, #156]	; (8008900 <vTaskSwitchContext+0xb4>)
 8008864:	2200      	movs	r2, #0
 8008866:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008868:	4b26      	ldr	r3, [pc, #152]	; (8008904 <vTaskSwitchContext+0xb8>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	60fb      	str	r3, [r7, #12]
 800886e:	e010      	b.n	8008892 <vTaskSwitchContext+0x46>
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d10a      	bne.n	800888c <vTaskSwitchContext+0x40>
	__asm volatile
 8008876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800887a:	f383 8811 	msr	BASEPRI, r3
 800887e:	f3bf 8f6f 	isb	sy
 8008882:	f3bf 8f4f 	dsb	sy
 8008886:	607b      	str	r3, [r7, #4]
}
 8008888:	bf00      	nop
 800888a:	e7fe      	b.n	800888a <vTaskSwitchContext+0x3e>
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	3b01      	subs	r3, #1
 8008890:	60fb      	str	r3, [r7, #12]
 8008892:	491d      	ldr	r1, [pc, #116]	; (8008908 <vTaskSwitchContext+0xbc>)
 8008894:	68fa      	ldr	r2, [r7, #12]
 8008896:	4613      	mov	r3, r2
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	4413      	add	r3, r2
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	440b      	add	r3, r1
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d0e4      	beq.n	8008870 <vTaskSwitchContext+0x24>
 80088a6:	68fa      	ldr	r2, [r7, #12]
 80088a8:	4613      	mov	r3, r2
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	4413      	add	r3, r2
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	4a15      	ldr	r2, [pc, #84]	; (8008908 <vTaskSwitchContext+0xbc>)
 80088b2:	4413      	add	r3, r2
 80088b4:	60bb      	str	r3, [r7, #8]
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	685a      	ldr	r2, [r3, #4]
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	605a      	str	r2, [r3, #4]
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	685a      	ldr	r2, [r3, #4]
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	3308      	adds	r3, #8
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d104      	bne.n	80088d6 <vTaskSwitchContext+0x8a>
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	685a      	ldr	r2, [r3, #4]
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	605a      	str	r2, [r3, #4]
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	68db      	ldr	r3, [r3, #12]
 80088dc:	4a0b      	ldr	r2, [pc, #44]	; (800890c <vTaskSwitchContext+0xc0>)
 80088de:	6013      	str	r3, [r2, #0]
 80088e0:	4a08      	ldr	r2, [pc, #32]	; (8008904 <vTaskSwitchContext+0xb8>)
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80088e6:	4b09      	ldr	r3, [pc, #36]	; (800890c <vTaskSwitchContext+0xc0>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	3354      	adds	r3, #84	; 0x54
 80088ec:	4a08      	ldr	r2, [pc, #32]	; (8008910 <vTaskSwitchContext+0xc4>)
 80088ee:	6013      	str	r3, [r2, #0]
}
 80088f0:	bf00      	nop
 80088f2:	3714      	adds	r7, #20
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr
 80088fc:	200016b0 	.word	0x200016b0
 8008900:	2000169c 	.word	0x2000169c
 8008904:	20001690 	.word	0x20001690
 8008908:	200011b8 	.word	0x200011b8
 800890c:	200011b4 	.word	0x200011b4
 8008910:	20000078 	.word	0x20000078

08008914 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d10a      	bne.n	800893a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008928:	f383 8811 	msr	BASEPRI, r3
 800892c:	f3bf 8f6f 	isb	sy
 8008930:	f3bf 8f4f 	dsb	sy
 8008934:	60fb      	str	r3, [r7, #12]
}
 8008936:	bf00      	nop
 8008938:	e7fe      	b.n	8008938 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800893a:	4b07      	ldr	r3, [pc, #28]	; (8008958 <vTaskPlaceOnEventList+0x44>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	3318      	adds	r3, #24
 8008940:	4619      	mov	r1, r3
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f7fe fddb 	bl	80074fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008948:	2101      	movs	r1, #1
 800894a:	6838      	ldr	r0, [r7, #0]
 800894c:	f000 fb36 	bl	8008fbc <prvAddCurrentTaskToDelayedList>
}
 8008950:	bf00      	nop
 8008952:	3710      	adds	r7, #16
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}
 8008958:	200011b4 	.word	0x200011b4

0800895c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b086      	sub	sp, #24
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d10a      	bne.n	8008984 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800896e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008972:	f383 8811 	msr	BASEPRI, r3
 8008976:	f3bf 8f6f 	isb	sy
 800897a:	f3bf 8f4f 	dsb	sy
 800897e:	617b      	str	r3, [r7, #20]
}
 8008980:	bf00      	nop
 8008982:	e7fe      	b.n	8008982 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8008984:	4b11      	ldr	r3, [pc, #68]	; (80089cc <vTaskPlaceOnUnorderedEventList+0x70>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d10a      	bne.n	80089a2 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800898c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008990:	f383 8811 	msr	BASEPRI, r3
 8008994:	f3bf 8f6f 	isb	sy
 8008998:	f3bf 8f4f 	dsb	sy
 800899c:	613b      	str	r3, [r7, #16]
}
 800899e:	bf00      	nop
 80089a0:	e7fe      	b.n	80089a0 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80089a2:	4b0b      	ldr	r3, [pc, #44]	; (80089d0 <vTaskPlaceOnUnorderedEventList+0x74>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	68ba      	ldr	r2, [r7, #8]
 80089a8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80089ac:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80089ae:	4b08      	ldr	r3, [pc, #32]	; (80089d0 <vTaskPlaceOnUnorderedEventList+0x74>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	3318      	adds	r3, #24
 80089b4:	4619      	mov	r1, r3
 80089b6:	68f8      	ldr	r0, [r7, #12]
 80089b8:	f7fe fd7d 	bl	80074b6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80089bc:	2101      	movs	r1, #1
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 fafc 	bl	8008fbc <prvAddCurrentTaskToDelayedList>
}
 80089c4:	bf00      	nop
 80089c6:	3718      	adds	r7, #24
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}
 80089cc:	200016b0 	.word	0x200016b0
 80089d0:	200011b4 	.word	0x200011b4

080089d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b086      	sub	sp, #24
 80089d8:	af00      	add	r7, sp, #0
 80089da:	60f8      	str	r0, [r7, #12]
 80089dc:	60b9      	str	r1, [r7, #8]
 80089de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d10a      	bne.n	80089fc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80089e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ea:	f383 8811 	msr	BASEPRI, r3
 80089ee:	f3bf 8f6f 	isb	sy
 80089f2:	f3bf 8f4f 	dsb	sy
 80089f6:	617b      	str	r3, [r7, #20]
}
 80089f8:	bf00      	nop
 80089fa:	e7fe      	b.n	80089fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80089fc:	4b0a      	ldr	r3, [pc, #40]	; (8008a28 <vTaskPlaceOnEventListRestricted+0x54>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	3318      	adds	r3, #24
 8008a02:	4619      	mov	r1, r3
 8008a04:	68f8      	ldr	r0, [r7, #12]
 8008a06:	f7fe fd56 	bl	80074b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d002      	beq.n	8008a16 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008a10:	f04f 33ff 	mov.w	r3, #4294967295
 8008a14:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008a16:	6879      	ldr	r1, [r7, #4]
 8008a18:	68b8      	ldr	r0, [r7, #8]
 8008a1a:	f000 facf 	bl	8008fbc <prvAddCurrentTaskToDelayedList>
	}
 8008a1e:	bf00      	nop
 8008a20:	3718      	adds	r7, #24
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}
 8008a26:	bf00      	nop
 8008a28:	200011b4 	.word	0x200011b4

08008a2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b086      	sub	sp, #24
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	68db      	ldr	r3, [r3, #12]
 8008a38:	68db      	ldr	r3, [r3, #12]
 8008a3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d10a      	bne.n	8008a58 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a46:	f383 8811 	msr	BASEPRI, r3
 8008a4a:	f3bf 8f6f 	isb	sy
 8008a4e:	f3bf 8f4f 	dsb	sy
 8008a52:	60fb      	str	r3, [r7, #12]
}
 8008a54:	bf00      	nop
 8008a56:	e7fe      	b.n	8008a56 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	3318      	adds	r3, #24
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f7fe fd87 	bl	8007570 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a62:	4b1e      	ldr	r3, [pc, #120]	; (8008adc <xTaskRemoveFromEventList+0xb0>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d11d      	bne.n	8008aa6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	3304      	adds	r3, #4
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7fe fd7e 	bl	8007570 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a78:	4b19      	ldr	r3, [pc, #100]	; (8008ae0 <xTaskRemoveFromEventList+0xb4>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d903      	bls.n	8008a88 <xTaskRemoveFromEventList+0x5c>
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a84:	4a16      	ldr	r2, [pc, #88]	; (8008ae0 <xTaskRemoveFromEventList+0xb4>)
 8008a86:	6013      	str	r3, [r2, #0]
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a8c:	4613      	mov	r3, r2
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	4413      	add	r3, r2
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	4a13      	ldr	r2, [pc, #76]	; (8008ae4 <xTaskRemoveFromEventList+0xb8>)
 8008a96:	441a      	add	r2, r3
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	3304      	adds	r3, #4
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	4610      	mov	r0, r2
 8008aa0:	f7fe fd09 	bl	80074b6 <vListInsertEnd>
 8008aa4:	e005      	b.n	8008ab2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	3318      	adds	r3, #24
 8008aaa:	4619      	mov	r1, r3
 8008aac:	480e      	ldr	r0, [pc, #56]	; (8008ae8 <xTaskRemoveFromEventList+0xbc>)
 8008aae:	f7fe fd02 	bl	80074b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ab6:	4b0d      	ldr	r3, [pc, #52]	; (8008aec <xTaskRemoveFromEventList+0xc0>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d905      	bls.n	8008acc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008ac4:	4b0a      	ldr	r3, [pc, #40]	; (8008af0 <xTaskRemoveFromEventList+0xc4>)
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	601a      	str	r2, [r3, #0]
 8008aca:	e001      	b.n	8008ad0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008acc:	2300      	movs	r3, #0
 8008ace:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008ad0:	697b      	ldr	r3, [r7, #20]
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3718      	adds	r7, #24
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	200016b0 	.word	0x200016b0
 8008ae0:	20001690 	.word	0x20001690
 8008ae4:	200011b8 	.word	0x200011b8
 8008ae8:	20001648 	.word	0x20001648
 8008aec:	200011b4 	.word	0x200011b4
 8008af0:	2000169c 	.word	0x2000169c

08008af4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b086      	sub	sp, #24
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8008afe:	4b29      	ldr	r3, [pc, #164]	; (8008ba4 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d10a      	bne.n	8008b1c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8008b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b0a:	f383 8811 	msr	BASEPRI, r3
 8008b0e:	f3bf 8f6f 	isb	sy
 8008b12:	f3bf 8f4f 	dsb	sy
 8008b16:	613b      	str	r3, [r7, #16]
}
 8008b18:	bf00      	nop
 8008b1a:	e7fe      	b.n	8008b1a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	68db      	ldr	r3, [r3, #12]
 8008b2a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d10a      	bne.n	8008b48 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8008b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b36:	f383 8811 	msr	BASEPRI, r3
 8008b3a:	f3bf 8f6f 	isb	sy
 8008b3e:	f3bf 8f4f 	dsb	sy
 8008b42:	60fb      	str	r3, [r7, #12]
}
 8008b44:	bf00      	nop
 8008b46:	e7fe      	b.n	8008b46 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f7fe fd11 	bl	8007570 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	3304      	adds	r3, #4
 8008b52:	4618      	mov	r0, r3
 8008b54:	f7fe fd0c 	bl	8007570 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b5c:	4b12      	ldr	r3, [pc, #72]	; (8008ba8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d903      	bls.n	8008b6c <vTaskRemoveFromUnorderedEventList+0x78>
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b68:	4a0f      	ldr	r2, [pc, #60]	; (8008ba8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8008b6a:	6013      	str	r3, [r2, #0]
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b70:	4613      	mov	r3, r2
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	4413      	add	r3, r2
 8008b76:	009b      	lsls	r3, r3, #2
 8008b78:	4a0c      	ldr	r2, [pc, #48]	; (8008bac <vTaskRemoveFromUnorderedEventList+0xb8>)
 8008b7a:	441a      	add	r2, r3
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	3304      	adds	r3, #4
 8008b80:	4619      	mov	r1, r3
 8008b82:	4610      	mov	r0, r2
 8008b84:	f7fe fc97 	bl	80074b6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b8c:	4b08      	ldr	r3, [pc, #32]	; (8008bb0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d902      	bls.n	8008b9c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8008b96:	4b07      	ldr	r3, [pc, #28]	; (8008bb4 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8008b98:	2201      	movs	r2, #1
 8008b9a:	601a      	str	r2, [r3, #0]
	}
}
 8008b9c:	bf00      	nop
 8008b9e:	3718      	adds	r7, #24
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}
 8008ba4:	200016b0 	.word	0x200016b0
 8008ba8:	20001690 	.word	0x20001690
 8008bac:	200011b8 	.word	0x200011b8
 8008bb0:	200011b4 	.word	0x200011b4
 8008bb4:	2000169c 	.word	0x2000169c

08008bb8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b083      	sub	sp, #12
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008bc0:	4b06      	ldr	r3, [pc, #24]	; (8008bdc <vTaskInternalSetTimeOutState+0x24>)
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008bc8:	4b05      	ldr	r3, [pc, #20]	; (8008be0 <vTaskInternalSetTimeOutState+0x28>)
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	605a      	str	r2, [r3, #4]
}
 8008bd0:	bf00      	nop
 8008bd2:	370c      	adds	r7, #12
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr
 8008bdc:	200016a0 	.word	0x200016a0
 8008be0:	2000168c 	.word	0x2000168c

08008be4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b088      	sub	sp, #32
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d10a      	bne.n	8008c0a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf8:	f383 8811 	msr	BASEPRI, r3
 8008bfc:	f3bf 8f6f 	isb	sy
 8008c00:	f3bf 8f4f 	dsb	sy
 8008c04:	613b      	str	r3, [r7, #16]
}
 8008c06:	bf00      	nop
 8008c08:	e7fe      	b.n	8008c08 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d10a      	bne.n	8008c26 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c14:	f383 8811 	msr	BASEPRI, r3
 8008c18:	f3bf 8f6f 	isb	sy
 8008c1c:	f3bf 8f4f 	dsb	sy
 8008c20:	60fb      	str	r3, [r7, #12]
}
 8008c22:	bf00      	nop
 8008c24:	e7fe      	b.n	8008c24 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008c26:	f000 feb5 	bl	8009994 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008c2a:	4b1d      	ldr	r3, [pc, #116]	; (8008ca0 <xTaskCheckForTimeOut+0xbc>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	69ba      	ldr	r2, [r7, #24]
 8008c36:	1ad3      	subs	r3, r2, r3
 8008c38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c42:	d102      	bne.n	8008c4a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008c44:	2300      	movs	r3, #0
 8008c46:	61fb      	str	r3, [r7, #28]
 8008c48:	e023      	b.n	8008c92 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	4b15      	ldr	r3, [pc, #84]	; (8008ca4 <xTaskCheckForTimeOut+0xc0>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d007      	beq.n	8008c66 <xTaskCheckForTimeOut+0x82>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	69ba      	ldr	r2, [r7, #24]
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d302      	bcc.n	8008c66 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008c60:	2301      	movs	r3, #1
 8008c62:	61fb      	str	r3, [r7, #28]
 8008c64:	e015      	b.n	8008c92 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	697a      	ldr	r2, [r7, #20]
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d20b      	bcs.n	8008c88 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	1ad2      	subs	r2, r2, r3
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f7ff ff9b 	bl	8008bb8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008c82:	2300      	movs	r3, #0
 8008c84:	61fb      	str	r3, [r7, #28]
 8008c86:	e004      	b.n	8008c92 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008c92:	f000 feaf 	bl	80099f4 <vPortExitCritical>

	return xReturn;
 8008c96:	69fb      	ldr	r3, [r7, #28]
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3720      	adds	r7, #32
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}
 8008ca0:	2000168c 	.word	0x2000168c
 8008ca4:	200016a0 	.word	0x200016a0

08008ca8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008ca8:	b480      	push	{r7}
 8008caa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008cac:	4b03      	ldr	r3, [pc, #12]	; (8008cbc <vTaskMissedYield+0x14>)
 8008cae:	2201      	movs	r2, #1
 8008cb0:	601a      	str	r2, [r3, #0]
}
 8008cb2:	bf00      	nop
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr
 8008cbc:	2000169c 	.word	0x2000169c

08008cc0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b082      	sub	sp, #8
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008cc8:	f000 f852 	bl	8008d70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008ccc:	4b06      	ldr	r3, [pc, #24]	; (8008ce8 <prvIdleTask+0x28>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	d9f9      	bls.n	8008cc8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008cd4:	4b05      	ldr	r3, [pc, #20]	; (8008cec <prvIdleTask+0x2c>)
 8008cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cda:	601a      	str	r2, [r3, #0]
 8008cdc:	f3bf 8f4f 	dsb	sy
 8008ce0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008ce4:	e7f0      	b.n	8008cc8 <prvIdleTask+0x8>
 8008ce6:	bf00      	nop
 8008ce8:	200011b8 	.word	0x200011b8
 8008cec:	e000ed04 	.word	0xe000ed04

08008cf0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b082      	sub	sp, #8
 8008cf4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	607b      	str	r3, [r7, #4]
 8008cfa:	e00c      	b.n	8008d16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	4613      	mov	r3, r2
 8008d00:	009b      	lsls	r3, r3, #2
 8008d02:	4413      	add	r3, r2
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	4a12      	ldr	r2, [pc, #72]	; (8008d50 <prvInitialiseTaskLists+0x60>)
 8008d08:	4413      	add	r3, r2
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f7fe fba6 	bl	800745c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	3301      	adds	r3, #1
 8008d14:	607b      	str	r3, [r7, #4]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2b37      	cmp	r3, #55	; 0x37
 8008d1a:	d9ef      	bls.n	8008cfc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008d1c:	480d      	ldr	r0, [pc, #52]	; (8008d54 <prvInitialiseTaskLists+0x64>)
 8008d1e:	f7fe fb9d 	bl	800745c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008d22:	480d      	ldr	r0, [pc, #52]	; (8008d58 <prvInitialiseTaskLists+0x68>)
 8008d24:	f7fe fb9a 	bl	800745c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008d28:	480c      	ldr	r0, [pc, #48]	; (8008d5c <prvInitialiseTaskLists+0x6c>)
 8008d2a:	f7fe fb97 	bl	800745c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008d2e:	480c      	ldr	r0, [pc, #48]	; (8008d60 <prvInitialiseTaskLists+0x70>)
 8008d30:	f7fe fb94 	bl	800745c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008d34:	480b      	ldr	r0, [pc, #44]	; (8008d64 <prvInitialiseTaskLists+0x74>)
 8008d36:	f7fe fb91 	bl	800745c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008d3a:	4b0b      	ldr	r3, [pc, #44]	; (8008d68 <prvInitialiseTaskLists+0x78>)
 8008d3c:	4a05      	ldr	r2, [pc, #20]	; (8008d54 <prvInitialiseTaskLists+0x64>)
 8008d3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008d40:	4b0a      	ldr	r3, [pc, #40]	; (8008d6c <prvInitialiseTaskLists+0x7c>)
 8008d42:	4a05      	ldr	r2, [pc, #20]	; (8008d58 <prvInitialiseTaskLists+0x68>)
 8008d44:	601a      	str	r2, [r3, #0]
}
 8008d46:	bf00      	nop
 8008d48:	3708      	adds	r7, #8
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	200011b8 	.word	0x200011b8
 8008d54:	20001618 	.word	0x20001618
 8008d58:	2000162c 	.word	0x2000162c
 8008d5c:	20001648 	.word	0x20001648
 8008d60:	2000165c 	.word	0x2000165c
 8008d64:	20001674 	.word	0x20001674
 8008d68:	20001640 	.word	0x20001640
 8008d6c:	20001644 	.word	0x20001644

08008d70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b082      	sub	sp, #8
 8008d74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d76:	e019      	b.n	8008dac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008d78:	f000 fe0c 	bl	8009994 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d7c:	4b10      	ldr	r3, [pc, #64]	; (8008dc0 <prvCheckTasksWaitingTermination+0x50>)
 8008d7e:	68db      	ldr	r3, [r3, #12]
 8008d80:	68db      	ldr	r3, [r3, #12]
 8008d82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	3304      	adds	r3, #4
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f7fe fbf1 	bl	8007570 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008d8e:	4b0d      	ldr	r3, [pc, #52]	; (8008dc4 <prvCheckTasksWaitingTermination+0x54>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	3b01      	subs	r3, #1
 8008d94:	4a0b      	ldr	r2, [pc, #44]	; (8008dc4 <prvCheckTasksWaitingTermination+0x54>)
 8008d96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008d98:	4b0b      	ldr	r3, [pc, #44]	; (8008dc8 <prvCheckTasksWaitingTermination+0x58>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	3b01      	subs	r3, #1
 8008d9e:	4a0a      	ldr	r2, [pc, #40]	; (8008dc8 <prvCheckTasksWaitingTermination+0x58>)
 8008da0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008da2:	f000 fe27 	bl	80099f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 f810 	bl	8008dcc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008dac:	4b06      	ldr	r3, [pc, #24]	; (8008dc8 <prvCheckTasksWaitingTermination+0x58>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d1e1      	bne.n	8008d78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008db4:	bf00      	nop
 8008db6:	bf00      	nop
 8008db8:	3708      	adds	r7, #8
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
 8008dbe:	bf00      	nop
 8008dc0:	2000165c 	.word	0x2000165c
 8008dc4:	20001688 	.word	0x20001688
 8008dc8:	20001670 	.word	0x20001670

08008dcc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b084      	sub	sp, #16
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	3354      	adds	r3, #84	; 0x54
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f001 f9cb 	bl	800a174 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d108      	bne.n	8008dfa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dec:	4618      	mov	r0, r3
 8008dee:	f000 ffbf 	bl	8009d70 <vPortFree>
				vPortFree( pxTCB );
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 ffbc 	bl	8009d70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008df8:	e018      	b.n	8008e2c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d103      	bne.n	8008e0c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f000 ffb3 	bl	8009d70 <vPortFree>
	}
 8008e0a:	e00f      	b.n	8008e2c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008e12:	2b02      	cmp	r3, #2
 8008e14:	d00a      	beq.n	8008e2c <prvDeleteTCB+0x60>
	__asm volatile
 8008e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e1a:	f383 8811 	msr	BASEPRI, r3
 8008e1e:	f3bf 8f6f 	isb	sy
 8008e22:	f3bf 8f4f 	dsb	sy
 8008e26:	60fb      	str	r3, [r7, #12]
}
 8008e28:	bf00      	nop
 8008e2a:	e7fe      	b.n	8008e2a <prvDeleteTCB+0x5e>
	}
 8008e2c:	bf00      	nop
 8008e2e:	3710      	adds	r7, #16
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008e34:	b480      	push	{r7}
 8008e36:	b083      	sub	sp, #12
 8008e38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e3a:	4b0c      	ldr	r3, [pc, #48]	; (8008e6c <prvResetNextTaskUnblockTime+0x38>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d104      	bne.n	8008e4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008e44:	4b0a      	ldr	r3, [pc, #40]	; (8008e70 <prvResetNextTaskUnblockTime+0x3c>)
 8008e46:	f04f 32ff 	mov.w	r2, #4294967295
 8008e4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008e4c:	e008      	b.n	8008e60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e4e:	4b07      	ldr	r3, [pc, #28]	; (8008e6c <prvResetNextTaskUnblockTime+0x38>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	68db      	ldr	r3, [r3, #12]
 8008e54:	68db      	ldr	r3, [r3, #12]
 8008e56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	4a04      	ldr	r2, [pc, #16]	; (8008e70 <prvResetNextTaskUnblockTime+0x3c>)
 8008e5e:	6013      	str	r3, [r2, #0]
}
 8008e60:	bf00      	nop
 8008e62:	370c      	adds	r7, #12
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr
 8008e6c:	20001640 	.word	0x20001640
 8008e70:	200016a8 	.word	0x200016a8

08008e74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008e74:	b480      	push	{r7}
 8008e76:	b083      	sub	sp, #12
 8008e78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008e7a:	4b0b      	ldr	r3, [pc, #44]	; (8008ea8 <xTaskGetSchedulerState+0x34>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d102      	bne.n	8008e88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008e82:	2301      	movs	r3, #1
 8008e84:	607b      	str	r3, [r7, #4]
 8008e86:	e008      	b.n	8008e9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e88:	4b08      	ldr	r3, [pc, #32]	; (8008eac <xTaskGetSchedulerState+0x38>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d102      	bne.n	8008e96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008e90:	2302      	movs	r3, #2
 8008e92:	607b      	str	r3, [r7, #4]
 8008e94:	e001      	b.n	8008e9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008e96:	2300      	movs	r3, #0
 8008e98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008e9a:	687b      	ldr	r3, [r7, #4]
	}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	370c      	adds	r7, #12
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr
 8008ea8:	20001694 	.word	0x20001694
 8008eac:	200016b0 	.word	0x200016b0

08008eb0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b086      	sub	sp, #24
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d056      	beq.n	8008f74 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008ec6:	4b2e      	ldr	r3, [pc, #184]	; (8008f80 <xTaskPriorityDisinherit+0xd0>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	693a      	ldr	r2, [r7, #16]
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	d00a      	beq.n	8008ee6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed4:	f383 8811 	msr	BASEPRI, r3
 8008ed8:	f3bf 8f6f 	isb	sy
 8008edc:	f3bf 8f4f 	dsb	sy
 8008ee0:	60fb      	str	r3, [r7, #12]
}
 8008ee2:	bf00      	nop
 8008ee4:	e7fe      	b.n	8008ee4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d10a      	bne.n	8008f04 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef2:	f383 8811 	msr	BASEPRI, r3
 8008ef6:	f3bf 8f6f 	isb	sy
 8008efa:	f3bf 8f4f 	dsb	sy
 8008efe:	60bb      	str	r3, [r7, #8]
}
 8008f00:	bf00      	nop
 8008f02:	e7fe      	b.n	8008f02 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f08:	1e5a      	subs	r2, r3, #1
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d02c      	beq.n	8008f74 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d128      	bne.n	8008f74 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	3304      	adds	r3, #4
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7fe fb22 	bl	8007570 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f38:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f44:	4b0f      	ldr	r3, [pc, #60]	; (8008f84 <xTaskPriorityDisinherit+0xd4>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d903      	bls.n	8008f54 <xTaskPriorityDisinherit+0xa4>
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f50:	4a0c      	ldr	r2, [pc, #48]	; (8008f84 <xTaskPriorityDisinherit+0xd4>)
 8008f52:	6013      	str	r3, [r2, #0]
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f58:	4613      	mov	r3, r2
 8008f5a:	009b      	lsls	r3, r3, #2
 8008f5c:	4413      	add	r3, r2
 8008f5e:	009b      	lsls	r3, r3, #2
 8008f60:	4a09      	ldr	r2, [pc, #36]	; (8008f88 <xTaskPriorityDisinherit+0xd8>)
 8008f62:	441a      	add	r2, r3
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	3304      	adds	r3, #4
 8008f68:	4619      	mov	r1, r3
 8008f6a:	4610      	mov	r0, r2
 8008f6c:	f7fe faa3 	bl	80074b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008f70:	2301      	movs	r3, #1
 8008f72:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008f74:	697b      	ldr	r3, [r7, #20]
	}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3718      	adds	r7, #24
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}
 8008f7e:	bf00      	nop
 8008f80:	200011b4 	.word	0x200011b4
 8008f84:	20001690 	.word	0x20001690
 8008f88:	200011b8 	.word	0x200011b8

08008f8c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b083      	sub	sp, #12
 8008f90:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8008f92:	4b09      	ldr	r3, [pc, #36]	; (8008fb8 <uxTaskResetEventItemValue+0x2c>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	699b      	ldr	r3, [r3, #24]
 8008f98:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f9a:	4b07      	ldr	r3, [pc, #28]	; (8008fb8 <uxTaskResetEventItemValue+0x2c>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fa0:	4b05      	ldr	r3, [pc, #20]	; (8008fb8 <uxTaskResetEventItemValue+0x2c>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8008fa8:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8008faa:	687b      	ldr	r3, [r7, #4]
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	370c      	adds	r7, #12
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr
 8008fb8:	200011b4 	.word	0x200011b4

08008fbc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b084      	sub	sp, #16
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008fc6:	4b21      	ldr	r3, [pc, #132]	; (800904c <prvAddCurrentTaskToDelayedList+0x90>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008fcc:	4b20      	ldr	r3, [pc, #128]	; (8009050 <prvAddCurrentTaskToDelayedList+0x94>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	3304      	adds	r3, #4
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f7fe facc 	bl	8007570 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fde:	d10a      	bne.n	8008ff6 <prvAddCurrentTaskToDelayedList+0x3a>
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d007      	beq.n	8008ff6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008fe6:	4b1a      	ldr	r3, [pc, #104]	; (8009050 <prvAddCurrentTaskToDelayedList+0x94>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	3304      	adds	r3, #4
 8008fec:	4619      	mov	r1, r3
 8008fee:	4819      	ldr	r0, [pc, #100]	; (8009054 <prvAddCurrentTaskToDelayedList+0x98>)
 8008ff0:	f7fe fa61 	bl	80074b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008ff4:	e026      	b.n	8009044 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008ff6:	68fa      	ldr	r2, [r7, #12]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	4413      	add	r3, r2
 8008ffc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008ffe:	4b14      	ldr	r3, [pc, #80]	; (8009050 <prvAddCurrentTaskToDelayedList+0x94>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	68ba      	ldr	r2, [r7, #8]
 8009004:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009006:	68ba      	ldr	r2, [r7, #8]
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	429a      	cmp	r2, r3
 800900c:	d209      	bcs.n	8009022 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800900e:	4b12      	ldr	r3, [pc, #72]	; (8009058 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009010:	681a      	ldr	r2, [r3, #0]
 8009012:	4b0f      	ldr	r3, [pc, #60]	; (8009050 <prvAddCurrentTaskToDelayedList+0x94>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	3304      	adds	r3, #4
 8009018:	4619      	mov	r1, r3
 800901a:	4610      	mov	r0, r2
 800901c:	f7fe fa6f 	bl	80074fe <vListInsert>
}
 8009020:	e010      	b.n	8009044 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009022:	4b0e      	ldr	r3, [pc, #56]	; (800905c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009024:	681a      	ldr	r2, [r3, #0]
 8009026:	4b0a      	ldr	r3, [pc, #40]	; (8009050 <prvAddCurrentTaskToDelayedList+0x94>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	3304      	adds	r3, #4
 800902c:	4619      	mov	r1, r3
 800902e:	4610      	mov	r0, r2
 8009030:	f7fe fa65 	bl	80074fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009034:	4b0a      	ldr	r3, [pc, #40]	; (8009060 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	68ba      	ldr	r2, [r7, #8]
 800903a:	429a      	cmp	r2, r3
 800903c:	d202      	bcs.n	8009044 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800903e:	4a08      	ldr	r2, [pc, #32]	; (8009060 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	6013      	str	r3, [r2, #0]
}
 8009044:	bf00      	nop
 8009046:	3710      	adds	r7, #16
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}
 800904c:	2000168c 	.word	0x2000168c
 8009050:	200011b4 	.word	0x200011b4
 8009054:	20001674 	.word	0x20001674
 8009058:	20001644 	.word	0x20001644
 800905c:	20001640 	.word	0x20001640
 8009060:	200016a8 	.word	0x200016a8

08009064 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b08a      	sub	sp, #40	; 0x28
 8009068:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800906a:	2300      	movs	r3, #0
 800906c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800906e:	f000 fb07 	bl	8009680 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009072:	4b1c      	ldr	r3, [pc, #112]	; (80090e4 <xTimerCreateTimerTask+0x80>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d021      	beq.n	80090be <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800907a:	2300      	movs	r3, #0
 800907c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800907e:	2300      	movs	r3, #0
 8009080:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009082:	1d3a      	adds	r2, r7, #4
 8009084:	f107 0108 	add.w	r1, r7, #8
 8009088:	f107 030c 	add.w	r3, r7, #12
 800908c:	4618      	mov	r0, r3
 800908e:	f7fd ff5f 	bl	8006f50 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009092:	6879      	ldr	r1, [r7, #4]
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	68fa      	ldr	r2, [r7, #12]
 8009098:	9202      	str	r2, [sp, #8]
 800909a:	9301      	str	r3, [sp, #4]
 800909c:	2302      	movs	r3, #2
 800909e:	9300      	str	r3, [sp, #0]
 80090a0:	2300      	movs	r3, #0
 80090a2:	460a      	mov	r2, r1
 80090a4:	4910      	ldr	r1, [pc, #64]	; (80090e8 <xTimerCreateTimerTask+0x84>)
 80090a6:	4811      	ldr	r0, [pc, #68]	; (80090ec <xTimerCreateTimerTask+0x88>)
 80090a8:	f7fe fffe 	bl	80080a8 <xTaskCreateStatic>
 80090ac:	4603      	mov	r3, r0
 80090ae:	4a10      	ldr	r2, [pc, #64]	; (80090f0 <xTimerCreateTimerTask+0x8c>)
 80090b0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80090b2:	4b0f      	ldr	r3, [pc, #60]	; (80090f0 <xTimerCreateTimerTask+0x8c>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d001      	beq.n	80090be <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80090ba:	2301      	movs	r3, #1
 80090bc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d10a      	bne.n	80090da <xTimerCreateTimerTask+0x76>
	__asm volatile
 80090c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c8:	f383 8811 	msr	BASEPRI, r3
 80090cc:	f3bf 8f6f 	isb	sy
 80090d0:	f3bf 8f4f 	dsb	sy
 80090d4:	613b      	str	r3, [r7, #16]
}
 80090d6:	bf00      	nop
 80090d8:	e7fe      	b.n	80090d8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80090da:	697b      	ldr	r3, [r7, #20]
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3718      	adds	r7, #24
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}
 80090e4:	200016e4 	.word	0x200016e4
 80090e8:	0800aa90 	.word	0x0800aa90
 80090ec:	08009229 	.word	0x08009229
 80090f0:	200016e8 	.word	0x200016e8

080090f4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b08a      	sub	sp, #40	; 0x28
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	60f8      	str	r0, [r7, #12]
 80090fc:	60b9      	str	r1, [r7, #8]
 80090fe:	607a      	str	r2, [r7, #4]
 8009100:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009102:	2300      	movs	r3, #0
 8009104:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d10a      	bne.n	8009122 <xTimerGenericCommand+0x2e>
	__asm volatile
 800910c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009110:	f383 8811 	msr	BASEPRI, r3
 8009114:	f3bf 8f6f 	isb	sy
 8009118:	f3bf 8f4f 	dsb	sy
 800911c:	623b      	str	r3, [r7, #32]
}
 800911e:	bf00      	nop
 8009120:	e7fe      	b.n	8009120 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009122:	4b1a      	ldr	r3, [pc, #104]	; (800918c <xTimerGenericCommand+0x98>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d02a      	beq.n	8009180 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	2b05      	cmp	r3, #5
 800913a:	dc18      	bgt.n	800916e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800913c:	f7ff fe9a 	bl	8008e74 <xTaskGetSchedulerState>
 8009140:	4603      	mov	r3, r0
 8009142:	2b02      	cmp	r3, #2
 8009144:	d109      	bne.n	800915a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009146:	4b11      	ldr	r3, [pc, #68]	; (800918c <xTimerGenericCommand+0x98>)
 8009148:	6818      	ldr	r0, [r3, #0]
 800914a:	f107 0110 	add.w	r1, r7, #16
 800914e:	2300      	movs	r3, #0
 8009150:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009152:	f7fe fbc1 	bl	80078d8 <xQueueGenericSend>
 8009156:	6278      	str	r0, [r7, #36]	; 0x24
 8009158:	e012      	b.n	8009180 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800915a:	4b0c      	ldr	r3, [pc, #48]	; (800918c <xTimerGenericCommand+0x98>)
 800915c:	6818      	ldr	r0, [r3, #0]
 800915e:	f107 0110 	add.w	r1, r7, #16
 8009162:	2300      	movs	r3, #0
 8009164:	2200      	movs	r2, #0
 8009166:	f7fe fbb7 	bl	80078d8 <xQueueGenericSend>
 800916a:	6278      	str	r0, [r7, #36]	; 0x24
 800916c:	e008      	b.n	8009180 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800916e:	4b07      	ldr	r3, [pc, #28]	; (800918c <xTimerGenericCommand+0x98>)
 8009170:	6818      	ldr	r0, [r3, #0]
 8009172:	f107 0110 	add.w	r1, r7, #16
 8009176:	2300      	movs	r3, #0
 8009178:	683a      	ldr	r2, [r7, #0]
 800917a:	f7fe fcab 	bl	8007ad4 <xQueueGenericSendFromISR>
 800917e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009182:	4618      	mov	r0, r3
 8009184:	3728      	adds	r7, #40	; 0x28
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
 800918a:	bf00      	nop
 800918c:	200016e4 	.word	0x200016e4

08009190 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b088      	sub	sp, #32
 8009194:	af02      	add	r7, sp, #8
 8009196:	6078      	str	r0, [r7, #4]
 8009198:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800919a:	4b22      	ldr	r3, [pc, #136]	; (8009224 <prvProcessExpiredTimer+0x94>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	68db      	ldr	r3, [r3, #12]
 80091a0:	68db      	ldr	r3, [r3, #12]
 80091a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	3304      	adds	r3, #4
 80091a8:	4618      	mov	r0, r3
 80091aa:	f7fe f9e1 	bl	8007570 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091b4:	f003 0304 	and.w	r3, r3, #4
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d022      	beq.n	8009202 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	699a      	ldr	r2, [r3, #24]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	18d1      	adds	r1, r2, r3
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	683a      	ldr	r2, [r7, #0]
 80091c8:	6978      	ldr	r0, [r7, #20]
 80091ca:	f000 f8d1 	bl	8009370 <prvInsertTimerInActiveList>
 80091ce:	4603      	mov	r3, r0
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d01f      	beq.n	8009214 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80091d4:	2300      	movs	r3, #0
 80091d6:	9300      	str	r3, [sp, #0]
 80091d8:	2300      	movs	r3, #0
 80091da:	687a      	ldr	r2, [r7, #4]
 80091dc:	2100      	movs	r1, #0
 80091de:	6978      	ldr	r0, [r7, #20]
 80091e0:	f7ff ff88 	bl	80090f4 <xTimerGenericCommand>
 80091e4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d113      	bne.n	8009214 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80091ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f0:	f383 8811 	msr	BASEPRI, r3
 80091f4:	f3bf 8f6f 	isb	sy
 80091f8:	f3bf 8f4f 	dsb	sy
 80091fc:	60fb      	str	r3, [r7, #12]
}
 80091fe:	bf00      	nop
 8009200:	e7fe      	b.n	8009200 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009208:	f023 0301 	bic.w	r3, r3, #1
 800920c:	b2da      	uxtb	r2, r3
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	6a1b      	ldr	r3, [r3, #32]
 8009218:	6978      	ldr	r0, [r7, #20]
 800921a:	4798      	blx	r3
}
 800921c:	bf00      	nop
 800921e:	3718      	adds	r7, #24
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}
 8009224:	200016dc 	.word	0x200016dc

08009228 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009230:	f107 0308 	add.w	r3, r7, #8
 8009234:	4618      	mov	r0, r3
 8009236:	f000 f857 	bl	80092e8 <prvGetNextExpireTime>
 800923a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	4619      	mov	r1, r3
 8009240:	68f8      	ldr	r0, [r7, #12]
 8009242:	f000 f803 	bl	800924c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009246:	f000 f8d5 	bl	80093f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800924a:	e7f1      	b.n	8009230 <prvTimerTask+0x8>

0800924c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b084      	sub	sp, #16
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009256:	f7ff f983 	bl	8008560 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800925a:	f107 0308 	add.w	r3, r7, #8
 800925e:	4618      	mov	r0, r3
 8009260:	f000 f866 	bl	8009330 <prvSampleTimeNow>
 8009264:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d130      	bne.n	80092ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d10a      	bne.n	8009288 <prvProcessTimerOrBlockTask+0x3c>
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	429a      	cmp	r2, r3
 8009278:	d806      	bhi.n	8009288 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800927a:	f7ff f97f 	bl	800857c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800927e:	68f9      	ldr	r1, [r7, #12]
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f7ff ff85 	bl	8009190 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009286:	e024      	b.n	80092d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d008      	beq.n	80092a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800928e:	4b13      	ldr	r3, [pc, #76]	; (80092dc <prvProcessTimerOrBlockTask+0x90>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d101      	bne.n	800929c <prvProcessTimerOrBlockTask+0x50>
 8009298:	2301      	movs	r3, #1
 800929a:	e000      	b.n	800929e <prvProcessTimerOrBlockTask+0x52>
 800929c:	2300      	movs	r3, #0
 800929e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80092a0:	4b0f      	ldr	r3, [pc, #60]	; (80092e0 <prvProcessTimerOrBlockTask+0x94>)
 80092a2:	6818      	ldr	r0, [r3, #0]
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	1ad3      	subs	r3, r2, r3
 80092aa:	683a      	ldr	r2, [r7, #0]
 80092ac:	4619      	mov	r1, r3
 80092ae:	f7fe fec7 	bl	8008040 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80092b2:	f7ff f963 	bl	800857c <xTaskResumeAll>
 80092b6:	4603      	mov	r3, r0
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d10a      	bne.n	80092d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80092bc:	4b09      	ldr	r3, [pc, #36]	; (80092e4 <prvProcessTimerOrBlockTask+0x98>)
 80092be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092c2:	601a      	str	r2, [r3, #0]
 80092c4:	f3bf 8f4f 	dsb	sy
 80092c8:	f3bf 8f6f 	isb	sy
}
 80092cc:	e001      	b.n	80092d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80092ce:	f7ff f955 	bl	800857c <xTaskResumeAll>
}
 80092d2:	bf00      	nop
 80092d4:	3710      	adds	r7, #16
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}
 80092da:	bf00      	nop
 80092dc:	200016e0 	.word	0x200016e0
 80092e0:	200016e4 	.word	0x200016e4
 80092e4:	e000ed04 	.word	0xe000ed04

080092e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80092e8:	b480      	push	{r7}
 80092ea:	b085      	sub	sp, #20
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80092f0:	4b0e      	ldr	r3, [pc, #56]	; (800932c <prvGetNextExpireTime+0x44>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d101      	bne.n	80092fe <prvGetNextExpireTime+0x16>
 80092fa:	2201      	movs	r2, #1
 80092fc:	e000      	b.n	8009300 <prvGetNextExpireTime+0x18>
 80092fe:	2200      	movs	r2, #0
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d105      	bne.n	8009318 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800930c:	4b07      	ldr	r3, [pc, #28]	; (800932c <prvGetNextExpireTime+0x44>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	68db      	ldr	r3, [r3, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	60fb      	str	r3, [r7, #12]
 8009316:	e001      	b.n	800931c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009318:	2300      	movs	r3, #0
 800931a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800931c:	68fb      	ldr	r3, [r7, #12]
}
 800931e:	4618      	mov	r0, r3
 8009320:	3714      	adds	r7, #20
 8009322:	46bd      	mov	sp, r7
 8009324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009328:	4770      	bx	lr
 800932a:	bf00      	nop
 800932c:	200016dc 	.word	0x200016dc

08009330 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009338:	f7ff f9be 	bl	80086b8 <xTaskGetTickCount>
 800933c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800933e:	4b0b      	ldr	r3, [pc, #44]	; (800936c <prvSampleTimeNow+0x3c>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	68fa      	ldr	r2, [r7, #12]
 8009344:	429a      	cmp	r2, r3
 8009346:	d205      	bcs.n	8009354 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009348:	f000 f936 	bl	80095b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2201      	movs	r2, #1
 8009350:	601a      	str	r2, [r3, #0]
 8009352:	e002      	b.n	800935a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2200      	movs	r2, #0
 8009358:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800935a:	4a04      	ldr	r2, [pc, #16]	; (800936c <prvSampleTimeNow+0x3c>)
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009360:	68fb      	ldr	r3, [r7, #12]
}
 8009362:	4618      	mov	r0, r3
 8009364:	3710      	adds	r7, #16
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop
 800936c:	200016ec 	.word	0x200016ec

08009370 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b086      	sub	sp, #24
 8009374:	af00      	add	r7, sp, #0
 8009376:	60f8      	str	r0, [r7, #12]
 8009378:	60b9      	str	r1, [r7, #8]
 800937a:	607a      	str	r2, [r7, #4]
 800937c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800937e:	2300      	movs	r3, #0
 8009380:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	68ba      	ldr	r2, [r7, #8]
 8009386:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	68fa      	ldr	r2, [r7, #12]
 800938c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800938e:	68ba      	ldr	r2, [r7, #8]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	429a      	cmp	r2, r3
 8009394:	d812      	bhi.n	80093bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	1ad2      	subs	r2, r2, r3
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	699b      	ldr	r3, [r3, #24]
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d302      	bcc.n	80093aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80093a4:	2301      	movs	r3, #1
 80093a6:	617b      	str	r3, [r7, #20]
 80093a8:	e01b      	b.n	80093e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80093aa:	4b10      	ldr	r3, [pc, #64]	; (80093ec <prvInsertTimerInActiveList+0x7c>)
 80093ac:	681a      	ldr	r2, [r3, #0]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	3304      	adds	r3, #4
 80093b2:	4619      	mov	r1, r3
 80093b4:	4610      	mov	r0, r2
 80093b6:	f7fe f8a2 	bl	80074fe <vListInsert>
 80093ba:	e012      	b.n	80093e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d206      	bcs.n	80093d2 <prvInsertTimerInActiveList+0x62>
 80093c4:	68ba      	ldr	r2, [r7, #8]
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d302      	bcc.n	80093d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80093cc:	2301      	movs	r3, #1
 80093ce:	617b      	str	r3, [r7, #20]
 80093d0:	e007      	b.n	80093e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80093d2:	4b07      	ldr	r3, [pc, #28]	; (80093f0 <prvInsertTimerInActiveList+0x80>)
 80093d4:	681a      	ldr	r2, [r3, #0]
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	3304      	adds	r3, #4
 80093da:	4619      	mov	r1, r3
 80093dc:	4610      	mov	r0, r2
 80093de:	f7fe f88e 	bl	80074fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 80093e2:	697b      	ldr	r3, [r7, #20]
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3718      	adds	r7, #24
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}
 80093ec:	200016e0 	.word	0x200016e0
 80093f0:	200016dc 	.word	0x200016dc

080093f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b08e      	sub	sp, #56	; 0x38
 80093f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80093fa:	e0ca      	b.n	8009592 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	da18      	bge.n	8009434 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009402:	1d3b      	adds	r3, r7, #4
 8009404:	3304      	adds	r3, #4
 8009406:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800940a:	2b00      	cmp	r3, #0
 800940c:	d10a      	bne.n	8009424 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800940e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009412:	f383 8811 	msr	BASEPRI, r3
 8009416:	f3bf 8f6f 	isb	sy
 800941a:	f3bf 8f4f 	dsb	sy
 800941e:	61fb      	str	r3, [r7, #28]
}
 8009420:	bf00      	nop
 8009422:	e7fe      	b.n	8009422 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800942a:	6850      	ldr	r0, [r2, #4]
 800942c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800942e:	6892      	ldr	r2, [r2, #8]
 8009430:	4611      	mov	r1, r2
 8009432:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2b00      	cmp	r3, #0
 8009438:	f2c0 80aa 	blt.w	8009590 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009442:	695b      	ldr	r3, [r3, #20]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d004      	beq.n	8009452 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800944a:	3304      	adds	r3, #4
 800944c:	4618      	mov	r0, r3
 800944e:	f7fe f88f 	bl	8007570 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009452:	463b      	mov	r3, r7
 8009454:	4618      	mov	r0, r3
 8009456:	f7ff ff6b 	bl	8009330 <prvSampleTimeNow>
 800945a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2b09      	cmp	r3, #9
 8009460:	f200 8097 	bhi.w	8009592 <prvProcessReceivedCommands+0x19e>
 8009464:	a201      	add	r2, pc, #4	; (adr r2, 800946c <prvProcessReceivedCommands+0x78>)
 8009466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800946a:	bf00      	nop
 800946c:	08009495 	.word	0x08009495
 8009470:	08009495 	.word	0x08009495
 8009474:	08009495 	.word	0x08009495
 8009478:	08009509 	.word	0x08009509
 800947c:	0800951d 	.word	0x0800951d
 8009480:	08009567 	.word	0x08009567
 8009484:	08009495 	.word	0x08009495
 8009488:	08009495 	.word	0x08009495
 800948c:	08009509 	.word	0x08009509
 8009490:	0800951d 	.word	0x0800951d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009496:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800949a:	f043 0301 	orr.w	r3, r3, #1
 800949e:	b2da      	uxtb	r2, r3
 80094a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80094a6:	68ba      	ldr	r2, [r7, #8]
 80094a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094aa:	699b      	ldr	r3, [r3, #24]
 80094ac:	18d1      	adds	r1, r2, r3
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094b4:	f7ff ff5c 	bl	8009370 <prvInsertTimerInActiveList>
 80094b8:	4603      	mov	r3, r0
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d069      	beq.n	8009592 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094c0:	6a1b      	ldr	r3, [r3, #32]
 80094c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80094c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094cc:	f003 0304 	and.w	r3, r3, #4
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d05e      	beq.n	8009592 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80094d4:	68ba      	ldr	r2, [r7, #8]
 80094d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d8:	699b      	ldr	r3, [r3, #24]
 80094da:	441a      	add	r2, r3
 80094dc:	2300      	movs	r3, #0
 80094de:	9300      	str	r3, [sp, #0]
 80094e0:	2300      	movs	r3, #0
 80094e2:	2100      	movs	r1, #0
 80094e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094e6:	f7ff fe05 	bl	80090f4 <xTimerGenericCommand>
 80094ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80094ec:	6a3b      	ldr	r3, [r7, #32]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d14f      	bne.n	8009592 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80094f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f6:	f383 8811 	msr	BASEPRI, r3
 80094fa:	f3bf 8f6f 	isb	sy
 80094fe:	f3bf 8f4f 	dsb	sy
 8009502:	61bb      	str	r3, [r7, #24]
}
 8009504:	bf00      	nop
 8009506:	e7fe      	b.n	8009506 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800950a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800950e:	f023 0301 	bic.w	r3, r3, #1
 8009512:	b2da      	uxtb	r2, r3
 8009514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009516:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800951a:	e03a      	b.n	8009592 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800951c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800951e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009522:	f043 0301 	orr.w	r3, r3, #1
 8009526:	b2da      	uxtb	r2, r3
 8009528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800952a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800952e:	68ba      	ldr	r2, [r7, #8]
 8009530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009532:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009536:	699b      	ldr	r3, [r3, #24]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d10a      	bne.n	8009552 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800953c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009540:	f383 8811 	msr	BASEPRI, r3
 8009544:	f3bf 8f6f 	isb	sy
 8009548:	f3bf 8f4f 	dsb	sy
 800954c:	617b      	str	r3, [r7, #20]
}
 800954e:	bf00      	nop
 8009550:	e7fe      	b.n	8009550 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009554:	699a      	ldr	r2, [r3, #24]
 8009556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009558:	18d1      	adds	r1, r2, r3
 800955a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800955c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800955e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009560:	f7ff ff06 	bl	8009370 <prvInsertTimerInActiveList>
					break;
 8009564:	e015      	b.n	8009592 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009568:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800956c:	f003 0302 	and.w	r3, r3, #2
 8009570:	2b00      	cmp	r3, #0
 8009572:	d103      	bne.n	800957c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009574:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009576:	f000 fbfb 	bl	8009d70 <vPortFree>
 800957a:	e00a      	b.n	8009592 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800957c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800957e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009582:	f023 0301 	bic.w	r3, r3, #1
 8009586:	b2da      	uxtb	r2, r3
 8009588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800958a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800958e:	e000      	b.n	8009592 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009590:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009592:	4b08      	ldr	r3, [pc, #32]	; (80095b4 <prvProcessReceivedCommands+0x1c0>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	1d39      	adds	r1, r7, #4
 8009598:	2200      	movs	r2, #0
 800959a:	4618      	mov	r0, r3
 800959c:	f7fe fb36 	bl	8007c0c <xQueueReceive>
 80095a0:	4603      	mov	r3, r0
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	f47f af2a 	bne.w	80093fc <prvProcessReceivedCommands+0x8>
	}
}
 80095a8:	bf00      	nop
 80095aa:	bf00      	nop
 80095ac:	3730      	adds	r7, #48	; 0x30
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}
 80095b2:	bf00      	nop
 80095b4:	200016e4 	.word	0x200016e4

080095b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b088      	sub	sp, #32
 80095bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80095be:	e048      	b.n	8009652 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80095c0:	4b2d      	ldr	r3, [pc, #180]	; (8009678 <prvSwitchTimerLists+0xc0>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	68db      	ldr	r3, [r3, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095ca:	4b2b      	ldr	r3, [pc, #172]	; (8009678 <prvSwitchTimerLists+0xc0>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	68db      	ldr	r3, [r3, #12]
 80095d0:	68db      	ldr	r3, [r3, #12]
 80095d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	3304      	adds	r3, #4
 80095d8:	4618      	mov	r0, r3
 80095da:	f7fd ffc9 	bl	8007570 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	6a1b      	ldr	r3, [r3, #32]
 80095e2:	68f8      	ldr	r0, [r7, #12]
 80095e4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095ec:	f003 0304 	and.w	r3, r3, #4
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d02e      	beq.n	8009652 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	699b      	ldr	r3, [r3, #24]
 80095f8:	693a      	ldr	r2, [r7, #16]
 80095fa:	4413      	add	r3, r2
 80095fc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80095fe:	68ba      	ldr	r2, [r7, #8]
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	429a      	cmp	r2, r3
 8009604:	d90e      	bls.n	8009624 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	68ba      	ldr	r2, [r7, #8]
 800960a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	68fa      	ldr	r2, [r7, #12]
 8009610:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009612:	4b19      	ldr	r3, [pc, #100]	; (8009678 <prvSwitchTimerLists+0xc0>)
 8009614:	681a      	ldr	r2, [r3, #0]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	3304      	adds	r3, #4
 800961a:	4619      	mov	r1, r3
 800961c:	4610      	mov	r0, r2
 800961e:	f7fd ff6e 	bl	80074fe <vListInsert>
 8009622:	e016      	b.n	8009652 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009624:	2300      	movs	r3, #0
 8009626:	9300      	str	r3, [sp, #0]
 8009628:	2300      	movs	r3, #0
 800962a:	693a      	ldr	r2, [r7, #16]
 800962c:	2100      	movs	r1, #0
 800962e:	68f8      	ldr	r0, [r7, #12]
 8009630:	f7ff fd60 	bl	80090f4 <xTimerGenericCommand>
 8009634:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d10a      	bne.n	8009652 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800963c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009640:	f383 8811 	msr	BASEPRI, r3
 8009644:	f3bf 8f6f 	isb	sy
 8009648:	f3bf 8f4f 	dsb	sy
 800964c:	603b      	str	r3, [r7, #0]
}
 800964e:	bf00      	nop
 8009650:	e7fe      	b.n	8009650 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009652:	4b09      	ldr	r3, [pc, #36]	; (8009678 <prvSwitchTimerLists+0xc0>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d1b1      	bne.n	80095c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800965c:	4b06      	ldr	r3, [pc, #24]	; (8009678 <prvSwitchTimerLists+0xc0>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009662:	4b06      	ldr	r3, [pc, #24]	; (800967c <prvSwitchTimerLists+0xc4>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4a04      	ldr	r2, [pc, #16]	; (8009678 <prvSwitchTimerLists+0xc0>)
 8009668:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800966a:	4a04      	ldr	r2, [pc, #16]	; (800967c <prvSwitchTimerLists+0xc4>)
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	6013      	str	r3, [r2, #0]
}
 8009670:	bf00      	nop
 8009672:	3718      	adds	r7, #24
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}
 8009678:	200016dc 	.word	0x200016dc
 800967c:	200016e0 	.word	0x200016e0

08009680 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b082      	sub	sp, #8
 8009684:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009686:	f000 f985 	bl	8009994 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800968a:	4b15      	ldr	r3, [pc, #84]	; (80096e0 <prvCheckForValidListAndQueue+0x60>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d120      	bne.n	80096d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009692:	4814      	ldr	r0, [pc, #80]	; (80096e4 <prvCheckForValidListAndQueue+0x64>)
 8009694:	f7fd fee2 	bl	800745c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009698:	4813      	ldr	r0, [pc, #76]	; (80096e8 <prvCheckForValidListAndQueue+0x68>)
 800969a:	f7fd fedf 	bl	800745c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800969e:	4b13      	ldr	r3, [pc, #76]	; (80096ec <prvCheckForValidListAndQueue+0x6c>)
 80096a0:	4a10      	ldr	r2, [pc, #64]	; (80096e4 <prvCheckForValidListAndQueue+0x64>)
 80096a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80096a4:	4b12      	ldr	r3, [pc, #72]	; (80096f0 <prvCheckForValidListAndQueue+0x70>)
 80096a6:	4a10      	ldr	r2, [pc, #64]	; (80096e8 <prvCheckForValidListAndQueue+0x68>)
 80096a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80096aa:	2300      	movs	r3, #0
 80096ac:	9300      	str	r3, [sp, #0]
 80096ae:	4b11      	ldr	r3, [pc, #68]	; (80096f4 <prvCheckForValidListAndQueue+0x74>)
 80096b0:	4a11      	ldr	r2, [pc, #68]	; (80096f8 <prvCheckForValidListAndQueue+0x78>)
 80096b2:	2110      	movs	r1, #16
 80096b4:	200a      	movs	r0, #10
 80096b6:	f7fd ffed 	bl	8007694 <xQueueGenericCreateStatic>
 80096ba:	4603      	mov	r3, r0
 80096bc:	4a08      	ldr	r2, [pc, #32]	; (80096e0 <prvCheckForValidListAndQueue+0x60>)
 80096be:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80096c0:	4b07      	ldr	r3, [pc, #28]	; (80096e0 <prvCheckForValidListAndQueue+0x60>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d005      	beq.n	80096d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80096c8:	4b05      	ldr	r3, [pc, #20]	; (80096e0 <prvCheckForValidListAndQueue+0x60>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	490b      	ldr	r1, [pc, #44]	; (80096fc <prvCheckForValidListAndQueue+0x7c>)
 80096ce:	4618      	mov	r0, r3
 80096d0:	f7fe fc8c 	bl	8007fec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80096d4:	f000 f98e 	bl	80099f4 <vPortExitCritical>
}
 80096d8:	bf00      	nop
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
 80096de:	bf00      	nop
 80096e0:	200016e4 	.word	0x200016e4
 80096e4:	200016b4 	.word	0x200016b4
 80096e8:	200016c8 	.word	0x200016c8
 80096ec:	200016dc 	.word	0x200016dc
 80096f0:	200016e0 	.word	0x200016e0
 80096f4:	20001790 	.word	0x20001790
 80096f8:	200016f0 	.word	0x200016f0
 80096fc:	0800aa98 	.word	0x0800aa98

08009700 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009700:	b580      	push	{r7, lr}
 8009702:	b08a      	sub	sp, #40	; 0x28
 8009704:	af00      	add	r7, sp, #0
 8009706:	60f8      	str	r0, [r7, #12]
 8009708:	60b9      	str	r1, [r7, #8]
 800970a:	607a      	str	r2, [r7, #4]
 800970c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800970e:	f06f 0301 	mvn.w	r3, #1
 8009712:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009720:	4b06      	ldr	r3, [pc, #24]	; (800973c <xTimerPendFunctionCallFromISR+0x3c>)
 8009722:	6818      	ldr	r0, [r3, #0]
 8009724:	f107 0114 	add.w	r1, r7, #20
 8009728:	2300      	movs	r3, #0
 800972a:	683a      	ldr	r2, [r7, #0]
 800972c:	f7fe f9d2 	bl	8007ad4 <xQueueGenericSendFromISR>
 8009730:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8009732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8009734:	4618      	mov	r0, r3
 8009736:	3728      	adds	r7, #40	; 0x28
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}
 800973c:	200016e4 	.word	0x200016e4

08009740 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009740:	b480      	push	{r7}
 8009742:	b085      	sub	sp, #20
 8009744:	af00      	add	r7, sp, #0
 8009746:	60f8      	str	r0, [r7, #12]
 8009748:	60b9      	str	r1, [r7, #8]
 800974a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	3b04      	subs	r3, #4
 8009750:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009758:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	3b04      	subs	r3, #4
 800975e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	f023 0201 	bic.w	r2, r3, #1
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	3b04      	subs	r3, #4
 800976e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009770:	4a0c      	ldr	r2, [pc, #48]	; (80097a4 <pxPortInitialiseStack+0x64>)
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	3b14      	subs	r3, #20
 800977a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800977c:	687a      	ldr	r2, [r7, #4]
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	3b04      	subs	r3, #4
 8009786:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f06f 0202 	mvn.w	r2, #2
 800978e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	3b20      	subs	r3, #32
 8009794:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009796:	68fb      	ldr	r3, [r7, #12]
}
 8009798:	4618      	mov	r0, r3
 800979a:	3714      	adds	r7, #20
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr
 80097a4:	080097a9 	.word	0x080097a9

080097a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80097a8:	b480      	push	{r7}
 80097aa:	b085      	sub	sp, #20
 80097ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80097ae:	2300      	movs	r3, #0
 80097b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80097b2:	4b12      	ldr	r3, [pc, #72]	; (80097fc <prvTaskExitError+0x54>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097ba:	d00a      	beq.n	80097d2 <prvTaskExitError+0x2a>
	__asm volatile
 80097bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c0:	f383 8811 	msr	BASEPRI, r3
 80097c4:	f3bf 8f6f 	isb	sy
 80097c8:	f3bf 8f4f 	dsb	sy
 80097cc:	60fb      	str	r3, [r7, #12]
}
 80097ce:	bf00      	nop
 80097d0:	e7fe      	b.n	80097d0 <prvTaskExitError+0x28>
	__asm volatile
 80097d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d6:	f383 8811 	msr	BASEPRI, r3
 80097da:	f3bf 8f6f 	isb	sy
 80097de:	f3bf 8f4f 	dsb	sy
 80097e2:	60bb      	str	r3, [r7, #8]
}
 80097e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80097e6:	bf00      	nop
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d0fc      	beq.n	80097e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80097ee:	bf00      	nop
 80097f0:	bf00      	nop
 80097f2:	3714      	adds	r7, #20
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr
 80097fc:	20000074 	.word	0x20000074

08009800 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009800:	4b07      	ldr	r3, [pc, #28]	; (8009820 <pxCurrentTCBConst2>)
 8009802:	6819      	ldr	r1, [r3, #0]
 8009804:	6808      	ldr	r0, [r1, #0]
 8009806:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800980a:	f380 8809 	msr	PSP, r0
 800980e:	f3bf 8f6f 	isb	sy
 8009812:	f04f 0000 	mov.w	r0, #0
 8009816:	f380 8811 	msr	BASEPRI, r0
 800981a:	4770      	bx	lr
 800981c:	f3af 8000 	nop.w

08009820 <pxCurrentTCBConst2>:
 8009820:	200011b4 	.word	0x200011b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009824:	bf00      	nop
 8009826:	bf00      	nop

08009828 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009828:	4808      	ldr	r0, [pc, #32]	; (800984c <prvPortStartFirstTask+0x24>)
 800982a:	6800      	ldr	r0, [r0, #0]
 800982c:	6800      	ldr	r0, [r0, #0]
 800982e:	f380 8808 	msr	MSP, r0
 8009832:	f04f 0000 	mov.w	r0, #0
 8009836:	f380 8814 	msr	CONTROL, r0
 800983a:	b662      	cpsie	i
 800983c:	b661      	cpsie	f
 800983e:	f3bf 8f4f 	dsb	sy
 8009842:	f3bf 8f6f 	isb	sy
 8009846:	df00      	svc	0
 8009848:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800984a:	bf00      	nop
 800984c:	e000ed08 	.word	0xe000ed08

08009850 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b086      	sub	sp, #24
 8009854:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009856:	4b46      	ldr	r3, [pc, #280]	; (8009970 <xPortStartScheduler+0x120>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4a46      	ldr	r2, [pc, #280]	; (8009974 <xPortStartScheduler+0x124>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d10a      	bne.n	8009876 <xPortStartScheduler+0x26>
	__asm volatile
 8009860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009864:	f383 8811 	msr	BASEPRI, r3
 8009868:	f3bf 8f6f 	isb	sy
 800986c:	f3bf 8f4f 	dsb	sy
 8009870:	613b      	str	r3, [r7, #16]
}
 8009872:	bf00      	nop
 8009874:	e7fe      	b.n	8009874 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009876:	4b3e      	ldr	r3, [pc, #248]	; (8009970 <xPortStartScheduler+0x120>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4a3f      	ldr	r2, [pc, #252]	; (8009978 <xPortStartScheduler+0x128>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d10a      	bne.n	8009896 <xPortStartScheduler+0x46>
	__asm volatile
 8009880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009884:	f383 8811 	msr	BASEPRI, r3
 8009888:	f3bf 8f6f 	isb	sy
 800988c:	f3bf 8f4f 	dsb	sy
 8009890:	60fb      	str	r3, [r7, #12]
}
 8009892:	bf00      	nop
 8009894:	e7fe      	b.n	8009894 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009896:	4b39      	ldr	r3, [pc, #228]	; (800997c <xPortStartScheduler+0x12c>)
 8009898:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	b2db      	uxtb	r3, r3
 80098a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	22ff      	movs	r2, #255	; 0xff
 80098a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	b2db      	uxtb	r3, r3
 80098ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80098b0:	78fb      	ldrb	r3, [r7, #3]
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80098b8:	b2da      	uxtb	r2, r3
 80098ba:	4b31      	ldr	r3, [pc, #196]	; (8009980 <xPortStartScheduler+0x130>)
 80098bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80098be:	4b31      	ldr	r3, [pc, #196]	; (8009984 <xPortStartScheduler+0x134>)
 80098c0:	2207      	movs	r2, #7
 80098c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80098c4:	e009      	b.n	80098da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80098c6:	4b2f      	ldr	r3, [pc, #188]	; (8009984 <xPortStartScheduler+0x134>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	3b01      	subs	r3, #1
 80098cc:	4a2d      	ldr	r2, [pc, #180]	; (8009984 <xPortStartScheduler+0x134>)
 80098ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80098d0:	78fb      	ldrb	r3, [r7, #3]
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	005b      	lsls	r3, r3, #1
 80098d6:	b2db      	uxtb	r3, r3
 80098d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80098da:	78fb      	ldrb	r3, [r7, #3]
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098e2:	2b80      	cmp	r3, #128	; 0x80
 80098e4:	d0ef      	beq.n	80098c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80098e6:	4b27      	ldr	r3, [pc, #156]	; (8009984 <xPortStartScheduler+0x134>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f1c3 0307 	rsb	r3, r3, #7
 80098ee:	2b04      	cmp	r3, #4
 80098f0:	d00a      	beq.n	8009908 <xPortStartScheduler+0xb8>
	__asm volatile
 80098f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f6:	f383 8811 	msr	BASEPRI, r3
 80098fa:	f3bf 8f6f 	isb	sy
 80098fe:	f3bf 8f4f 	dsb	sy
 8009902:	60bb      	str	r3, [r7, #8]
}
 8009904:	bf00      	nop
 8009906:	e7fe      	b.n	8009906 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009908:	4b1e      	ldr	r3, [pc, #120]	; (8009984 <xPortStartScheduler+0x134>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	021b      	lsls	r3, r3, #8
 800990e:	4a1d      	ldr	r2, [pc, #116]	; (8009984 <xPortStartScheduler+0x134>)
 8009910:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009912:	4b1c      	ldr	r3, [pc, #112]	; (8009984 <xPortStartScheduler+0x134>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800991a:	4a1a      	ldr	r2, [pc, #104]	; (8009984 <xPortStartScheduler+0x134>)
 800991c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	b2da      	uxtb	r2, r3
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009926:	4b18      	ldr	r3, [pc, #96]	; (8009988 <xPortStartScheduler+0x138>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4a17      	ldr	r2, [pc, #92]	; (8009988 <xPortStartScheduler+0x138>)
 800992c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009930:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009932:	4b15      	ldr	r3, [pc, #84]	; (8009988 <xPortStartScheduler+0x138>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	4a14      	ldr	r2, [pc, #80]	; (8009988 <xPortStartScheduler+0x138>)
 8009938:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800993c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800993e:	f000 f8dd 	bl	8009afc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009942:	4b12      	ldr	r3, [pc, #72]	; (800998c <xPortStartScheduler+0x13c>)
 8009944:	2200      	movs	r2, #0
 8009946:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009948:	f000 f8fc 	bl	8009b44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800994c:	4b10      	ldr	r3, [pc, #64]	; (8009990 <xPortStartScheduler+0x140>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a0f      	ldr	r2, [pc, #60]	; (8009990 <xPortStartScheduler+0x140>)
 8009952:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009956:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009958:	f7ff ff66 	bl	8009828 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800995c:	f7fe ff76 	bl	800884c <vTaskSwitchContext>
	prvTaskExitError();
 8009960:	f7ff ff22 	bl	80097a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009964:	2300      	movs	r3, #0
}
 8009966:	4618      	mov	r0, r3
 8009968:	3718      	adds	r7, #24
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}
 800996e:	bf00      	nop
 8009970:	e000ed00 	.word	0xe000ed00
 8009974:	410fc271 	.word	0x410fc271
 8009978:	410fc270 	.word	0x410fc270
 800997c:	e000e400 	.word	0xe000e400
 8009980:	200017e0 	.word	0x200017e0
 8009984:	200017e4 	.word	0x200017e4
 8009988:	e000ed20 	.word	0xe000ed20
 800998c:	20000074 	.word	0x20000074
 8009990:	e000ef34 	.word	0xe000ef34

08009994 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009994:	b480      	push	{r7}
 8009996:	b083      	sub	sp, #12
 8009998:	af00      	add	r7, sp, #0
	__asm volatile
 800999a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800999e:	f383 8811 	msr	BASEPRI, r3
 80099a2:	f3bf 8f6f 	isb	sy
 80099a6:	f3bf 8f4f 	dsb	sy
 80099aa:	607b      	str	r3, [r7, #4]
}
 80099ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80099ae:	4b0f      	ldr	r3, [pc, #60]	; (80099ec <vPortEnterCritical+0x58>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	3301      	adds	r3, #1
 80099b4:	4a0d      	ldr	r2, [pc, #52]	; (80099ec <vPortEnterCritical+0x58>)
 80099b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80099b8:	4b0c      	ldr	r3, [pc, #48]	; (80099ec <vPortEnterCritical+0x58>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	2b01      	cmp	r3, #1
 80099be:	d10f      	bne.n	80099e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80099c0:	4b0b      	ldr	r3, [pc, #44]	; (80099f0 <vPortEnterCritical+0x5c>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	b2db      	uxtb	r3, r3
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d00a      	beq.n	80099e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80099ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ce:	f383 8811 	msr	BASEPRI, r3
 80099d2:	f3bf 8f6f 	isb	sy
 80099d6:	f3bf 8f4f 	dsb	sy
 80099da:	603b      	str	r3, [r7, #0]
}
 80099dc:	bf00      	nop
 80099de:	e7fe      	b.n	80099de <vPortEnterCritical+0x4a>
	}
}
 80099e0:	bf00      	nop
 80099e2:	370c      	adds	r7, #12
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr
 80099ec:	20000074 	.word	0x20000074
 80099f0:	e000ed04 	.word	0xe000ed04

080099f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80099f4:	b480      	push	{r7}
 80099f6:	b083      	sub	sp, #12
 80099f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80099fa:	4b12      	ldr	r3, [pc, #72]	; (8009a44 <vPortExitCritical+0x50>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d10a      	bne.n	8009a18 <vPortExitCritical+0x24>
	__asm volatile
 8009a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a06:	f383 8811 	msr	BASEPRI, r3
 8009a0a:	f3bf 8f6f 	isb	sy
 8009a0e:	f3bf 8f4f 	dsb	sy
 8009a12:	607b      	str	r3, [r7, #4]
}
 8009a14:	bf00      	nop
 8009a16:	e7fe      	b.n	8009a16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009a18:	4b0a      	ldr	r3, [pc, #40]	; (8009a44 <vPortExitCritical+0x50>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	3b01      	subs	r3, #1
 8009a1e:	4a09      	ldr	r2, [pc, #36]	; (8009a44 <vPortExitCritical+0x50>)
 8009a20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009a22:	4b08      	ldr	r3, [pc, #32]	; (8009a44 <vPortExitCritical+0x50>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d105      	bne.n	8009a36 <vPortExitCritical+0x42>
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	f383 8811 	msr	BASEPRI, r3
}
 8009a34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009a36:	bf00      	nop
 8009a38:	370c      	adds	r7, #12
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a40:	4770      	bx	lr
 8009a42:	bf00      	nop
 8009a44:	20000074 	.word	0x20000074
	...

08009a50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009a50:	f3ef 8009 	mrs	r0, PSP
 8009a54:	f3bf 8f6f 	isb	sy
 8009a58:	4b15      	ldr	r3, [pc, #84]	; (8009ab0 <pxCurrentTCBConst>)
 8009a5a:	681a      	ldr	r2, [r3, #0]
 8009a5c:	f01e 0f10 	tst.w	lr, #16
 8009a60:	bf08      	it	eq
 8009a62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009a66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a6a:	6010      	str	r0, [r2, #0]
 8009a6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009a70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009a74:	f380 8811 	msr	BASEPRI, r0
 8009a78:	f3bf 8f4f 	dsb	sy
 8009a7c:	f3bf 8f6f 	isb	sy
 8009a80:	f7fe fee4 	bl	800884c <vTaskSwitchContext>
 8009a84:	f04f 0000 	mov.w	r0, #0
 8009a88:	f380 8811 	msr	BASEPRI, r0
 8009a8c:	bc09      	pop	{r0, r3}
 8009a8e:	6819      	ldr	r1, [r3, #0]
 8009a90:	6808      	ldr	r0, [r1, #0]
 8009a92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a96:	f01e 0f10 	tst.w	lr, #16
 8009a9a:	bf08      	it	eq
 8009a9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009aa0:	f380 8809 	msr	PSP, r0
 8009aa4:	f3bf 8f6f 	isb	sy
 8009aa8:	4770      	bx	lr
 8009aaa:	bf00      	nop
 8009aac:	f3af 8000 	nop.w

08009ab0 <pxCurrentTCBConst>:
 8009ab0:	200011b4 	.word	0x200011b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009ab4:	bf00      	nop
 8009ab6:	bf00      	nop

08009ab8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b082      	sub	sp, #8
 8009abc:	af00      	add	r7, sp, #0
	__asm volatile
 8009abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac2:	f383 8811 	msr	BASEPRI, r3
 8009ac6:	f3bf 8f6f 	isb	sy
 8009aca:	f3bf 8f4f 	dsb	sy
 8009ace:	607b      	str	r3, [r7, #4]
}
 8009ad0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009ad2:	f7fe fe01 	bl	80086d8 <xTaskIncrementTick>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d003      	beq.n	8009ae4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009adc:	4b06      	ldr	r3, [pc, #24]	; (8009af8 <xPortSysTickHandler+0x40>)
 8009ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ae2:	601a      	str	r2, [r3, #0]
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	f383 8811 	msr	BASEPRI, r3
}
 8009aee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009af0:	bf00      	nop
 8009af2:	3708      	adds	r7, #8
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}
 8009af8:	e000ed04 	.word	0xe000ed04

08009afc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009afc:	b480      	push	{r7}
 8009afe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009b00:	4b0b      	ldr	r3, [pc, #44]	; (8009b30 <vPortSetupTimerInterrupt+0x34>)
 8009b02:	2200      	movs	r2, #0
 8009b04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009b06:	4b0b      	ldr	r3, [pc, #44]	; (8009b34 <vPortSetupTimerInterrupt+0x38>)
 8009b08:	2200      	movs	r2, #0
 8009b0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009b0c:	4b0a      	ldr	r3, [pc, #40]	; (8009b38 <vPortSetupTimerInterrupt+0x3c>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a0a      	ldr	r2, [pc, #40]	; (8009b3c <vPortSetupTimerInterrupt+0x40>)
 8009b12:	fba2 2303 	umull	r2, r3, r2, r3
 8009b16:	099b      	lsrs	r3, r3, #6
 8009b18:	4a09      	ldr	r2, [pc, #36]	; (8009b40 <vPortSetupTimerInterrupt+0x44>)
 8009b1a:	3b01      	subs	r3, #1
 8009b1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009b1e:	4b04      	ldr	r3, [pc, #16]	; (8009b30 <vPortSetupTimerInterrupt+0x34>)
 8009b20:	2207      	movs	r2, #7
 8009b22:	601a      	str	r2, [r3, #0]
}
 8009b24:	bf00      	nop
 8009b26:	46bd      	mov	sp, r7
 8009b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2c:	4770      	bx	lr
 8009b2e:	bf00      	nop
 8009b30:	e000e010 	.word	0xe000e010
 8009b34:	e000e018 	.word	0xe000e018
 8009b38:	20000068 	.word	0x20000068
 8009b3c:	10624dd3 	.word	0x10624dd3
 8009b40:	e000e014 	.word	0xe000e014

08009b44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009b44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009b54 <vPortEnableVFP+0x10>
 8009b48:	6801      	ldr	r1, [r0, #0]
 8009b4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009b4e:	6001      	str	r1, [r0, #0]
 8009b50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009b52:	bf00      	nop
 8009b54:	e000ed88 	.word	0xe000ed88

08009b58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009b58:	b480      	push	{r7}
 8009b5a:	b085      	sub	sp, #20
 8009b5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009b5e:	f3ef 8305 	mrs	r3, IPSR
 8009b62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2b0f      	cmp	r3, #15
 8009b68:	d914      	bls.n	8009b94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009b6a:	4a17      	ldr	r2, [pc, #92]	; (8009bc8 <vPortValidateInterruptPriority+0x70>)
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	4413      	add	r3, r2
 8009b70:	781b      	ldrb	r3, [r3, #0]
 8009b72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009b74:	4b15      	ldr	r3, [pc, #84]	; (8009bcc <vPortValidateInterruptPriority+0x74>)
 8009b76:	781b      	ldrb	r3, [r3, #0]
 8009b78:	7afa      	ldrb	r2, [r7, #11]
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	d20a      	bcs.n	8009b94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b82:	f383 8811 	msr	BASEPRI, r3
 8009b86:	f3bf 8f6f 	isb	sy
 8009b8a:	f3bf 8f4f 	dsb	sy
 8009b8e:	607b      	str	r3, [r7, #4]
}
 8009b90:	bf00      	nop
 8009b92:	e7fe      	b.n	8009b92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009b94:	4b0e      	ldr	r3, [pc, #56]	; (8009bd0 <vPortValidateInterruptPriority+0x78>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009b9c:	4b0d      	ldr	r3, [pc, #52]	; (8009bd4 <vPortValidateInterruptPriority+0x7c>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	429a      	cmp	r2, r3
 8009ba2:	d90a      	bls.n	8009bba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba8:	f383 8811 	msr	BASEPRI, r3
 8009bac:	f3bf 8f6f 	isb	sy
 8009bb0:	f3bf 8f4f 	dsb	sy
 8009bb4:	603b      	str	r3, [r7, #0]
}
 8009bb6:	bf00      	nop
 8009bb8:	e7fe      	b.n	8009bb8 <vPortValidateInterruptPriority+0x60>
	}
 8009bba:	bf00      	nop
 8009bbc:	3714      	adds	r7, #20
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc4:	4770      	bx	lr
 8009bc6:	bf00      	nop
 8009bc8:	e000e3f0 	.word	0xe000e3f0
 8009bcc:	200017e0 	.word	0x200017e0
 8009bd0:	e000ed0c 	.word	0xe000ed0c
 8009bd4:	200017e4 	.word	0x200017e4

08009bd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b08a      	sub	sp, #40	; 0x28
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009be0:	2300      	movs	r3, #0
 8009be2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009be4:	f7fe fcbc 	bl	8008560 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009be8:	4b5b      	ldr	r3, [pc, #364]	; (8009d58 <pvPortMalloc+0x180>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d101      	bne.n	8009bf4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009bf0:	f000 f920 	bl	8009e34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009bf4:	4b59      	ldr	r3, [pc, #356]	; (8009d5c <pvPortMalloc+0x184>)
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	4013      	ands	r3, r2
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	f040 8093 	bne.w	8009d28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d01d      	beq.n	8009c44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009c08:	2208      	movs	r2, #8
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	4413      	add	r3, r2
 8009c0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f003 0307 	and.w	r3, r3, #7
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d014      	beq.n	8009c44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f023 0307 	bic.w	r3, r3, #7
 8009c20:	3308      	adds	r3, #8
 8009c22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f003 0307 	and.w	r3, r3, #7
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d00a      	beq.n	8009c44 <pvPortMalloc+0x6c>
	__asm volatile
 8009c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c32:	f383 8811 	msr	BASEPRI, r3
 8009c36:	f3bf 8f6f 	isb	sy
 8009c3a:	f3bf 8f4f 	dsb	sy
 8009c3e:	617b      	str	r3, [r7, #20]
}
 8009c40:	bf00      	nop
 8009c42:	e7fe      	b.n	8009c42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d06e      	beq.n	8009d28 <pvPortMalloc+0x150>
 8009c4a:	4b45      	ldr	r3, [pc, #276]	; (8009d60 <pvPortMalloc+0x188>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	687a      	ldr	r2, [r7, #4]
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d869      	bhi.n	8009d28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009c54:	4b43      	ldr	r3, [pc, #268]	; (8009d64 <pvPortMalloc+0x18c>)
 8009c56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009c58:	4b42      	ldr	r3, [pc, #264]	; (8009d64 <pvPortMalloc+0x18c>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c5e:	e004      	b.n	8009c6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c6c:	685b      	ldr	r3, [r3, #4]
 8009c6e:	687a      	ldr	r2, [r7, #4]
 8009c70:	429a      	cmp	r2, r3
 8009c72:	d903      	bls.n	8009c7c <pvPortMalloc+0xa4>
 8009c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d1f1      	bne.n	8009c60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009c7c:	4b36      	ldr	r3, [pc, #216]	; (8009d58 <pvPortMalloc+0x180>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c82:	429a      	cmp	r2, r3
 8009c84:	d050      	beq.n	8009d28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009c86:	6a3b      	ldr	r3, [r7, #32]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	2208      	movs	r2, #8
 8009c8c:	4413      	add	r3, r2
 8009c8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c92:	681a      	ldr	r2, [r3, #0]
 8009c94:	6a3b      	ldr	r3, [r7, #32]
 8009c96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9a:	685a      	ldr	r2, [r3, #4]
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	1ad2      	subs	r2, r2, r3
 8009ca0:	2308      	movs	r3, #8
 8009ca2:	005b      	lsls	r3, r3, #1
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	d91f      	bls.n	8009ce8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	4413      	add	r3, r2
 8009cae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009cb0:	69bb      	ldr	r3, [r7, #24]
 8009cb2:	f003 0307 	and.w	r3, r3, #7
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d00a      	beq.n	8009cd0 <pvPortMalloc+0xf8>
	__asm volatile
 8009cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cbe:	f383 8811 	msr	BASEPRI, r3
 8009cc2:	f3bf 8f6f 	isb	sy
 8009cc6:	f3bf 8f4f 	dsb	sy
 8009cca:	613b      	str	r3, [r7, #16]
}
 8009ccc:	bf00      	nop
 8009cce:	e7fe      	b.n	8009cce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd2:	685a      	ldr	r2, [r3, #4]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	1ad2      	subs	r2, r2, r3
 8009cd8:	69bb      	ldr	r3, [r7, #24]
 8009cda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cde:	687a      	ldr	r2, [r7, #4]
 8009ce0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009ce2:	69b8      	ldr	r0, [r7, #24]
 8009ce4:	f000 f908 	bl	8009ef8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009ce8:	4b1d      	ldr	r3, [pc, #116]	; (8009d60 <pvPortMalloc+0x188>)
 8009cea:	681a      	ldr	r2, [r3, #0]
 8009cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	1ad3      	subs	r3, r2, r3
 8009cf2:	4a1b      	ldr	r2, [pc, #108]	; (8009d60 <pvPortMalloc+0x188>)
 8009cf4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009cf6:	4b1a      	ldr	r3, [pc, #104]	; (8009d60 <pvPortMalloc+0x188>)
 8009cf8:	681a      	ldr	r2, [r3, #0]
 8009cfa:	4b1b      	ldr	r3, [pc, #108]	; (8009d68 <pvPortMalloc+0x190>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	d203      	bcs.n	8009d0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009d02:	4b17      	ldr	r3, [pc, #92]	; (8009d60 <pvPortMalloc+0x188>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4a18      	ldr	r2, [pc, #96]	; (8009d68 <pvPortMalloc+0x190>)
 8009d08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0c:	685a      	ldr	r2, [r3, #4]
 8009d0e:	4b13      	ldr	r3, [pc, #76]	; (8009d5c <pvPortMalloc+0x184>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	431a      	orrs	r2, r3
 8009d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009d1e:	4b13      	ldr	r3, [pc, #76]	; (8009d6c <pvPortMalloc+0x194>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	3301      	adds	r3, #1
 8009d24:	4a11      	ldr	r2, [pc, #68]	; (8009d6c <pvPortMalloc+0x194>)
 8009d26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009d28:	f7fe fc28 	bl	800857c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d2c:	69fb      	ldr	r3, [r7, #28]
 8009d2e:	f003 0307 	and.w	r3, r3, #7
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d00a      	beq.n	8009d4c <pvPortMalloc+0x174>
	__asm volatile
 8009d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d3a:	f383 8811 	msr	BASEPRI, r3
 8009d3e:	f3bf 8f6f 	isb	sy
 8009d42:	f3bf 8f4f 	dsb	sy
 8009d46:	60fb      	str	r3, [r7, #12]
}
 8009d48:	bf00      	nop
 8009d4a:	e7fe      	b.n	8009d4a <pvPortMalloc+0x172>
	return pvReturn;
 8009d4c:	69fb      	ldr	r3, [r7, #28]
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3728      	adds	r7, #40	; 0x28
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
 8009d56:	bf00      	nop
 8009d58:	200053f0 	.word	0x200053f0
 8009d5c:	20005404 	.word	0x20005404
 8009d60:	200053f4 	.word	0x200053f4
 8009d64:	200053e8 	.word	0x200053e8
 8009d68:	200053f8 	.word	0x200053f8
 8009d6c:	200053fc 	.word	0x200053fc

08009d70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b086      	sub	sp, #24
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d04d      	beq.n	8009e1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009d82:	2308      	movs	r3, #8
 8009d84:	425b      	negs	r3, r3
 8009d86:	697a      	ldr	r2, [r7, #20]
 8009d88:	4413      	add	r3, r2
 8009d8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	685a      	ldr	r2, [r3, #4]
 8009d94:	4b24      	ldr	r3, [pc, #144]	; (8009e28 <vPortFree+0xb8>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4013      	ands	r3, r2
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d10a      	bne.n	8009db4 <vPortFree+0x44>
	__asm volatile
 8009d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da2:	f383 8811 	msr	BASEPRI, r3
 8009da6:	f3bf 8f6f 	isb	sy
 8009daa:	f3bf 8f4f 	dsb	sy
 8009dae:	60fb      	str	r3, [r7, #12]
}
 8009db0:	bf00      	nop
 8009db2:	e7fe      	b.n	8009db2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009db4:	693b      	ldr	r3, [r7, #16]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d00a      	beq.n	8009dd2 <vPortFree+0x62>
	__asm volatile
 8009dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc0:	f383 8811 	msr	BASEPRI, r3
 8009dc4:	f3bf 8f6f 	isb	sy
 8009dc8:	f3bf 8f4f 	dsb	sy
 8009dcc:	60bb      	str	r3, [r7, #8]
}
 8009dce:	bf00      	nop
 8009dd0:	e7fe      	b.n	8009dd0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	685a      	ldr	r2, [r3, #4]
 8009dd6:	4b14      	ldr	r3, [pc, #80]	; (8009e28 <vPortFree+0xb8>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	4013      	ands	r3, r2
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d01e      	beq.n	8009e1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d11a      	bne.n	8009e1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	685a      	ldr	r2, [r3, #4]
 8009dec:	4b0e      	ldr	r3, [pc, #56]	; (8009e28 <vPortFree+0xb8>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	43db      	mvns	r3, r3
 8009df2:	401a      	ands	r2, r3
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009df8:	f7fe fbb2 	bl	8008560 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	685a      	ldr	r2, [r3, #4]
 8009e00:	4b0a      	ldr	r3, [pc, #40]	; (8009e2c <vPortFree+0xbc>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	4413      	add	r3, r2
 8009e06:	4a09      	ldr	r2, [pc, #36]	; (8009e2c <vPortFree+0xbc>)
 8009e08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009e0a:	6938      	ldr	r0, [r7, #16]
 8009e0c:	f000 f874 	bl	8009ef8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009e10:	4b07      	ldr	r3, [pc, #28]	; (8009e30 <vPortFree+0xc0>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	3301      	adds	r3, #1
 8009e16:	4a06      	ldr	r2, [pc, #24]	; (8009e30 <vPortFree+0xc0>)
 8009e18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009e1a:	f7fe fbaf 	bl	800857c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009e1e:	bf00      	nop
 8009e20:	3718      	adds	r7, #24
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
 8009e26:	bf00      	nop
 8009e28:	20005404 	.word	0x20005404
 8009e2c:	200053f4 	.word	0x200053f4
 8009e30:	20005400 	.word	0x20005400

08009e34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009e34:	b480      	push	{r7}
 8009e36:	b085      	sub	sp, #20
 8009e38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009e3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009e3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009e40:	4b27      	ldr	r3, [pc, #156]	; (8009ee0 <prvHeapInit+0xac>)
 8009e42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	f003 0307 	and.w	r3, r3, #7
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d00c      	beq.n	8009e68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	3307      	adds	r3, #7
 8009e52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f023 0307 	bic.w	r3, r3, #7
 8009e5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009e5c:	68ba      	ldr	r2, [r7, #8]
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	1ad3      	subs	r3, r2, r3
 8009e62:	4a1f      	ldr	r2, [pc, #124]	; (8009ee0 <prvHeapInit+0xac>)
 8009e64:	4413      	add	r3, r2
 8009e66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009e6c:	4a1d      	ldr	r2, [pc, #116]	; (8009ee4 <prvHeapInit+0xb0>)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009e72:	4b1c      	ldr	r3, [pc, #112]	; (8009ee4 <prvHeapInit+0xb0>)
 8009e74:	2200      	movs	r2, #0
 8009e76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	68ba      	ldr	r2, [r7, #8]
 8009e7c:	4413      	add	r3, r2
 8009e7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009e80:	2208      	movs	r2, #8
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	1a9b      	subs	r3, r3, r2
 8009e86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	f023 0307 	bic.w	r3, r3, #7
 8009e8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	4a15      	ldr	r2, [pc, #84]	; (8009ee8 <prvHeapInit+0xb4>)
 8009e94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009e96:	4b14      	ldr	r3, [pc, #80]	; (8009ee8 <prvHeapInit+0xb4>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009e9e:	4b12      	ldr	r3, [pc, #72]	; (8009ee8 <prvHeapInit+0xb4>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	68fa      	ldr	r2, [r7, #12]
 8009eae:	1ad2      	subs	r2, r2, r3
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009eb4:	4b0c      	ldr	r3, [pc, #48]	; (8009ee8 <prvHeapInit+0xb4>)
 8009eb6:	681a      	ldr	r2, [r3, #0]
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	685b      	ldr	r3, [r3, #4]
 8009ec0:	4a0a      	ldr	r2, [pc, #40]	; (8009eec <prvHeapInit+0xb8>)
 8009ec2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	685b      	ldr	r3, [r3, #4]
 8009ec8:	4a09      	ldr	r2, [pc, #36]	; (8009ef0 <prvHeapInit+0xbc>)
 8009eca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009ecc:	4b09      	ldr	r3, [pc, #36]	; (8009ef4 <prvHeapInit+0xc0>)
 8009ece:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009ed2:	601a      	str	r2, [r3, #0]
}
 8009ed4:	bf00      	nop
 8009ed6:	3714      	adds	r7, #20
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ede:	4770      	bx	lr
 8009ee0:	200017e8 	.word	0x200017e8
 8009ee4:	200053e8 	.word	0x200053e8
 8009ee8:	200053f0 	.word	0x200053f0
 8009eec:	200053f8 	.word	0x200053f8
 8009ef0:	200053f4 	.word	0x200053f4
 8009ef4:	20005404 	.word	0x20005404

08009ef8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b085      	sub	sp, #20
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009f00:	4b28      	ldr	r3, [pc, #160]	; (8009fa4 <prvInsertBlockIntoFreeList+0xac>)
 8009f02:	60fb      	str	r3, [r7, #12]
 8009f04:	e002      	b.n	8009f0c <prvInsertBlockIntoFreeList+0x14>
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	60fb      	str	r3, [r7, #12]
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	687a      	ldr	r2, [r7, #4]
 8009f12:	429a      	cmp	r2, r3
 8009f14:	d8f7      	bhi.n	8009f06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	68ba      	ldr	r2, [r7, #8]
 8009f20:	4413      	add	r3, r2
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d108      	bne.n	8009f3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	685a      	ldr	r2, [r3, #4]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	441a      	add	r2, r3
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	685b      	ldr	r3, [r3, #4]
 8009f42:	68ba      	ldr	r2, [r7, #8]
 8009f44:	441a      	add	r2, r3
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d118      	bne.n	8009f80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681a      	ldr	r2, [r3, #0]
 8009f52:	4b15      	ldr	r3, [pc, #84]	; (8009fa8 <prvInsertBlockIntoFreeList+0xb0>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	429a      	cmp	r2, r3
 8009f58:	d00d      	beq.n	8009f76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	685a      	ldr	r2, [r3, #4]
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	685b      	ldr	r3, [r3, #4]
 8009f64:	441a      	add	r2, r3
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	681a      	ldr	r2, [r3, #0]
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	601a      	str	r2, [r3, #0]
 8009f74:	e008      	b.n	8009f88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009f76:	4b0c      	ldr	r3, [pc, #48]	; (8009fa8 <prvInsertBlockIntoFreeList+0xb0>)
 8009f78:	681a      	ldr	r2, [r3, #0]
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	601a      	str	r2, [r3, #0]
 8009f7e:	e003      	b.n	8009f88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681a      	ldr	r2, [r3, #0]
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009f88:	68fa      	ldr	r2, [r7, #12]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	d002      	beq.n	8009f96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f96:	bf00      	nop
 8009f98:	3714      	adds	r7, #20
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa0:	4770      	bx	lr
 8009fa2:	bf00      	nop
 8009fa4:	200053e8 	.word	0x200053e8
 8009fa8:	200053f0 	.word	0x200053f0

08009fac <__errno>:
 8009fac:	4b01      	ldr	r3, [pc, #4]	; (8009fb4 <__errno+0x8>)
 8009fae:	6818      	ldr	r0, [r3, #0]
 8009fb0:	4770      	bx	lr
 8009fb2:	bf00      	nop
 8009fb4:	20000078 	.word	0x20000078

08009fb8 <__libc_init_array>:
 8009fb8:	b570      	push	{r4, r5, r6, lr}
 8009fba:	4d0d      	ldr	r5, [pc, #52]	; (8009ff0 <__libc_init_array+0x38>)
 8009fbc:	4c0d      	ldr	r4, [pc, #52]	; (8009ff4 <__libc_init_array+0x3c>)
 8009fbe:	1b64      	subs	r4, r4, r5
 8009fc0:	10a4      	asrs	r4, r4, #2
 8009fc2:	2600      	movs	r6, #0
 8009fc4:	42a6      	cmp	r6, r4
 8009fc6:	d109      	bne.n	8009fdc <__libc_init_array+0x24>
 8009fc8:	4d0b      	ldr	r5, [pc, #44]	; (8009ff8 <__libc_init_array+0x40>)
 8009fca:	4c0c      	ldr	r4, [pc, #48]	; (8009ffc <__libc_init_array+0x44>)
 8009fcc:	f000 fcf8 	bl	800a9c0 <_init>
 8009fd0:	1b64      	subs	r4, r4, r5
 8009fd2:	10a4      	asrs	r4, r4, #2
 8009fd4:	2600      	movs	r6, #0
 8009fd6:	42a6      	cmp	r6, r4
 8009fd8:	d105      	bne.n	8009fe6 <__libc_init_array+0x2e>
 8009fda:	bd70      	pop	{r4, r5, r6, pc}
 8009fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fe0:	4798      	blx	r3
 8009fe2:	3601      	adds	r6, #1
 8009fe4:	e7ee      	b.n	8009fc4 <__libc_init_array+0xc>
 8009fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fea:	4798      	blx	r3
 8009fec:	3601      	adds	r6, #1
 8009fee:	e7f2      	b.n	8009fd6 <__libc_init_array+0x1e>
 8009ff0:	0800acb8 	.word	0x0800acb8
 8009ff4:	0800acb8 	.word	0x0800acb8
 8009ff8:	0800acb8 	.word	0x0800acb8
 8009ffc:	0800acbc 	.word	0x0800acbc

0800a000 <__retarget_lock_acquire_recursive>:
 800a000:	4770      	bx	lr

0800a002 <__retarget_lock_release_recursive>:
 800a002:	4770      	bx	lr

0800a004 <memcpy>:
 800a004:	440a      	add	r2, r1
 800a006:	4291      	cmp	r1, r2
 800a008:	f100 33ff 	add.w	r3, r0, #4294967295
 800a00c:	d100      	bne.n	800a010 <memcpy+0xc>
 800a00e:	4770      	bx	lr
 800a010:	b510      	push	{r4, lr}
 800a012:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a016:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a01a:	4291      	cmp	r1, r2
 800a01c:	d1f9      	bne.n	800a012 <memcpy+0xe>
 800a01e:	bd10      	pop	{r4, pc}

0800a020 <memset>:
 800a020:	4402      	add	r2, r0
 800a022:	4603      	mov	r3, r0
 800a024:	4293      	cmp	r3, r2
 800a026:	d100      	bne.n	800a02a <memset+0xa>
 800a028:	4770      	bx	lr
 800a02a:	f803 1b01 	strb.w	r1, [r3], #1
 800a02e:	e7f9      	b.n	800a024 <memset+0x4>

0800a030 <sbrk_aligned>:
 800a030:	b570      	push	{r4, r5, r6, lr}
 800a032:	4e0e      	ldr	r6, [pc, #56]	; (800a06c <sbrk_aligned+0x3c>)
 800a034:	460c      	mov	r4, r1
 800a036:	6831      	ldr	r1, [r6, #0]
 800a038:	4605      	mov	r5, r0
 800a03a:	b911      	cbnz	r1, 800a042 <sbrk_aligned+0x12>
 800a03c:	f000 f8f6 	bl	800a22c <_sbrk_r>
 800a040:	6030      	str	r0, [r6, #0]
 800a042:	4621      	mov	r1, r4
 800a044:	4628      	mov	r0, r5
 800a046:	f000 f8f1 	bl	800a22c <_sbrk_r>
 800a04a:	1c43      	adds	r3, r0, #1
 800a04c:	d00a      	beq.n	800a064 <sbrk_aligned+0x34>
 800a04e:	1cc4      	adds	r4, r0, #3
 800a050:	f024 0403 	bic.w	r4, r4, #3
 800a054:	42a0      	cmp	r0, r4
 800a056:	d007      	beq.n	800a068 <sbrk_aligned+0x38>
 800a058:	1a21      	subs	r1, r4, r0
 800a05a:	4628      	mov	r0, r5
 800a05c:	f000 f8e6 	bl	800a22c <_sbrk_r>
 800a060:	3001      	adds	r0, #1
 800a062:	d101      	bne.n	800a068 <sbrk_aligned+0x38>
 800a064:	f04f 34ff 	mov.w	r4, #4294967295
 800a068:	4620      	mov	r0, r4
 800a06a:	bd70      	pop	{r4, r5, r6, pc}
 800a06c:	20005410 	.word	0x20005410

0800a070 <_malloc_r>:
 800a070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a074:	1ccd      	adds	r5, r1, #3
 800a076:	f025 0503 	bic.w	r5, r5, #3
 800a07a:	3508      	adds	r5, #8
 800a07c:	2d0c      	cmp	r5, #12
 800a07e:	bf38      	it	cc
 800a080:	250c      	movcc	r5, #12
 800a082:	2d00      	cmp	r5, #0
 800a084:	4607      	mov	r7, r0
 800a086:	db01      	blt.n	800a08c <_malloc_r+0x1c>
 800a088:	42a9      	cmp	r1, r5
 800a08a:	d905      	bls.n	800a098 <_malloc_r+0x28>
 800a08c:	230c      	movs	r3, #12
 800a08e:	603b      	str	r3, [r7, #0]
 800a090:	2600      	movs	r6, #0
 800a092:	4630      	mov	r0, r6
 800a094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a098:	4e2e      	ldr	r6, [pc, #184]	; (800a154 <_malloc_r+0xe4>)
 800a09a:	f000 f8f7 	bl	800a28c <__malloc_lock>
 800a09e:	6833      	ldr	r3, [r6, #0]
 800a0a0:	461c      	mov	r4, r3
 800a0a2:	bb34      	cbnz	r4, 800a0f2 <_malloc_r+0x82>
 800a0a4:	4629      	mov	r1, r5
 800a0a6:	4638      	mov	r0, r7
 800a0a8:	f7ff ffc2 	bl	800a030 <sbrk_aligned>
 800a0ac:	1c43      	adds	r3, r0, #1
 800a0ae:	4604      	mov	r4, r0
 800a0b0:	d14d      	bne.n	800a14e <_malloc_r+0xde>
 800a0b2:	6834      	ldr	r4, [r6, #0]
 800a0b4:	4626      	mov	r6, r4
 800a0b6:	2e00      	cmp	r6, #0
 800a0b8:	d140      	bne.n	800a13c <_malloc_r+0xcc>
 800a0ba:	6823      	ldr	r3, [r4, #0]
 800a0bc:	4631      	mov	r1, r6
 800a0be:	4638      	mov	r0, r7
 800a0c0:	eb04 0803 	add.w	r8, r4, r3
 800a0c4:	f000 f8b2 	bl	800a22c <_sbrk_r>
 800a0c8:	4580      	cmp	r8, r0
 800a0ca:	d13a      	bne.n	800a142 <_malloc_r+0xd2>
 800a0cc:	6821      	ldr	r1, [r4, #0]
 800a0ce:	3503      	adds	r5, #3
 800a0d0:	1a6d      	subs	r5, r5, r1
 800a0d2:	f025 0503 	bic.w	r5, r5, #3
 800a0d6:	3508      	adds	r5, #8
 800a0d8:	2d0c      	cmp	r5, #12
 800a0da:	bf38      	it	cc
 800a0dc:	250c      	movcc	r5, #12
 800a0de:	4629      	mov	r1, r5
 800a0e0:	4638      	mov	r0, r7
 800a0e2:	f7ff ffa5 	bl	800a030 <sbrk_aligned>
 800a0e6:	3001      	adds	r0, #1
 800a0e8:	d02b      	beq.n	800a142 <_malloc_r+0xd2>
 800a0ea:	6823      	ldr	r3, [r4, #0]
 800a0ec:	442b      	add	r3, r5
 800a0ee:	6023      	str	r3, [r4, #0]
 800a0f0:	e00e      	b.n	800a110 <_malloc_r+0xa0>
 800a0f2:	6822      	ldr	r2, [r4, #0]
 800a0f4:	1b52      	subs	r2, r2, r5
 800a0f6:	d41e      	bmi.n	800a136 <_malloc_r+0xc6>
 800a0f8:	2a0b      	cmp	r2, #11
 800a0fa:	d916      	bls.n	800a12a <_malloc_r+0xba>
 800a0fc:	1961      	adds	r1, r4, r5
 800a0fe:	42a3      	cmp	r3, r4
 800a100:	6025      	str	r5, [r4, #0]
 800a102:	bf18      	it	ne
 800a104:	6059      	strne	r1, [r3, #4]
 800a106:	6863      	ldr	r3, [r4, #4]
 800a108:	bf08      	it	eq
 800a10a:	6031      	streq	r1, [r6, #0]
 800a10c:	5162      	str	r2, [r4, r5]
 800a10e:	604b      	str	r3, [r1, #4]
 800a110:	4638      	mov	r0, r7
 800a112:	f104 060b 	add.w	r6, r4, #11
 800a116:	f000 f8bf 	bl	800a298 <__malloc_unlock>
 800a11a:	f026 0607 	bic.w	r6, r6, #7
 800a11e:	1d23      	adds	r3, r4, #4
 800a120:	1af2      	subs	r2, r6, r3
 800a122:	d0b6      	beq.n	800a092 <_malloc_r+0x22>
 800a124:	1b9b      	subs	r3, r3, r6
 800a126:	50a3      	str	r3, [r4, r2]
 800a128:	e7b3      	b.n	800a092 <_malloc_r+0x22>
 800a12a:	6862      	ldr	r2, [r4, #4]
 800a12c:	42a3      	cmp	r3, r4
 800a12e:	bf0c      	ite	eq
 800a130:	6032      	streq	r2, [r6, #0]
 800a132:	605a      	strne	r2, [r3, #4]
 800a134:	e7ec      	b.n	800a110 <_malloc_r+0xa0>
 800a136:	4623      	mov	r3, r4
 800a138:	6864      	ldr	r4, [r4, #4]
 800a13a:	e7b2      	b.n	800a0a2 <_malloc_r+0x32>
 800a13c:	4634      	mov	r4, r6
 800a13e:	6876      	ldr	r6, [r6, #4]
 800a140:	e7b9      	b.n	800a0b6 <_malloc_r+0x46>
 800a142:	230c      	movs	r3, #12
 800a144:	603b      	str	r3, [r7, #0]
 800a146:	4638      	mov	r0, r7
 800a148:	f000 f8a6 	bl	800a298 <__malloc_unlock>
 800a14c:	e7a1      	b.n	800a092 <_malloc_r+0x22>
 800a14e:	6025      	str	r5, [r4, #0]
 800a150:	e7de      	b.n	800a110 <_malloc_r+0xa0>
 800a152:	bf00      	nop
 800a154:	2000540c 	.word	0x2000540c

0800a158 <cleanup_glue>:
 800a158:	b538      	push	{r3, r4, r5, lr}
 800a15a:	460c      	mov	r4, r1
 800a15c:	6809      	ldr	r1, [r1, #0]
 800a15e:	4605      	mov	r5, r0
 800a160:	b109      	cbz	r1, 800a166 <cleanup_glue+0xe>
 800a162:	f7ff fff9 	bl	800a158 <cleanup_glue>
 800a166:	4621      	mov	r1, r4
 800a168:	4628      	mov	r0, r5
 800a16a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a16e:	f000 b899 	b.w	800a2a4 <_free_r>
	...

0800a174 <_reclaim_reent>:
 800a174:	4b2c      	ldr	r3, [pc, #176]	; (800a228 <_reclaim_reent+0xb4>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	4283      	cmp	r3, r0
 800a17a:	b570      	push	{r4, r5, r6, lr}
 800a17c:	4604      	mov	r4, r0
 800a17e:	d051      	beq.n	800a224 <_reclaim_reent+0xb0>
 800a180:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a182:	b143      	cbz	r3, 800a196 <_reclaim_reent+0x22>
 800a184:	68db      	ldr	r3, [r3, #12]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d14a      	bne.n	800a220 <_reclaim_reent+0xac>
 800a18a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a18c:	6819      	ldr	r1, [r3, #0]
 800a18e:	b111      	cbz	r1, 800a196 <_reclaim_reent+0x22>
 800a190:	4620      	mov	r0, r4
 800a192:	f000 f887 	bl	800a2a4 <_free_r>
 800a196:	6961      	ldr	r1, [r4, #20]
 800a198:	b111      	cbz	r1, 800a1a0 <_reclaim_reent+0x2c>
 800a19a:	4620      	mov	r0, r4
 800a19c:	f000 f882 	bl	800a2a4 <_free_r>
 800a1a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a1a2:	b111      	cbz	r1, 800a1aa <_reclaim_reent+0x36>
 800a1a4:	4620      	mov	r0, r4
 800a1a6:	f000 f87d 	bl	800a2a4 <_free_r>
 800a1aa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a1ac:	b111      	cbz	r1, 800a1b4 <_reclaim_reent+0x40>
 800a1ae:	4620      	mov	r0, r4
 800a1b0:	f000 f878 	bl	800a2a4 <_free_r>
 800a1b4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a1b6:	b111      	cbz	r1, 800a1be <_reclaim_reent+0x4a>
 800a1b8:	4620      	mov	r0, r4
 800a1ba:	f000 f873 	bl	800a2a4 <_free_r>
 800a1be:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a1c0:	b111      	cbz	r1, 800a1c8 <_reclaim_reent+0x54>
 800a1c2:	4620      	mov	r0, r4
 800a1c4:	f000 f86e 	bl	800a2a4 <_free_r>
 800a1c8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a1ca:	b111      	cbz	r1, 800a1d2 <_reclaim_reent+0x5e>
 800a1cc:	4620      	mov	r0, r4
 800a1ce:	f000 f869 	bl	800a2a4 <_free_r>
 800a1d2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a1d4:	b111      	cbz	r1, 800a1dc <_reclaim_reent+0x68>
 800a1d6:	4620      	mov	r0, r4
 800a1d8:	f000 f864 	bl	800a2a4 <_free_r>
 800a1dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a1de:	b111      	cbz	r1, 800a1e6 <_reclaim_reent+0x72>
 800a1e0:	4620      	mov	r0, r4
 800a1e2:	f000 f85f 	bl	800a2a4 <_free_r>
 800a1e6:	69a3      	ldr	r3, [r4, #24]
 800a1e8:	b1e3      	cbz	r3, 800a224 <_reclaim_reent+0xb0>
 800a1ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	4798      	blx	r3
 800a1f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a1f2:	b1b9      	cbz	r1, 800a224 <_reclaim_reent+0xb0>
 800a1f4:	4620      	mov	r0, r4
 800a1f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a1fa:	f7ff bfad 	b.w	800a158 <cleanup_glue>
 800a1fe:	5949      	ldr	r1, [r1, r5]
 800a200:	b941      	cbnz	r1, 800a214 <_reclaim_reent+0xa0>
 800a202:	3504      	adds	r5, #4
 800a204:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a206:	2d80      	cmp	r5, #128	; 0x80
 800a208:	68d9      	ldr	r1, [r3, #12]
 800a20a:	d1f8      	bne.n	800a1fe <_reclaim_reent+0x8a>
 800a20c:	4620      	mov	r0, r4
 800a20e:	f000 f849 	bl	800a2a4 <_free_r>
 800a212:	e7ba      	b.n	800a18a <_reclaim_reent+0x16>
 800a214:	680e      	ldr	r6, [r1, #0]
 800a216:	4620      	mov	r0, r4
 800a218:	f000 f844 	bl	800a2a4 <_free_r>
 800a21c:	4631      	mov	r1, r6
 800a21e:	e7ef      	b.n	800a200 <_reclaim_reent+0x8c>
 800a220:	2500      	movs	r5, #0
 800a222:	e7ef      	b.n	800a204 <_reclaim_reent+0x90>
 800a224:	bd70      	pop	{r4, r5, r6, pc}
 800a226:	bf00      	nop
 800a228:	20000078 	.word	0x20000078

0800a22c <_sbrk_r>:
 800a22c:	b538      	push	{r3, r4, r5, lr}
 800a22e:	4d06      	ldr	r5, [pc, #24]	; (800a248 <_sbrk_r+0x1c>)
 800a230:	2300      	movs	r3, #0
 800a232:	4604      	mov	r4, r0
 800a234:	4608      	mov	r0, r1
 800a236:	602b      	str	r3, [r5, #0]
 800a238:	f7f7 ffc8 	bl	80021cc <_sbrk>
 800a23c:	1c43      	adds	r3, r0, #1
 800a23e:	d102      	bne.n	800a246 <_sbrk_r+0x1a>
 800a240:	682b      	ldr	r3, [r5, #0]
 800a242:	b103      	cbz	r3, 800a246 <_sbrk_r+0x1a>
 800a244:	6023      	str	r3, [r4, #0]
 800a246:	bd38      	pop	{r3, r4, r5, pc}
 800a248:	20005414 	.word	0x20005414

0800a24c <siprintf>:
 800a24c:	b40e      	push	{r1, r2, r3}
 800a24e:	b500      	push	{lr}
 800a250:	b09c      	sub	sp, #112	; 0x70
 800a252:	ab1d      	add	r3, sp, #116	; 0x74
 800a254:	9002      	str	r0, [sp, #8]
 800a256:	9006      	str	r0, [sp, #24]
 800a258:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a25c:	4809      	ldr	r0, [pc, #36]	; (800a284 <siprintf+0x38>)
 800a25e:	9107      	str	r1, [sp, #28]
 800a260:	9104      	str	r1, [sp, #16]
 800a262:	4909      	ldr	r1, [pc, #36]	; (800a288 <siprintf+0x3c>)
 800a264:	f853 2b04 	ldr.w	r2, [r3], #4
 800a268:	9105      	str	r1, [sp, #20]
 800a26a:	6800      	ldr	r0, [r0, #0]
 800a26c:	9301      	str	r3, [sp, #4]
 800a26e:	a902      	add	r1, sp, #8
 800a270:	f000 f8c0 	bl	800a3f4 <_svfiprintf_r>
 800a274:	9b02      	ldr	r3, [sp, #8]
 800a276:	2200      	movs	r2, #0
 800a278:	701a      	strb	r2, [r3, #0]
 800a27a:	b01c      	add	sp, #112	; 0x70
 800a27c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a280:	b003      	add	sp, #12
 800a282:	4770      	bx	lr
 800a284:	20000078 	.word	0x20000078
 800a288:	ffff0208 	.word	0xffff0208

0800a28c <__malloc_lock>:
 800a28c:	4801      	ldr	r0, [pc, #4]	; (800a294 <__malloc_lock+0x8>)
 800a28e:	f7ff beb7 	b.w	800a000 <__retarget_lock_acquire_recursive>
 800a292:	bf00      	nop
 800a294:	20005408 	.word	0x20005408

0800a298 <__malloc_unlock>:
 800a298:	4801      	ldr	r0, [pc, #4]	; (800a2a0 <__malloc_unlock+0x8>)
 800a29a:	f7ff beb2 	b.w	800a002 <__retarget_lock_release_recursive>
 800a29e:	bf00      	nop
 800a2a0:	20005408 	.word	0x20005408

0800a2a4 <_free_r>:
 800a2a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a2a6:	2900      	cmp	r1, #0
 800a2a8:	d044      	beq.n	800a334 <_free_r+0x90>
 800a2aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2ae:	9001      	str	r0, [sp, #4]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	f1a1 0404 	sub.w	r4, r1, #4
 800a2b6:	bfb8      	it	lt
 800a2b8:	18e4      	addlt	r4, r4, r3
 800a2ba:	f7ff ffe7 	bl	800a28c <__malloc_lock>
 800a2be:	4a1e      	ldr	r2, [pc, #120]	; (800a338 <_free_r+0x94>)
 800a2c0:	9801      	ldr	r0, [sp, #4]
 800a2c2:	6813      	ldr	r3, [r2, #0]
 800a2c4:	b933      	cbnz	r3, 800a2d4 <_free_r+0x30>
 800a2c6:	6063      	str	r3, [r4, #4]
 800a2c8:	6014      	str	r4, [r2, #0]
 800a2ca:	b003      	add	sp, #12
 800a2cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a2d0:	f7ff bfe2 	b.w	800a298 <__malloc_unlock>
 800a2d4:	42a3      	cmp	r3, r4
 800a2d6:	d908      	bls.n	800a2ea <_free_r+0x46>
 800a2d8:	6825      	ldr	r5, [r4, #0]
 800a2da:	1961      	adds	r1, r4, r5
 800a2dc:	428b      	cmp	r3, r1
 800a2de:	bf01      	itttt	eq
 800a2e0:	6819      	ldreq	r1, [r3, #0]
 800a2e2:	685b      	ldreq	r3, [r3, #4]
 800a2e4:	1949      	addeq	r1, r1, r5
 800a2e6:	6021      	streq	r1, [r4, #0]
 800a2e8:	e7ed      	b.n	800a2c6 <_free_r+0x22>
 800a2ea:	461a      	mov	r2, r3
 800a2ec:	685b      	ldr	r3, [r3, #4]
 800a2ee:	b10b      	cbz	r3, 800a2f4 <_free_r+0x50>
 800a2f0:	42a3      	cmp	r3, r4
 800a2f2:	d9fa      	bls.n	800a2ea <_free_r+0x46>
 800a2f4:	6811      	ldr	r1, [r2, #0]
 800a2f6:	1855      	adds	r5, r2, r1
 800a2f8:	42a5      	cmp	r5, r4
 800a2fa:	d10b      	bne.n	800a314 <_free_r+0x70>
 800a2fc:	6824      	ldr	r4, [r4, #0]
 800a2fe:	4421      	add	r1, r4
 800a300:	1854      	adds	r4, r2, r1
 800a302:	42a3      	cmp	r3, r4
 800a304:	6011      	str	r1, [r2, #0]
 800a306:	d1e0      	bne.n	800a2ca <_free_r+0x26>
 800a308:	681c      	ldr	r4, [r3, #0]
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	6053      	str	r3, [r2, #4]
 800a30e:	4421      	add	r1, r4
 800a310:	6011      	str	r1, [r2, #0]
 800a312:	e7da      	b.n	800a2ca <_free_r+0x26>
 800a314:	d902      	bls.n	800a31c <_free_r+0x78>
 800a316:	230c      	movs	r3, #12
 800a318:	6003      	str	r3, [r0, #0]
 800a31a:	e7d6      	b.n	800a2ca <_free_r+0x26>
 800a31c:	6825      	ldr	r5, [r4, #0]
 800a31e:	1961      	adds	r1, r4, r5
 800a320:	428b      	cmp	r3, r1
 800a322:	bf04      	itt	eq
 800a324:	6819      	ldreq	r1, [r3, #0]
 800a326:	685b      	ldreq	r3, [r3, #4]
 800a328:	6063      	str	r3, [r4, #4]
 800a32a:	bf04      	itt	eq
 800a32c:	1949      	addeq	r1, r1, r5
 800a32e:	6021      	streq	r1, [r4, #0]
 800a330:	6054      	str	r4, [r2, #4]
 800a332:	e7ca      	b.n	800a2ca <_free_r+0x26>
 800a334:	b003      	add	sp, #12
 800a336:	bd30      	pop	{r4, r5, pc}
 800a338:	2000540c 	.word	0x2000540c

0800a33c <__ssputs_r>:
 800a33c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a340:	688e      	ldr	r6, [r1, #8]
 800a342:	429e      	cmp	r6, r3
 800a344:	4682      	mov	sl, r0
 800a346:	460c      	mov	r4, r1
 800a348:	4690      	mov	r8, r2
 800a34a:	461f      	mov	r7, r3
 800a34c:	d838      	bhi.n	800a3c0 <__ssputs_r+0x84>
 800a34e:	898a      	ldrh	r2, [r1, #12]
 800a350:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a354:	d032      	beq.n	800a3bc <__ssputs_r+0x80>
 800a356:	6825      	ldr	r5, [r4, #0]
 800a358:	6909      	ldr	r1, [r1, #16]
 800a35a:	eba5 0901 	sub.w	r9, r5, r1
 800a35e:	6965      	ldr	r5, [r4, #20]
 800a360:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a364:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a368:	3301      	adds	r3, #1
 800a36a:	444b      	add	r3, r9
 800a36c:	106d      	asrs	r5, r5, #1
 800a36e:	429d      	cmp	r5, r3
 800a370:	bf38      	it	cc
 800a372:	461d      	movcc	r5, r3
 800a374:	0553      	lsls	r3, r2, #21
 800a376:	d531      	bpl.n	800a3dc <__ssputs_r+0xa0>
 800a378:	4629      	mov	r1, r5
 800a37a:	f7ff fe79 	bl	800a070 <_malloc_r>
 800a37e:	4606      	mov	r6, r0
 800a380:	b950      	cbnz	r0, 800a398 <__ssputs_r+0x5c>
 800a382:	230c      	movs	r3, #12
 800a384:	f8ca 3000 	str.w	r3, [sl]
 800a388:	89a3      	ldrh	r3, [r4, #12]
 800a38a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a38e:	81a3      	strh	r3, [r4, #12]
 800a390:	f04f 30ff 	mov.w	r0, #4294967295
 800a394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a398:	6921      	ldr	r1, [r4, #16]
 800a39a:	464a      	mov	r2, r9
 800a39c:	f7ff fe32 	bl	800a004 <memcpy>
 800a3a0:	89a3      	ldrh	r3, [r4, #12]
 800a3a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a3a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3aa:	81a3      	strh	r3, [r4, #12]
 800a3ac:	6126      	str	r6, [r4, #16]
 800a3ae:	6165      	str	r5, [r4, #20]
 800a3b0:	444e      	add	r6, r9
 800a3b2:	eba5 0509 	sub.w	r5, r5, r9
 800a3b6:	6026      	str	r6, [r4, #0]
 800a3b8:	60a5      	str	r5, [r4, #8]
 800a3ba:	463e      	mov	r6, r7
 800a3bc:	42be      	cmp	r6, r7
 800a3be:	d900      	bls.n	800a3c2 <__ssputs_r+0x86>
 800a3c0:	463e      	mov	r6, r7
 800a3c2:	6820      	ldr	r0, [r4, #0]
 800a3c4:	4632      	mov	r2, r6
 800a3c6:	4641      	mov	r1, r8
 800a3c8:	f000 faa8 	bl	800a91c <memmove>
 800a3cc:	68a3      	ldr	r3, [r4, #8]
 800a3ce:	1b9b      	subs	r3, r3, r6
 800a3d0:	60a3      	str	r3, [r4, #8]
 800a3d2:	6823      	ldr	r3, [r4, #0]
 800a3d4:	4433      	add	r3, r6
 800a3d6:	6023      	str	r3, [r4, #0]
 800a3d8:	2000      	movs	r0, #0
 800a3da:	e7db      	b.n	800a394 <__ssputs_r+0x58>
 800a3dc:	462a      	mov	r2, r5
 800a3de:	f000 fab7 	bl	800a950 <_realloc_r>
 800a3e2:	4606      	mov	r6, r0
 800a3e4:	2800      	cmp	r0, #0
 800a3e6:	d1e1      	bne.n	800a3ac <__ssputs_r+0x70>
 800a3e8:	6921      	ldr	r1, [r4, #16]
 800a3ea:	4650      	mov	r0, sl
 800a3ec:	f7ff ff5a 	bl	800a2a4 <_free_r>
 800a3f0:	e7c7      	b.n	800a382 <__ssputs_r+0x46>
	...

0800a3f4 <_svfiprintf_r>:
 800a3f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3f8:	4698      	mov	r8, r3
 800a3fa:	898b      	ldrh	r3, [r1, #12]
 800a3fc:	061b      	lsls	r3, r3, #24
 800a3fe:	b09d      	sub	sp, #116	; 0x74
 800a400:	4607      	mov	r7, r0
 800a402:	460d      	mov	r5, r1
 800a404:	4614      	mov	r4, r2
 800a406:	d50e      	bpl.n	800a426 <_svfiprintf_r+0x32>
 800a408:	690b      	ldr	r3, [r1, #16]
 800a40a:	b963      	cbnz	r3, 800a426 <_svfiprintf_r+0x32>
 800a40c:	2140      	movs	r1, #64	; 0x40
 800a40e:	f7ff fe2f 	bl	800a070 <_malloc_r>
 800a412:	6028      	str	r0, [r5, #0]
 800a414:	6128      	str	r0, [r5, #16]
 800a416:	b920      	cbnz	r0, 800a422 <_svfiprintf_r+0x2e>
 800a418:	230c      	movs	r3, #12
 800a41a:	603b      	str	r3, [r7, #0]
 800a41c:	f04f 30ff 	mov.w	r0, #4294967295
 800a420:	e0d1      	b.n	800a5c6 <_svfiprintf_r+0x1d2>
 800a422:	2340      	movs	r3, #64	; 0x40
 800a424:	616b      	str	r3, [r5, #20]
 800a426:	2300      	movs	r3, #0
 800a428:	9309      	str	r3, [sp, #36]	; 0x24
 800a42a:	2320      	movs	r3, #32
 800a42c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a430:	f8cd 800c 	str.w	r8, [sp, #12]
 800a434:	2330      	movs	r3, #48	; 0x30
 800a436:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a5e0 <_svfiprintf_r+0x1ec>
 800a43a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a43e:	f04f 0901 	mov.w	r9, #1
 800a442:	4623      	mov	r3, r4
 800a444:	469a      	mov	sl, r3
 800a446:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a44a:	b10a      	cbz	r2, 800a450 <_svfiprintf_r+0x5c>
 800a44c:	2a25      	cmp	r2, #37	; 0x25
 800a44e:	d1f9      	bne.n	800a444 <_svfiprintf_r+0x50>
 800a450:	ebba 0b04 	subs.w	fp, sl, r4
 800a454:	d00b      	beq.n	800a46e <_svfiprintf_r+0x7a>
 800a456:	465b      	mov	r3, fp
 800a458:	4622      	mov	r2, r4
 800a45a:	4629      	mov	r1, r5
 800a45c:	4638      	mov	r0, r7
 800a45e:	f7ff ff6d 	bl	800a33c <__ssputs_r>
 800a462:	3001      	adds	r0, #1
 800a464:	f000 80aa 	beq.w	800a5bc <_svfiprintf_r+0x1c8>
 800a468:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a46a:	445a      	add	r2, fp
 800a46c:	9209      	str	r2, [sp, #36]	; 0x24
 800a46e:	f89a 3000 	ldrb.w	r3, [sl]
 800a472:	2b00      	cmp	r3, #0
 800a474:	f000 80a2 	beq.w	800a5bc <_svfiprintf_r+0x1c8>
 800a478:	2300      	movs	r3, #0
 800a47a:	f04f 32ff 	mov.w	r2, #4294967295
 800a47e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a482:	f10a 0a01 	add.w	sl, sl, #1
 800a486:	9304      	str	r3, [sp, #16]
 800a488:	9307      	str	r3, [sp, #28]
 800a48a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a48e:	931a      	str	r3, [sp, #104]	; 0x68
 800a490:	4654      	mov	r4, sl
 800a492:	2205      	movs	r2, #5
 800a494:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a498:	4851      	ldr	r0, [pc, #324]	; (800a5e0 <_svfiprintf_r+0x1ec>)
 800a49a:	f7f5 fea9 	bl	80001f0 <memchr>
 800a49e:	9a04      	ldr	r2, [sp, #16]
 800a4a0:	b9d8      	cbnz	r0, 800a4da <_svfiprintf_r+0xe6>
 800a4a2:	06d0      	lsls	r0, r2, #27
 800a4a4:	bf44      	itt	mi
 800a4a6:	2320      	movmi	r3, #32
 800a4a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4ac:	0711      	lsls	r1, r2, #28
 800a4ae:	bf44      	itt	mi
 800a4b0:	232b      	movmi	r3, #43	; 0x2b
 800a4b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4b6:	f89a 3000 	ldrb.w	r3, [sl]
 800a4ba:	2b2a      	cmp	r3, #42	; 0x2a
 800a4bc:	d015      	beq.n	800a4ea <_svfiprintf_r+0xf6>
 800a4be:	9a07      	ldr	r2, [sp, #28]
 800a4c0:	4654      	mov	r4, sl
 800a4c2:	2000      	movs	r0, #0
 800a4c4:	f04f 0c0a 	mov.w	ip, #10
 800a4c8:	4621      	mov	r1, r4
 800a4ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4ce:	3b30      	subs	r3, #48	; 0x30
 800a4d0:	2b09      	cmp	r3, #9
 800a4d2:	d94e      	bls.n	800a572 <_svfiprintf_r+0x17e>
 800a4d4:	b1b0      	cbz	r0, 800a504 <_svfiprintf_r+0x110>
 800a4d6:	9207      	str	r2, [sp, #28]
 800a4d8:	e014      	b.n	800a504 <_svfiprintf_r+0x110>
 800a4da:	eba0 0308 	sub.w	r3, r0, r8
 800a4de:	fa09 f303 	lsl.w	r3, r9, r3
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	9304      	str	r3, [sp, #16]
 800a4e6:	46a2      	mov	sl, r4
 800a4e8:	e7d2      	b.n	800a490 <_svfiprintf_r+0x9c>
 800a4ea:	9b03      	ldr	r3, [sp, #12]
 800a4ec:	1d19      	adds	r1, r3, #4
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	9103      	str	r1, [sp, #12]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	bfbb      	ittet	lt
 800a4f6:	425b      	neglt	r3, r3
 800a4f8:	f042 0202 	orrlt.w	r2, r2, #2
 800a4fc:	9307      	strge	r3, [sp, #28]
 800a4fe:	9307      	strlt	r3, [sp, #28]
 800a500:	bfb8      	it	lt
 800a502:	9204      	strlt	r2, [sp, #16]
 800a504:	7823      	ldrb	r3, [r4, #0]
 800a506:	2b2e      	cmp	r3, #46	; 0x2e
 800a508:	d10c      	bne.n	800a524 <_svfiprintf_r+0x130>
 800a50a:	7863      	ldrb	r3, [r4, #1]
 800a50c:	2b2a      	cmp	r3, #42	; 0x2a
 800a50e:	d135      	bne.n	800a57c <_svfiprintf_r+0x188>
 800a510:	9b03      	ldr	r3, [sp, #12]
 800a512:	1d1a      	adds	r2, r3, #4
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	9203      	str	r2, [sp, #12]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	bfb8      	it	lt
 800a51c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a520:	3402      	adds	r4, #2
 800a522:	9305      	str	r3, [sp, #20]
 800a524:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a5f0 <_svfiprintf_r+0x1fc>
 800a528:	7821      	ldrb	r1, [r4, #0]
 800a52a:	2203      	movs	r2, #3
 800a52c:	4650      	mov	r0, sl
 800a52e:	f7f5 fe5f 	bl	80001f0 <memchr>
 800a532:	b140      	cbz	r0, 800a546 <_svfiprintf_r+0x152>
 800a534:	2340      	movs	r3, #64	; 0x40
 800a536:	eba0 000a 	sub.w	r0, r0, sl
 800a53a:	fa03 f000 	lsl.w	r0, r3, r0
 800a53e:	9b04      	ldr	r3, [sp, #16]
 800a540:	4303      	orrs	r3, r0
 800a542:	3401      	adds	r4, #1
 800a544:	9304      	str	r3, [sp, #16]
 800a546:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a54a:	4826      	ldr	r0, [pc, #152]	; (800a5e4 <_svfiprintf_r+0x1f0>)
 800a54c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a550:	2206      	movs	r2, #6
 800a552:	f7f5 fe4d 	bl	80001f0 <memchr>
 800a556:	2800      	cmp	r0, #0
 800a558:	d038      	beq.n	800a5cc <_svfiprintf_r+0x1d8>
 800a55a:	4b23      	ldr	r3, [pc, #140]	; (800a5e8 <_svfiprintf_r+0x1f4>)
 800a55c:	bb1b      	cbnz	r3, 800a5a6 <_svfiprintf_r+0x1b2>
 800a55e:	9b03      	ldr	r3, [sp, #12]
 800a560:	3307      	adds	r3, #7
 800a562:	f023 0307 	bic.w	r3, r3, #7
 800a566:	3308      	adds	r3, #8
 800a568:	9303      	str	r3, [sp, #12]
 800a56a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a56c:	4433      	add	r3, r6
 800a56e:	9309      	str	r3, [sp, #36]	; 0x24
 800a570:	e767      	b.n	800a442 <_svfiprintf_r+0x4e>
 800a572:	fb0c 3202 	mla	r2, ip, r2, r3
 800a576:	460c      	mov	r4, r1
 800a578:	2001      	movs	r0, #1
 800a57a:	e7a5      	b.n	800a4c8 <_svfiprintf_r+0xd4>
 800a57c:	2300      	movs	r3, #0
 800a57e:	3401      	adds	r4, #1
 800a580:	9305      	str	r3, [sp, #20]
 800a582:	4619      	mov	r1, r3
 800a584:	f04f 0c0a 	mov.w	ip, #10
 800a588:	4620      	mov	r0, r4
 800a58a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a58e:	3a30      	subs	r2, #48	; 0x30
 800a590:	2a09      	cmp	r2, #9
 800a592:	d903      	bls.n	800a59c <_svfiprintf_r+0x1a8>
 800a594:	2b00      	cmp	r3, #0
 800a596:	d0c5      	beq.n	800a524 <_svfiprintf_r+0x130>
 800a598:	9105      	str	r1, [sp, #20]
 800a59a:	e7c3      	b.n	800a524 <_svfiprintf_r+0x130>
 800a59c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5a0:	4604      	mov	r4, r0
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	e7f0      	b.n	800a588 <_svfiprintf_r+0x194>
 800a5a6:	ab03      	add	r3, sp, #12
 800a5a8:	9300      	str	r3, [sp, #0]
 800a5aa:	462a      	mov	r2, r5
 800a5ac:	4b0f      	ldr	r3, [pc, #60]	; (800a5ec <_svfiprintf_r+0x1f8>)
 800a5ae:	a904      	add	r1, sp, #16
 800a5b0:	4638      	mov	r0, r7
 800a5b2:	f3af 8000 	nop.w
 800a5b6:	1c42      	adds	r2, r0, #1
 800a5b8:	4606      	mov	r6, r0
 800a5ba:	d1d6      	bne.n	800a56a <_svfiprintf_r+0x176>
 800a5bc:	89ab      	ldrh	r3, [r5, #12]
 800a5be:	065b      	lsls	r3, r3, #25
 800a5c0:	f53f af2c 	bmi.w	800a41c <_svfiprintf_r+0x28>
 800a5c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5c6:	b01d      	add	sp, #116	; 0x74
 800a5c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5cc:	ab03      	add	r3, sp, #12
 800a5ce:	9300      	str	r3, [sp, #0]
 800a5d0:	462a      	mov	r2, r5
 800a5d2:	4b06      	ldr	r3, [pc, #24]	; (800a5ec <_svfiprintf_r+0x1f8>)
 800a5d4:	a904      	add	r1, sp, #16
 800a5d6:	4638      	mov	r0, r7
 800a5d8:	f000 f87a 	bl	800a6d0 <_printf_i>
 800a5dc:	e7eb      	b.n	800a5b6 <_svfiprintf_r+0x1c2>
 800a5de:	bf00      	nop
 800a5e0:	0800ac7c 	.word	0x0800ac7c
 800a5e4:	0800ac86 	.word	0x0800ac86
 800a5e8:	00000000 	.word	0x00000000
 800a5ec:	0800a33d 	.word	0x0800a33d
 800a5f0:	0800ac82 	.word	0x0800ac82

0800a5f4 <_printf_common>:
 800a5f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5f8:	4616      	mov	r6, r2
 800a5fa:	4699      	mov	r9, r3
 800a5fc:	688a      	ldr	r2, [r1, #8]
 800a5fe:	690b      	ldr	r3, [r1, #16]
 800a600:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a604:	4293      	cmp	r3, r2
 800a606:	bfb8      	it	lt
 800a608:	4613      	movlt	r3, r2
 800a60a:	6033      	str	r3, [r6, #0]
 800a60c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a610:	4607      	mov	r7, r0
 800a612:	460c      	mov	r4, r1
 800a614:	b10a      	cbz	r2, 800a61a <_printf_common+0x26>
 800a616:	3301      	adds	r3, #1
 800a618:	6033      	str	r3, [r6, #0]
 800a61a:	6823      	ldr	r3, [r4, #0]
 800a61c:	0699      	lsls	r1, r3, #26
 800a61e:	bf42      	ittt	mi
 800a620:	6833      	ldrmi	r3, [r6, #0]
 800a622:	3302      	addmi	r3, #2
 800a624:	6033      	strmi	r3, [r6, #0]
 800a626:	6825      	ldr	r5, [r4, #0]
 800a628:	f015 0506 	ands.w	r5, r5, #6
 800a62c:	d106      	bne.n	800a63c <_printf_common+0x48>
 800a62e:	f104 0a19 	add.w	sl, r4, #25
 800a632:	68e3      	ldr	r3, [r4, #12]
 800a634:	6832      	ldr	r2, [r6, #0]
 800a636:	1a9b      	subs	r3, r3, r2
 800a638:	42ab      	cmp	r3, r5
 800a63a:	dc26      	bgt.n	800a68a <_printf_common+0x96>
 800a63c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a640:	1e13      	subs	r3, r2, #0
 800a642:	6822      	ldr	r2, [r4, #0]
 800a644:	bf18      	it	ne
 800a646:	2301      	movne	r3, #1
 800a648:	0692      	lsls	r2, r2, #26
 800a64a:	d42b      	bmi.n	800a6a4 <_printf_common+0xb0>
 800a64c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a650:	4649      	mov	r1, r9
 800a652:	4638      	mov	r0, r7
 800a654:	47c0      	blx	r8
 800a656:	3001      	adds	r0, #1
 800a658:	d01e      	beq.n	800a698 <_printf_common+0xa4>
 800a65a:	6823      	ldr	r3, [r4, #0]
 800a65c:	68e5      	ldr	r5, [r4, #12]
 800a65e:	6832      	ldr	r2, [r6, #0]
 800a660:	f003 0306 	and.w	r3, r3, #6
 800a664:	2b04      	cmp	r3, #4
 800a666:	bf08      	it	eq
 800a668:	1aad      	subeq	r5, r5, r2
 800a66a:	68a3      	ldr	r3, [r4, #8]
 800a66c:	6922      	ldr	r2, [r4, #16]
 800a66e:	bf0c      	ite	eq
 800a670:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a674:	2500      	movne	r5, #0
 800a676:	4293      	cmp	r3, r2
 800a678:	bfc4      	itt	gt
 800a67a:	1a9b      	subgt	r3, r3, r2
 800a67c:	18ed      	addgt	r5, r5, r3
 800a67e:	2600      	movs	r6, #0
 800a680:	341a      	adds	r4, #26
 800a682:	42b5      	cmp	r5, r6
 800a684:	d11a      	bne.n	800a6bc <_printf_common+0xc8>
 800a686:	2000      	movs	r0, #0
 800a688:	e008      	b.n	800a69c <_printf_common+0xa8>
 800a68a:	2301      	movs	r3, #1
 800a68c:	4652      	mov	r2, sl
 800a68e:	4649      	mov	r1, r9
 800a690:	4638      	mov	r0, r7
 800a692:	47c0      	blx	r8
 800a694:	3001      	adds	r0, #1
 800a696:	d103      	bne.n	800a6a0 <_printf_common+0xac>
 800a698:	f04f 30ff 	mov.w	r0, #4294967295
 800a69c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6a0:	3501      	adds	r5, #1
 800a6a2:	e7c6      	b.n	800a632 <_printf_common+0x3e>
 800a6a4:	18e1      	adds	r1, r4, r3
 800a6a6:	1c5a      	adds	r2, r3, #1
 800a6a8:	2030      	movs	r0, #48	; 0x30
 800a6aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a6ae:	4422      	add	r2, r4
 800a6b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a6b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a6b8:	3302      	adds	r3, #2
 800a6ba:	e7c7      	b.n	800a64c <_printf_common+0x58>
 800a6bc:	2301      	movs	r3, #1
 800a6be:	4622      	mov	r2, r4
 800a6c0:	4649      	mov	r1, r9
 800a6c2:	4638      	mov	r0, r7
 800a6c4:	47c0      	blx	r8
 800a6c6:	3001      	adds	r0, #1
 800a6c8:	d0e6      	beq.n	800a698 <_printf_common+0xa4>
 800a6ca:	3601      	adds	r6, #1
 800a6cc:	e7d9      	b.n	800a682 <_printf_common+0x8e>
	...

0800a6d0 <_printf_i>:
 800a6d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a6d4:	7e0f      	ldrb	r7, [r1, #24]
 800a6d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a6d8:	2f78      	cmp	r7, #120	; 0x78
 800a6da:	4691      	mov	r9, r2
 800a6dc:	4680      	mov	r8, r0
 800a6de:	460c      	mov	r4, r1
 800a6e0:	469a      	mov	sl, r3
 800a6e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a6e6:	d807      	bhi.n	800a6f8 <_printf_i+0x28>
 800a6e8:	2f62      	cmp	r7, #98	; 0x62
 800a6ea:	d80a      	bhi.n	800a702 <_printf_i+0x32>
 800a6ec:	2f00      	cmp	r7, #0
 800a6ee:	f000 80d8 	beq.w	800a8a2 <_printf_i+0x1d2>
 800a6f2:	2f58      	cmp	r7, #88	; 0x58
 800a6f4:	f000 80a3 	beq.w	800a83e <_printf_i+0x16e>
 800a6f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a700:	e03a      	b.n	800a778 <_printf_i+0xa8>
 800a702:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a706:	2b15      	cmp	r3, #21
 800a708:	d8f6      	bhi.n	800a6f8 <_printf_i+0x28>
 800a70a:	a101      	add	r1, pc, #4	; (adr r1, 800a710 <_printf_i+0x40>)
 800a70c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a710:	0800a769 	.word	0x0800a769
 800a714:	0800a77d 	.word	0x0800a77d
 800a718:	0800a6f9 	.word	0x0800a6f9
 800a71c:	0800a6f9 	.word	0x0800a6f9
 800a720:	0800a6f9 	.word	0x0800a6f9
 800a724:	0800a6f9 	.word	0x0800a6f9
 800a728:	0800a77d 	.word	0x0800a77d
 800a72c:	0800a6f9 	.word	0x0800a6f9
 800a730:	0800a6f9 	.word	0x0800a6f9
 800a734:	0800a6f9 	.word	0x0800a6f9
 800a738:	0800a6f9 	.word	0x0800a6f9
 800a73c:	0800a889 	.word	0x0800a889
 800a740:	0800a7ad 	.word	0x0800a7ad
 800a744:	0800a86b 	.word	0x0800a86b
 800a748:	0800a6f9 	.word	0x0800a6f9
 800a74c:	0800a6f9 	.word	0x0800a6f9
 800a750:	0800a8ab 	.word	0x0800a8ab
 800a754:	0800a6f9 	.word	0x0800a6f9
 800a758:	0800a7ad 	.word	0x0800a7ad
 800a75c:	0800a6f9 	.word	0x0800a6f9
 800a760:	0800a6f9 	.word	0x0800a6f9
 800a764:	0800a873 	.word	0x0800a873
 800a768:	682b      	ldr	r3, [r5, #0]
 800a76a:	1d1a      	adds	r2, r3, #4
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	602a      	str	r2, [r5, #0]
 800a770:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a774:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a778:	2301      	movs	r3, #1
 800a77a:	e0a3      	b.n	800a8c4 <_printf_i+0x1f4>
 800a77c:	6820      	ldr	r0, [r4, #0]
 800a77e:	6829      	ldr	r1, [r5, #0]
 800a780:	0606      	lsls	r6, r0, #24
 800a782:	f101 0304 	add.w	r3, r1, #4
 800a786:	d50a      	bpl.n	800a79e <_printf_i+0xce>
 800a788:	680e      	ldr	r6, [r1, #0]
 800a78a:	602b      	str	r3, [r5, #0]
 800a78c:	2e00      	cmp	r6, #0
 800a78e:	da03      	bge.n	800a798 <_printf_i+0xc8>
 800a790:	232d      	movs	r3, #45	; 0x2d
 800a792:	4276      	negs	r6, r6
 800a794:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a798:	485e      	ldr	r0, [pc, #376]	; (800a914 <_printf_i+0x244>)
 800a79a:	230a      	movs	r3, #10
 800a79c:	e019      	b.n	800a7d2 <_printf_i+0x102>
 800a79e:	680e      	ldr	r6, [r1, #0]
 800a7a0:	602b      	str	r3, [r5, #0]
 800a7a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a7a6:	bf18      	it	ne
 800a7a8:	b236      	sxthne	r6, r6
 800a7aa:	e7ef      	b.n	800a78c <_printf_i+0xbc>
 800a7ac:	682b      	ldr	r3, [r5, #0]
 800a7ae:	6820      	ldr	r0, [r4, #0]
 800a7b0:	1d19      	adds	r1, r3, #4
 800a7b2:	6029      	str	r1, [r5, #0]
 800a7b4:	0601      	lsls	r1, r0, #24
 800a7b6:	d501      	bpl.n	800a7bc <_printf_i+0xec>
 800a7b8:	681e      	ldr	r6, [r3, #0]
 800a7ba:	e002      	b.n	800a7c2 <_printf_i+0xf2>
 800a7bc:	0646      	lsls	r6, r0, #25
 800a7be:	d5fb      	bpl.n	800a7b8 <_printf_i+0xe8>
 800a7c0:	881e      	ldrh	r6, [r3, #0]
 800a7c2:	4854      	ldr	r0, [pc, #336]	; (800a914 <_printf_i+0x244>)
 800a7c4:	2f6f      	cmp	r7, #111	; 0x6f
 800a7c6:	bf0c      	ite	eq
 800a7c8:	2308      	moveq	r3, #8
 800a7ca:	230a      	movne	r3, #10
 800a7cc:	2100      	movs	r1, #0
 800a7ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a7d2:	6865      	ldr	r5, [r4, #4]
 800a7d4:	60a5      	str	r5, [r4, #8]
 800a7d6:	2d00      	cmp	r5, #0
 800a7d8:	bfa2      	ittt	ge
 800a7da:	6821      	ldrge	r1, [r4, #0]
 800a7dc:	f021 0104 	bicge.w	r1, r1, #4
 800a7e0:	6021      	strge	r1, [r4, #0]
 800a7e2:	b90e      	cbnz	r6, 800a7e8 <_printf_i+0x118>
 800a7e4:	2d00      	cmp	r5, #0
 800a7e6:	d04d      	beq.n	800a884 <_printf_i+0x1b4>
 800a7e8:	4615      	mov	r5, r2
 800a7ea:	fbb6 f1f3 	udiv	r1, r6, r3
 800a7ee:	fb03 6711 	mls	r7, r3, r1, r6
 800a7f2:	5dc7      	ldrb	r7, [r0, r7]
 800a7f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a7f8:	4637      	mov	r7, r6
 800a7fa:	42bb      	cmp	r3, r7
 800a7fc:	460e      	mov	r6, r1
 800a7fe:	d9f4      	bls.n	800a7ea <_printf_i+0x11a>
 800a800:	2b08      	cmp	r3, #8
 800a802:	d10b      	bne.n	800a81c <_printf_i+0x14c>
 800a804:	6823      	ldr	r3, [r4, #0]
 800a806:	07de      	lsls	r6, r3, #31
 800a808:	d508      	bpl.n	800a81c <_printf_i+0x14c>
 800a80a:	6923      	ldr	r3, [r4, #16]
 800a80c:	6861      	ldr	r1, [r4, #4]
 800a80e:	4299      	cmp	r1, r3
 800a810:	bfde      	ittt	le
 800a812:	2330      	movle	r3, #48	; 0x30
 800a814:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a818:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a81c:	1b52      	subs	r2, r2, r5
 800a81e:	6122      	str	r2, [r4, #16]
 800a820:	f8cd a000 	str.w	sl, [sp]
 800a824:	464b      	mov	r3, r9
 800a826:	aa03      	add	r2, sp, #12
 800a828:	4621      	mov	r1, r4
 800a82a:	4640      	mov	r0, r8
 800a82c:	f7ff fee2 	bl	800a5f4 <_printf_common>
 800a830:	3001      	adds	r0, #1
 800a832:	d14c      	bne.n	800a8ce <_printf_i+0x1fe>
 800a834:	f04f 30ff 	mov.w	r0, #4294967295
 800a838:	b004      	add	sp, #16
 800a83a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a83e:	4835      	ldr	r0, [pc, #212]	; (800a914 <_printf_i+0x244>)
 800a840:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a844:	6829      	ldr	r1, [r5, #0]
 800a846:	6823      	ldr	r3, [r4, #0]
 800a848:	f851 6b04 	ldr.w	r6, [r1], #4
 800a84c:	6029      	str	r1, [r5, #0]
 800a84e:	061d      	lsls	r5, r3, #24
 800a850:	d514      	bpl.n	800a87c <_printf_i+0x1ac>
 800a852:	07df      	lsls	r7, r3, #31
 800a854:	bf44      	itt	mi
 800a856:	f043 0320 	orrmi.w	r3, r3, #32
 800a85a:	6023      	strmi	r3, [r4, #0]
 800a85c:	b91e      	cbnz	r6, 800a866 <_printf_i+0x196>
 800a85e:	6823      	ldr	r3, [r4, #0]
 800a860:	f023 0320 	bic.w	r3, r3, #32
 800a864:	6023      	str	r3, [r4, #0]
 800a866:	2310      	movs	r3, #16
 800a868:	e7b0      	b.n	800a7cc <_printf_i+0xfc>
 800a86a:	6823      	ldr	r3, [r4, #0]
 800a86c:	f043 0320 	orr.w	r3, r3, #32
 800a870:	6023      	str	r3, [r4, #0]
 800a872:	2378      	movs	r3, #120	; 0x78
 800a874:	4828      	ldr	r0, [pc, #160]	; (800a918 <_printf_i+0x248>)
 800a876:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a87a:	e7e3      	b.n	800a844 <_printf_i+0x174>
 800a87c:	0659      	lsls	r1, r3, #25
 800a87e:	bf48      	it	mi
 800a880:	b2b6      	uxthmi	r6, r6
 800a882:	e7e6      	b.n	800a852 <_printf_i+0x182>
 800a884:	4615      	mov	r5, r2
 800a886:	e7bb      	b.n	800a800 <_printf_i+0x130>
 800a888:	682b      	ldr	r3, [r5, #0]
 800a88a:	6826      	ldr	r6, [r4, #0]
 800a88c:	6961      	ldr	r1, [r4, #20]
 800a88e:	1d18      	adds	r0, r3, #4
 800a890:	6028      	str	r0, [r5, #0]
 800a892:	0635      	lsls	r5, r6, #24
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	d501      	bpl.n	800a89c <_printf_i+0x1cc>
 800a898:	6019      	str	r1, [r3, #0]
 800a89a:	e002      	b.n	800a8a2 <_printf_i+0x1d2>
 800a89c:	0670      	lsls	r0, r6, #25
 800a89e:	d5fb      	bpl.n	800a898 <_printf_i+0x1c8>
 800a8a0:	8019      	strh	r1, [r3, #0]
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	6123      	str	r3, [r4, #16]
 800a8a6:	4615      	mov	r5, r2
 800a8a8:	e7ba      	b.n	800a820 <_printf_i+0x150>
 800a8aa:	682b      	ldr	r3, [r5, #0]
 800a8ac:	1d1a      	adds	r2, r3, #4
 800a8ae:	602a      	str	r2, [r5, #0]
 800a8b0:	681d      	ldr	r5, [r3, #0]
 800a8b2:	6862      	ldr	r2, [r4, #4]
 800a8b4:	2100      	movs	r1, #0
 800a8b6:	4628      	mov	r0, r5
 800a8b8:	f7f5 fc9a 	bl	80001f0 <memchr>
 800a8bc:	b108      	cbz	r0, 800a8c2 <_printf_i+0x1f2>
 800a8be:	1b40      	subs	r0, r0, r5
 800a8c0:	6060      	str	r0, [r4, #4]
 800a8c2:	6863      	ldr	r3, [r4, #4]
 800a8c4:	6123      	str	r3, [r4, #16]
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8cc:	e7a8      	b.n	800a820 <_printf_i+0x150>
 800a8ce:	6923      	ldr	r3, [r4, #16]
 800a8d0:	462a      	mov	r2, r5
 800a8d2:	4649      	mov	r1, r9
 800a8d4:	4640      	mov	r0, r8
 800a8d6:	47d0      	blx	sl
 800a8d8:	3001      	adds	r0, #1
 800a8da:	d0ab      	beq.n	800a834 <_printf_i+0x164>
 800a8dc:	6823      	ldr	r3, [r4, #0]
 800a8de:	079b      	lsls	r3, r3, #30
 800a8e0:	d413      	bmi.n	800a90a <_printf_i+0x23a>
 800a8e2:	68e0      	ldr	r0, [r4, #12]
 800a8e4:	9b03      	ldr	r3, [sp, #12]
 800a8e6:	4298      	cmp	r0, r3
 800a8e8:	bfb8      	it	lt
 800a8ea:	4618      	movlt	r0, r3
 800a8ec:	e7a4      	b.n	800a838 <_printf_i+0x168>
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	4632      	mov	r2, r6
 800a8f2:	4649      	mov	r1, r9
 800a8f4:	4640      	mov	r0, r8
 800a8f6:	47d0      	blx	sl
 800a8f8:	3001      	adds	r0, #1
 800a8fa:	d09b      	beq.n	800a834 <_printf_i+0x164>
 800a8fc:	3501      	adds	r5, #1
 800a8fe:	68e3      	ldr	r3, [r4, #12]
 800a900:	9903      	ldr	r1, [sp, #12]
 800a902:	1a5b      	subs	r3, r3, r1
 800a904:	42ab      	cmp	r3, r5
 800a906:	dcf2      	bgt.n	800a8ee <_printf_i+0x21e>
 800a908:	e7eb      	b.n	800a8e2 <_printf_i+0x212>
 800a90a:	2500      	movs	r5, #0
 800a90c:	f104 0619 	add.w	r6, r4, #25
 800a910:	e7f5      	b.n	800a8fe <_printf_i+0x22e>
 800a912:	bf00      	nop
 800a914:	0800ac8d 	.word	0x0800ac8d
 800a918:	0800ac9e 	.word	0x0800ac9e

0800a91c <memmove>:
 800a91c:	4288      	cmp	r0, r1
 800a91e:	b510      	push	{r4, lr}
 800a920:	eb01 0402 	add.w	r4, r1, r2
 800a924:	d902      	bls.n	800a92c <memmove+0x10>
 800a926:	4284      	cmp	r4, r0
 800a928:	4623      	mov	r3, r4
 800a92a:	d807      	bhi.n	800a93c <memmove+0x20>
 800a92c:	1e43      	subs	r3, r0, #1
 800a92e:	42a1      	cmp	r1, r4
 800a930:	d008      	beq.n	800a944 <memmove+0x28>
 800a932:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a936:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a93a:	e7f8      	b.n	800a92e <memmove+0x12>
 800a93c:	4402      	add	r2, r0
 800a93e:	4601      	mov	r1, r0
 800a940:	428a      	cmp	r2, r1
 800a942:	d100      	bne.n	800a946 <memmove+0x2a>
 800a944:	bd10      	pop	{r4, pc}
 800a946:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a94a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a94e:	e7f7      	b.n	800a940 <memmove+0x24>

0800a950 <_realloc_r>:
 800a950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a954:	4680      	mov	r8, r0
 800a956:	4614      	mov	r4, r2
 800a958:	460e      	mov	r6, r1
 800a95a:	b921      	cbnz	r1, 800a966 <_realloc_r+0x16>
 800a95c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a960:	4611      	mov	r1, r2
 800a962:	f7ff bb85 	b.w	800a070 <_malloc_r>
 800a966:	b92a      	cbnz	r2, 800a974 <_realloc_r+0x24>
 800a968:	f7ff fc9c 	bl	800a2a4 <_free_r>
 800a96c:	4625      	mov	r5, r4
 800a96e:	4628      	mov	r0, r5
 800a970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a974:	f000 f81b 	bl	800a9ae <_malloc_usable_size_r>
 800a978:	4284      	cmp	r4, r0
 800a97a:	4607      	mov	r7, r0
 800a97c:	d802      	bhi.n	800a984 <_realloc_r+0x34>
 800a97e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a982:	d812      	bhi.n	800a9aa <_realloc_r+0x5a>
 800a984:	4621      	mov	r1, r4
 800a986:	4640      	mov	r0, r8
 800a988:	f7ff fb72 	bl	800a070 <_malloc_r>
 800a98c:	4605      	mov	r5, r0
 800a98e:	2800      	cmp	r0, #0
 800a990:	d0ed      	beq.n	800a96e <_realloc_r+0x1e>
 800a992:	42bc      	cmp	r4, r7
 800a994:	4622      	mov	r2, r4
 800a996:	4631      	mov	r1, r6
 800a998:	bf28      	it	cs
 800a99a:	463a      	movcs	r2, r7
 800a99c:	f7ff fb32 	bl	800a004 <memcpy>
 800a9a0:	4631      	mov	r1, r6
 800a9a2:	4640      	mov	r0, r8
 800a9a4:	f7ff fc7e 	bl	800a2a4 <_free_r>
 800a9a8:	e7e1      	b.n	800a96e <_realloc_r+0x1e>
 800a9aa:	4635      	mov	r5, r6
 800a9ac:	e7df      	b.n	800a96e <_realloc_r+0x1e>

0800a9ae <_malloc_usable_size_r>:
 800a9ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9b2:	1f18      	subs	r0, r3, #4
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	bfbc      	itt	lt
 800a9b8:	580b      	ldrlt	r3, [r1, r0]
 800a9ba:	18c0      	addlt	r0, r0, r3
 800a9bc:	4770      	bx	lr
	...

0800a9c0 <_init>:
 800a9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9c2:	bf00      	nop
 800a9c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9c6:	bc08      	pop	{r3}
 800a9c8:	469e      	mov	lr, r3
 800a9ca:	4770      	bx	lr

0800a9cc <_fini>:
 800a9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ce:	bf00      	nop
 800a9d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9d2:	bc08      	pop	{r3}
 800a9d4:	469e      	mov	lr, r3
 800a9d6:	4770      	bx	lr
